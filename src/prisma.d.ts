
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model Content
 * 
 */
export type Content = $Result.DefaultSelection<Prisma.$ContentPayload>
/**
 * Model Display
 * 
 */
export type Display = $Result.DefaultSelection<Prisma.$DisplayPayload>
/**
 * Model PairingCode
 * 
 */
export type PairingCode = $Result.DefaultSelection<Prisma.$PairingCodePayload>
/**
 * Model DisplayContentPair
 * 
 */
export type DisplayContentPair = $Result.DefaultSelection<Prisma.$DisplayContentPairPayload>
/**
 * Model Style
 * 
 */
export type Style = $Result.DefaultSelection<Prisma.$StylePayload>
/**
 * Model Playlist
 * 
 */
export type Playlist = $Result.DefaultSelection<Prisma.$PlaylistPayload>
/**
 * Model PlaylistItem
 * 
 */
export type PlaylistItem = $Result.DefaultSelection<Prisma.$PlaylistItemPayload>
/**
 * Model HostedFile
 * 
 */
export type HostedFile = $Result.DefaultSelection<Prisma.$HostedFilePayload>
/**
 * Model Exhibit
 * 
 */
export type Exhibit = $Result.DefaultSelection<Prisma.$ExhibitPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model DisplayRenewal
 * 
 */
export type DisplayRenewal = $Result.DefaultSelection<Prisma.$DisplayRenewalPayload>
/**
 * Model License
 * 
 */
export type License = $Result.DefaultSelection<Prisma.$LicensePayload>
/**
 * Model UserInvite
 * 
 */
export type UserInvite = $Result.DefaultSelection<Prisma.$UserInvitePayload>
/**
 * Model WebsocketConnectionToken
 * 
 */
export type WebsocketConnectionToken = $Result.DefaultSelection<Prisma.$WebsocketConnectionTokenPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const DeviceType: {
  Computer: 'Computer',
  Tablet: 'Tablet',
  Phone: 'Phone',
  SmartTV: 'SmartTV',
  Unknown: 'Unknown'
};

export type DeviceType = (typeof DeviceType)[keyof typeof DeviceType]


export const HostedFileUploadStatus: {
  Pending: 'Pending',
  Complete: 'Complete',
  Failed: 'Failed'
};

export type HostedFileUploadStatus = (typeof HostedFileUploadStatus)[keyof typeof HostedFileUploadStatus]


export const LicenseType: {
  Free: 'Free',
  Pro: 'Pro',
  Enterprise: 'Enterprise'
};

export type LicenseType = (typeof LicenseType)[keyof typeof LicenseType]

}

export type DeviceType = $Enums.DeviceType

export const DeviceType: typeof $Enums.DeviceType

export type HostedFileUploadStatus = $Enums.HostedFileUploadStatus

export const HostedFileUploadStatus: typeof $Enums.HostedFileUploadStatus

export type LicenseType = $Enums.LicenseType

export const LicenseType: typeof $Enums.LicenseType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs>;

  /**
   * `prisma.content`: Exposes CRUD operations for the **Content** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contents
    * const contents = await prisma.content.findMany()
    * ```
    */
  get content(): Prisma.ContentDelegate<ExtArgs>;

  /**
   * `prisma.display`: Exposes CRUD operations for the **Display** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Displays
    * const displays = await prisma.display.findMany()
    * ```
    */
  get display(): Prisma.DisplayDelegate<ExtArgs>;

  /**
   * `prisma.pairingCode`: Exposes CRUD operations for the **PairingCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PairingCodes
    * const pairingCodes = await prisma.pairingCode.findMany()
    * ```
    */
  get pairingCode(): Prisma.PairingCodeDelegate<ExtArgs>;

  /**
   * `prisma.displayContentPair`: Exposes CRUD operations for the **DisplayContentPair** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DisplayContentPairs
    * const displayContentPairs = await prisma.displayContentPair.findMany()
    * ```
    */
  get displayContentPair(): Prisma.DisplayContentPairDelegate<ExtArgs>;

  /**
   * `prisma.style`: Exposes CRUD operations for the **Style** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Styles
    * const styles = await prisma.style.findMany()
    * ```
    */
  get style(): Prisma.StyleDelegate<ExtArgs>;

  /**
   * `prisma.playlist`: Exposes CRUD operations for the **Playlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlists
    * const playlists = await prisma.playlist.findMany()
    * ```
    */
  get playlist(): Prisma.PlaylistDelegate<ExtArgs>;

  /**
   * `prisma.playlistItem`: Exposes CRUD operations for the **PlaylistItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlaylistItems
    * const playlistItems = await prisma.playlistItem.findMany()
    * ```
    */
  get playlistItem(): Prisma.PlaylistItemDelegate<ExtArgs>;

  /**
   * `prisma.hostedFile`: Exposes CRUD operations for the **HostedFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostedFiles
    * const hostedFiles = await prisma.hostedFile.findMany()
    * ```
    */
  get hostedFile(): Prisma.HostedFileDelegate<ExtArgs>;

  /**
   * `prisma.exhibit`: Exposes CRUD operations for the **Exhibit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exhibits
    * const exhibits = await prisma.exhibit.findMany()
    * ```
    */
  get exhibit(): Prisma.ExhibitDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.displayRenewal`: Exposes CRUD operations for the **DisplayRenewal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DisplayRenewals
    * const displayRenewals = await prisma.displayRenewal.findMany()
    * ```
    */
  get displayRenewal(): Prisma.DisplayRenewalDelegate<ExtArgs>;

  /**
   * `prisma.license`: Exposes CRUD operations for the **License** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Licenses
    * const licenses = await prisma.license.findMany()
    * ```
    */
  get license(): Prisma.LicenseDelegate<ExtArgs>;

  /**
   * `prisma.userInvite`: Exposes CRUD operations for the **UserInvite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserInvites
    * const userInvites = await prisma.userInvite.findMany()
    * ```
    */
  get userInvite(): Prisma.UserInviteDelegate<ExtArgs>;

  /**
   * `prisma.websocketConnectionToken`: Exposes CRUD operations for the **WebsocketConnectionToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebsocketConnectionTokens
    * const websocketConnectionTokens = await prisma.websocketConnectionToken.findMany()
    * ```
    */
  get websocketConnectionToken(): Prisma.WebsocketConnectionTokenDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Organization: 'Organization',
    Content: 'Content',
    Display: 'Display',
    PairingCode: 'PairingCode',
    DisplayContentPair: 'DisplayContentPair',
    Style: 'Style',
    Playlist: 'Playlist',
    PlaylistItem: 'PlaylistItem',
    HostedFile: 'HostedFile',
    Exhibit: 'Exhibit',
    Role: 'Role',
    DisplayRenewal: 'DisplayRenewal',
    License: 'License',
    UserInvite: 'UserInvite',
    WebsocketConnectionToken: 'WebsocketConnectionToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'organization' | 'content' | 'display' | 'pairingCode' | 'displayContentPair' | 'style' | 'playlist' | 'playlistItem' | 'hostedFile' | 'exhibit' | 'role' | 'displayRenewal' | 'license' | 'userInvite' | 'websocketConnectionToken'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      Content: {
        payload: Prisma.$ContentPayload<ExtArgs>
        fields: Prisma.ContentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          findFirst: {
            args: Prisma.ContentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          findMany: {
            args: Prisma.ContentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>[]
          }
          create: {
            args: Prisma.ContentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          createMany: {
            args: Prisma.ContentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ContentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          update: {
            args: Prisma.ContentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          deleteMany: {
            args: Prisma.ContentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ContentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ContentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ContentPayload>
          }
          aggregate: {
            args: Prisma.ContentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateContent>
          }
          groupBy: {
            args: Prisma.ContentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContentCountArgs<ExtArgs>,
            result: $Utils.Optional<ContentCountAggregateOutputType> | number
          }
        }
      }
      Display: {
        payload: Prisma.$DisplayPayload<ExtArgs>
        fields: Prisma.DisplayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisplayFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisplayFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload>
          }
          findFirst: {
            args: Prisma.DisplayFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisplayFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload>
          }
          findMany: {
            args: Prisma.DisplayFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload>[]
          }
          create: {
            args: Prisma.DisplayCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload>
          }
          createMany: {
            args: Prisma.DisplayCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DisplayDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload>
          }
          update: {
            args: Prisma.DisplayUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload>
          }
          deleteMany: {
            args: Prisma.DisplayDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DisplayUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DisplayUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayPayload>
          }
          aggregate: {
            args: Prisma.DisplayAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDisplay>
          }
          groupBy: {
            args: Prisma.DisplayGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DisplayGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisplayCountArgs<ExtArgs>,
            result: $Utils.Optional<DisplayCountAggregateOutputType> | number
          }
        }
      }
      PairingCode: {
        payload: Prisma.$PairingCodePayload<ExtArgs>
        fields: Prisma.PairingCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PairingCodeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PairingCodeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload>
          }
          findFirst: {
            args: Prisma.PairingCodeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PairingCodeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload>
          }
          findMany: {
            args: Prisma.PairingCodeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload>[]
          }
          create: {
            args: Prisma.PairingCodeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload>
          }
          createMany: {
            args: Prisma.PairingCodeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PairingCodeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload>
          }
          update: {
            args: Prisma.PairingCodeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload>
          }
          deleteMany: {
            args: Prisma.PairingCodeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PairingCodeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PairingCodeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PairingCodePayload>
          }
          aggregate: {
            args: Prisma.PairingCodeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePairingCode>
          }
          groupBy: {
            args: Prisma.PairingCodeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PairingCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PairingCodeCountArgs<ExtArgs>,
            result: $Utils.Optional<PairingCodeCountAggregateOutputType> | number
          }
        }
      }
      DisplayContentPair: {
        payload: Prisma.$DisplayContentPairPayload<ExtArgs>
        fields: Prisma.DisplayContentPairFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisplayContentPairFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisplayContentPairFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload>
          }
          findFirst: {
            args: Prisma.DisplayContentPairFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisplayContentPairFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload>
          }
          findMany: {
            args: Prisma.DisplayContentPairFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload>[]
          }
          create: {
            args: Prisma.DisplayContentPairCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload>
          }
          createMany: {
            args: Prisma.DisplayContentPairCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DisplayContentPairDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload>
          }
          update: {
            args: Prisma.DisplayContentPairUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload>
          }
          deleteMany: {
            args: Prisma.DisplayContentPairDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DisplayContentPairUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DisplayContentPairUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayContentPairPayload>
          }
          aggregate: {
            args: Prisma.DisplayContentPairAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDisplayContentPair>
          }
          groupBy: {
            args: Prisma.DisplayContentPairGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DisplayContentPairGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisplayContentPairCountArgs<ExtArgs>,
            result: $Utils.Optional<DisplayContentPairCountAggregateOutputType> | number
          }
        }
      }
      Style: {
        payload: Prisma.$StylePayload<ExtArgs>
        fields: Prisma.StyleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StyleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StyleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          findFirst: {
            args: Prisma.StyleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StyleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          findMany: {
            args: Prisma.StyleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload>[]
          }
          create: {
            args: Prisma.StyleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          createMany: {
            args: Prisma.StyleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StyleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          update: {
            args: Prisma.StyleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          deleteMany: {
            args: Prisma.StyleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StyleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StyleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StylePayload>
          }
          aggregate: {
            args: Prisma.StyleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStyle>
          }
          groupBy: {
            args: Prisma.StyleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StyleGroupByOutputType>[]
          }
          count: {
            args: Prisma.StyleCountArgs<ExtArgs>,
            result: $Utils.Optional<StyleCountAggregateOutputType> | number
          }
        }
      }
      Playlist: {
        payload: Prisma.$PlaylistPayload<ExtArgs>
        fields: Prisma.PlaylistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaylistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaylistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findFirst: {
            args: Prisma.PlaylistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaylistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findMany: {
            args: Prisma.PlaylistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
          }
          create: {
            args: Prisma.PlaylistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          createMany: {
            args: Prisma.PlaylistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlaylistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          update: {
            args: Prisma.PlaylistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          deleteMany: {
            args: Prisma.PlaylistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlaylistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlaylistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          aggregate: {
            args: Prisma.PlaylistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlaylist>
          }
          groupBy: {
            args: Prisma.PlaylistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaylistCountArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistCountAggregateOutputType> | number
          }
        }
      }
      PlaylistItem: {
        payload: Prisma.$PlaylistItemPayload<ExtArgs>
        fields: Prisma.PlaylistItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaylistItemFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaylistItemFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload>
          }
          findFirst: {
            args: Prisma.PlaylistItemFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaylistItemFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload>
          }
          findMany: {
            args: Prisma.PlaylistItemFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload>[]
          }
          create: {
            args: Prisma.PlaylistItemCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload>
          }
          createMany: {
            args: Prisma.PlaylistItemCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlaylistItemDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload>
          }
          update: {
            args: Prisma.PlaylistItemUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload>
          }
          deleteMany: {
            args: Prisma.PlaylistItemDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlaylistItemUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlaylistItemUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistItemPayload>
          }
          aggregate: {
            args: Prisma.PlaylistItemAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlaylistItem>
          }
          groupBy: {
            args: Prisma.PlaylistItemGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaylistItemCountArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistItemCountAggregateOutputType> | number
          }
        }
      }
      HostedFile: {
        payload: Prisma.$HostedFilePayload<ExtArgs>
        fields: Prisma.HostedFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostedFileFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostedFileFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload>
          }
          findFirst: {
            args: Prisma.HostedFileFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostedFileFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload>
          }
          findMany: {
            args: Prisma.HostedFileFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload>[]
          }
          create: {
            args: Prisma.HostedFileCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload>
          }
          createMany: {
            args: Prisma.HostedFileCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HostedFileDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload>
          }
          update: {
            args: Prisma.HostedFileUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload>
          }
          deleteMany: {
            args: Prisma.HostedFileDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HostedFileUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HostedFileUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HostedFilePayload>
          }
          aggregate: {
            args: Prisma.HostedFileAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHostedFile>
          }
          groupBy: {
            args: Prisma.HostedFileGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HostedFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostedFileCountArgs<ExtArgs>,
            result: $Utils.Optional<HostedFileCountAggregateOutputType> | number
          }
        }
      }
      Exhibit: {
        payload: Prisma.$ExhibitPayload<ExtArgs>
        fields: Prisma.ExhibitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExhibitFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExhibitFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload>
          }
          findFirst: {
            args: Prisma.ExhibitFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExhibitFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload>
          }
          findMany: {
            args: Prisma.ExhibitFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload>[]
          }
          create: {
            args: Prisma.ExhibitCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload>
          }
          createMany: {
            args: Prisma.ExhibitCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExhibitDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload>
          }
          update: {
            args: Prisma.ExhibitUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload>
          }
          deleteMany: {
            args: Prisma.ExhibitDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExhibitUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExhibitUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExhibitPayload>
          }
          aggregate: {
            args: Prisma.ExhibitAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExhibit>
          }
          groupBy: {
            args: Prisma.ExhibitGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExhibitGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExhibitCountArgs<ExtArgs>,
            result: $Utils.Optional<ExhibitCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      DisplayRenewal: {
        payload: Prisma.$DisplayRenewalPayload<ExtArgs>
        fields: Prisma.DisplayRenewalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisplayRenewalFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisplayRenewalFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload>
          }
          findFirst: {
            args: Prisma.DisplayRenewalFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisplayRenewalFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload>
          }
          findMany: {
            args: Prisma.DisplayRenewalFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload>[]
          }
          create: {
            args: Prisma.DisplayRenewalCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload>
          }
          createMany: {
            args: Prisma.DisplayRenewalCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DisplayRenewalDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload>
          }
          update: {
            args: Prisma.DisplayRenewalUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload>
          }
          deleteMany: {
            args: Prisma.DisplayRenewalDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DisplayRenewalUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DisplayRenewalUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DisplayRenewalPayload>
          }
          aggregate: {
            args: Prisma.DisplayRenewalAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDisplayRenewal>
          }
          groupBy: {
            args: Prisma.DisplayRenewalGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DisplayRenewalGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisplayRenewalCountArgs<ExtArgs>,
            result: $Utils.Optional<DisplayRenewalCountAggregateOutputType> | number
          }
        }
      }
      License: {
        payload: Prisma.$LicensePayload<ExtArgs>
        fields: Prisma.LicenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LicenseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LicenseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          findFirst: {
            args: Prisma.LicenseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LicenseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          findMany: {
            args: Prisma.LicenseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>[]
          }
          create: {
            args: Prisma.LicenseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          createMany: {
            args: Prisma.LicenseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LicenseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          update: {
            args: Prisma.LicenseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          deleteMany: {
            args: Prisma.LicenseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LicenseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LicenseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          aggregate: {
            args: Prisma.LicenseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLicense>
          }
          groupBy: {
            args: Prisma.LicenseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LicenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.LicenseCountArgs<ExtArgs>,
            result: $Utils.Optional<LicenseCountAggregateOutputType> | number
          }
        }
      }
      UserInvite: {
        payload: Prisma.$UserInvitePayload<ExtArgs>
        fields: Prisma.UserInviteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserInviteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserInviteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload>
          }
          findFirst: {
            args: Prisma.UserInviteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserInviteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload>
          }
          findMany: {
            args: Prisma.UserInviteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload>[]
          }
          create: {
            args: Prisma.UserInviteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload>
          }
          createMany: {
            args: Prisma.UserInviteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserInviteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload>
          }
          update: {
            args: Prisma.UserInviteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload>
          }
          deleteMany: {
            args: Prisma.UserInviteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserInviteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserInviteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserInvitePayload>
          }
          aggregate: {
            args: Prisma.UserInviteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserInvite>
          }
          groupBy: {
            args: Prisma.UserInviteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserInviteGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserInviteCountArgs<ExtArgs>,
            result: $Utils.Optional<UserInviteCountAggregateOutputType> | number
          }
        }
      }
      WebsocketConnectionToken: {
        payload: Prisma.$WebsocketConnectionTokenPayload<ExtArgs>
        fields: Prisma.WebsocketConnectionTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebsocketConnectionTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebsocketConnectionTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload>
          }
          findFirst: {
            args: Prisma.WebsocketConnectionTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebsocketConnectionTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload>
          }
          findMany: {
            args: Prisma.WebsocketConnectionTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload>[]
          }
          create: {
            args: Prisma.WebsocketConnectionTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload>
          }
          createMany: {
            args: Prisma.WebsocketConnectionTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WebsocketConnectionTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload>
          }
          update: {
            args: Prisma.WebsocketConnectionTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload>
          }
          deleteMany: {
            args: Prisma.WebsocketConnectionTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WebsocketConnectionTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WebsocketConnectionTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WebsocketConnectionTokenPayload>
          }
          aggregate: {
            args: Prisma.WebsocketConnectionTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWebsocketConnectionToken>
          }
          groupBy: {
            args: Prisma.WebsocketConnectionTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WebsocketConnectionTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebsocketConnectionTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<WebsocketConnectionTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    content: number
    playlists: number
    hostedFiles: number
    roles: number
    userInvites: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | UserCountOutputTypeCountContentArgs
    playlists?: boolean | UserCountOutputTypeCountPlaylistsArgs
    hostedFiles?: boolean | UserCountOutputTypeCountHostedFilesArgs
    roles?: boolean | UserCountOutputTypeCountRolesArgs
    userInvites?: boolean | UserCountOutputTypeCountUserInvitesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlaylistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHostedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostedFileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInviteWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    users: number
    content: number
    displays: number
    hostedFiles: number
    userInvites: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
    content?: boolean | OrganizationCountOutputTypeCountContentArgs
    displays?: boolean | OrganizationCountOutputTypeCountDisplaysArgs
    hostedFiles?: boolean | OrganizationCountOutputTypeCountHostedFilesArgs
    userInvites?: boolean | OrganizationCountOutputTypeCountUserInvitesArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountDisplaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisplayWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountHostedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostedFileWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUserInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInviteWhereInput
  }


  /**
   * Count Type ContentCountOutputType
   */

  export type ContentCountOutputType = {
    displayContentPairs: number
    playlistItems: number
    exhibits: number
  }

  export type ContentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    displayContentPairs?: boolean | ContentCountOutputTypeCountDisplayContentPairsArgs
    playlistItems?: boolean | ContentCountOutputTypeCountPlaylistItemsArgs
    exhibits?: boolean | ContentCountOutputTypeCountExhibitsArgs
  }

  // Custom InputTypes
  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContentCountOutputType
     */
    select?: ContentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountDisplayContentPairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisplayContentPairWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountPlaylistItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistItemWhereInput
  }

  /**
   * ContentCountOutputType without action
   */
  export type ContentCountOutputTypeCountExhibitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExhibitWhereInput
  }


  /**
   * Count Type DisplayCountOutputType
   */

  export type DisplayCountOutputType = {
    displayContentPairs: number
    playlists: number
    pairingCodes: number
  }

  export type DisplayCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    displayContentPairs?: boolean | DisplayCountOutputTypeCountDisplayContentPairsArgs
    playlists?: boolean | DisplayCountOutputTypeCountPlaylistsArgs
    pairingCodes?: boolean | DisplayCountOutputTypeCountPairingCodesArgs
  }

  // Custom InputTypes
  /**
   * DisplayCountOutputType without action
   */
  export type DisplayCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayCountOutputType
     */
    select?: DisplayCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DisplayCountOutputType without action
   */
  export type DisplayCountOutputTypeCountDisplayContentPairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisplayContentPairWhereInput
  }

  /**
   * DisplayCountOutputType without action
   */
  export type DisplayCountOutputTypeCountPlaylistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
  }

  /**
   * DisplayCountOutputType without action
   */
  export type DisplayCountOutputTypeCountPairingCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PairingCodeWhereInput
  }


  /**
   * Count Type DisplayContentPairCountOutputType
   */

  export type DisplayContentPairCountOutputType = {
    playlistItems: number
  }

  export type DisplayContentPairCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlistItems?: boolean | DisplayContentPairCountOutputTypeCountPlaylistItemsArgs
  }

  // Custom InputTypes
  /**
   * DisplayContentPairCountOutputType without action
   */
  export type DisplayContentPairCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPairCountOutputType
     */
    select?: DisplayContentPairCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DisplayContentPairCountOutputType without action
   */
  export type DisplayContentPairCountOutputTypeCountPlaylistItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistItemWhereInput
  }


  /**
   * Count Type StyleCountOutputType
   */

  export type StyleCountOutputType = {
    content: number
    displayContentPairs: number
  }

  export type StyleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | StyleCountOutputTypeCountContentArgs
    displayContentPairs?: boolean | StyleCountOutputTypeCountDisplayContentPairsArgs
  }

  // Custom InputTypes
  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleCountOutputType
     */
    select?: StyleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
  }

  /**
   * StyleCountOutputType without action
   */
  export type StyleCountOutputTypeCountDisplayContentPairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisplayContentPairWhereInput
  }


  /**
   * Count Type PlaylistCountOutputType
   */

  export type PlaylistCountOutputType = {
    playlistItem: number
  }

  export type PlaylistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlistItem?: boolean | PlaylistCountOutputTypeCountPlaylistItemArgs
  }

  // Custom InputTypes
  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistCountOutputType
     */
    select?: PlaylistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeCountPlaylistItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistItemWhereInput
  }


  /**
   * Count Type HostedFileCountOutputType
   */

  export type HostedFileCountOutputType = {
    content: number
  }

  export type HostedFileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | HostedFileCountOutputTypeCountContentArgs
  }

  // Custom InputTypes
  /**
   * HostedFileCountOutputType without action
   */
  export type HostedFileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFileCountOutputType
     */
    select?: HostedFileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HostedFileCountOutputType without action
   */
  export type HostedFileCountOutputTypeCountContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
  }


  /**
   * Count Type ExhibitCountOutputType
   */

  export type ExhibitCountOutputType = {
    content: number
  }

  export type ExhibitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | ExhibitCountOutputTypeCountContentArgs
  }

  // Custom InputTypes
  /**
   * ExhibitCountOutputType without action
   */
  export type ExhibitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExhibitCountOutputType
     */
    select?: ExhibitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExhibitCountOutputType without action
   */
  export type ExhibitCountOutputTypeCountContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
    userInvites: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
    userInvites?: boolean | RoleCountOutputTypeCountUserInvitesArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInviteWhereInput
  }


  /**
   * Count Type UserInviteCountOutputType
   */

  export type UserInviteCountOutputType = {
    roles: number
  }

  export type UserInviteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | UserInviteCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * UserInviteCountOutputType without action
   */
  export type UserInviteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInviteCountOutputType
     */
    select?: UserInviteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserInviteCountOutputType without action
   */
  export type UserInviteCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    organizationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    organizationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    password: string
    organizationId: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    content?: boolean | User$contentArgs<ExtArgs>
    playlists?: boolean | User$playlistsArgs<ExtArgs>
    hostedFiles?: boolean | User$hostedFilesArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    userInvites?: boolean | User$userInvitesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    content?: boolean | User$contentArgs<ExtArgs>
    playlists?: boolean | User$playlistsArgs<ExtArgs>
    hostedFiles?: boolean | User$hostedFilesArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    userInvites?: boolean | User$userInvitesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs>[]
      playlists: Prisma.$PlaylistPayload<ExtArgs>[]
      hostedFiles: Prisma.$HostedFilePayload<ExtArgs>[]
      roles: Prisma.$RolePayload<ExtArgs>[]
      userInvites: Prisma.$UserInvitePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      password: string
      organizationId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    content<T extends User$contentArgs<ExtArgs> = {}>(args?: Subset<T, User$contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findMany'> | Null>;

    playlists<T extends User$playlistsArgs<ExtArgs> = {}>(args?: Subset<T, User$playlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findMany'> | Null>;

    hostedFiles<T extends User$hostedFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$hostedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findMany'> | Null>;

    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'> | Null>;

    userInvites<T extends User$userInvitesArgs<ExtArgs> = {}>(args?: Subset<T, User$userInvitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly organizationId: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.content
   */
  export type User$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    cursor?: ContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * User.playlists
   */
  export type User$playlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    cursor?: PlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * User.hostedFiles
   */
  export type User$hostedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    where?: HostedFileWhereInput
    orderBy?: HostedFileOrderByWithRelationInput | HostedFileOrderByWithRelationInput[]
    cursor?: HostedFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HostedFileScalarFieldEnum | HostedFileScalarFieldEnum[]
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * User.userInvites
   */
  export type User$userInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    where?: UserInviteWhereInput
    orderBy?: UserInviteOrderByWithRelationInput | UserInviteOrderByWithRelationInput[]
    cursor?: UserInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserInviteScalarFieldEnum | UserInviteScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    licenseId: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    licenseId: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    licenseId: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    licenseId?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    licenseId?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    licenseId?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    licenseId: string
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    licenseId?: boolean
    users?: boolean | Organization$usersArgs<ExtArgs>
    content?: boolean | Organization$contentArgs<ExtArgs>
    displays?: boolean | Organization$displaysArgs<ExtArgs>
    hostedFiles?: boolean | Organization$hostedFilesArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
    userInvites?: boolean | Organization$userInvitesArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    licenseId?: boolean
  }


  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Organization$usersArgs<ExtArgs>
    content?: boolean | Organization$contentArgs<ExtArgs>
    displays?: boolean | Organization$displaysArgs<ExtArgs>
    hostedFiles?: boolean | Organization$hostedFilesArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
    userInvites?: boolean | Organization$userInvitesArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      content: Prisma.$ContentPayload<ExtArgs>[]
      displays: Prisma.$DisplayPayload<ExtArgs>[]
      hostedFiles: Prisma.$HostedFilePayload<ExtArgs>[]
      license: Prisma.$LicensePayload<ExtArgs>
      userInvites: Prisma.$UserInvitePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      licenseId: string
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }


  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Organization that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Organizations.
     *     @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    content<T extends Organization$contentArgs<ExtArgs> = {}>(args?: Subset<T, Organization$contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findMany'> | Null>;

    displays<T extends Organization$displaysArgs<ExtArgs> = {}>(args?: Subset<T, Organization$displaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findMany'> | Null>;

    hostedFiles<T extends Organization$hostedFilesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$hostedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findMany'> | Null>;

    license<T extends LicenseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LicenseDefaultArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    userInvites<T extends Organization$userInvitesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$userInvitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Organization model
   */ 
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly licenseId: FieldRef<"Organization", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization.content
   */
  export type Organization$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    cursor?: ContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Organization.displays
   */
  export type Organization$displaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    where?: DisplayWhereInput
    orderBy?: DisplayOrderByWithRelationInput | DisplayOrderByWithRelationInput[]
    cursor?: DisplayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisplayScalarFieldEnum | DisplayScalarFieldEnum[]
  }

  /**
   * Organization.hostedFiles
   */
  export type Organization$hostedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    where?: HostedFileWhereInput
    orderBy?: HostedFileOrderByWithRelationInput | HostedFileOrderByWithRelationInput[]
    cursor?: HostedFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HostedFileScalarFieldEnum | HostedFileScalarFieldEnum[]
  }

  /**
   * Organization.userInvites
   */
  export type Organization$userInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    where?: UserInviteWhereInput
    orderBy?: UserInviteOrderByWithRelationInput | UserInviteOrderByWithRelationInput[]
    cursor?: UserInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserInviteScalarFieldEnum | UserInviteScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model Content
   */

  export type AggregateContent = {
    _count: ContentCountAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  export type ContentMinAggregateOutputType = {
    id: string | null
    uri: string | null
    name: string | null
    description: string | null
    thumbnailUri: string | null
    mimetype: string | null
    bytes: string | null
    createdAt: Date | null
    userId: string | null
    organizationId: string | null
    styleId: string | null
    directoryId: string | null
    hostedFileId: string | null
  }

  export type ContentMaxAggregateOutputType = {
    id: string | null
    uri: string | null
    name: string | null
    description: string | null
    thumbnailUri: string | null
    mimetype: string | null
    bytes: string | null
    createdAt: Date | null
    userId: string | null
    organizationId: string | null
    styleId: string | null
    directoryId: string | null
    hostedFileId: string | null
  }

  export type ContentCountAggregateOutputType = {
    id: number
    uri: number
    name: number
    description: number
    thumbnailUri: number
    mimetype: number
    bytes: number
    createdAt: number
    userId: number
    organizationId: number
    styleId: number
    directoryId: number
    hostedFileId: number
    _all: number
  }


  export type ContentMinAggregateInputType = {
    id?: true
    uri?: true
    name?: true
    description?: true
    thumbnailUri?: true
    mimetype?: true
    bytes?: true
    createdAt?: true
    userId?: true
    organizationId?: true
    styleId?: true
    directoryId?: true
    hostedFileId?: true
  }

  export type ContentMaxAggregateInputType = {
    id?: true
    uri?: true
    name?: true
    description?: true
    thumbnailUri?: true
    mimetype?: true
    bytes?: true
    createdAt?: true
    userId?: true
    organizationId?: true
    styleId?: true
    directoryId?: true
    hostedFileId?: true
  }

  export type ContentCountAggregateInputType = {
    id?: true
    uri?: true
    name?: true
    description?: true
    thumbnailUri?: true
    mimetype?: true
    bytes?: true
    createdAt?: true
    userId?: true
    organizationId?: true
    styleId?: true
    directoryId?: true
    hostedFileId?: true
    _all?: true
  }

  export type ContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Content to aggregate.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contents
    **/
    _count?: true | ContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentMaxAggregateInputType
  }

  export type GetContentAggregateType<T extends ContentAggregateArgs> = {
        [P in keyof T & keyof AggregateContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContent[P]>
      : GetScalarType<T[P], AggregateContent[P]>
  }




  export type ContentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithAggregationInput | ContentOrderByWithAggregationInput[]
    by: ContentScalarFieldEnum[] | ContentScalarFieldEnum
    having?: ContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentCountAggregateInputType | true
    _min?: ContentMinAggregateInputType
    _max?: ContentMaxAggregateInputType
  }

  export type ContentGroupByOutputType = {
    id: string
    uri: string
    name: string | null
    description: string | null
    thumbnailUri: string | null
    mimetype: string
    bytes: string
    createdAt: Date
    userId: string
    organizationId: string
    styleId: string | null
    directoryId: string | null
    hostedFileId: string | null
    _count: ContentCountAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  type GetContentGroupByPayload<T extends ContentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentGroupByOutputType[P]>
        }
      >
    >


  export type ContentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uri?: boolean
    name?: boolean
    description?: boolean
    thumbnailUri?: boolean
    mimetype?: boolean
    bytes?: boolean
    createdAt?: boolean
    userId?: boolean
    organizationId?: boolean
    styleId?: boolean
    directoryId?: boolean
    hostedFileId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    hostedFile?: boolean | Content$hostedFileArgs<ExtArgs>
    displayContentPairs?: boolean | Content$displayContentPairsArgs<ExtArgs>
    playlistItems?: boolean | Content$playlistItemsArgs<ExtArgs>
    style?: boolean | Content$styleArgs<ExtArgs>
    exhibits?: boolean | Content$exhibitsArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["content"]>

  export type ContentSelectScalar = {
    id?: boolean
    uri?: boolean
    name?: boolean
    description?: boolean
    thumbnailUri?: boolean
    mimetype?: boolean
    bytes?: boolean
    createdAt?: boolean
    userId?: boolean
    organizationId?: boolean
    styleId?: boolean
    directoryId?: boolean
    hostedFileId?: boolean
  }


  export type ContentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    hostedFile?: boolean | Content$hostedFileArgs<ExtArgs>
    displayContentPairs?: boolean | Content$displayContentPairsArgs<ExtArgs>
    playlistItems?: boolean | Content$playlistItemsArgs<ExtArgs>
    style?: boolean | Content$styleArgs<ExtArgs>
    exhibits?: boolean | Content$exhibitsArgs<ExtArgs>
    _count?: boolean | ContentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ContentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Content"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
      hostedFile: Prisma.$HostedFilePayload<ExtArgs> | null
      displayContentPairs: Prisma.$DisplayContentPairPayload<ExtArgs>[]
      playlistItems: Prisma.$PlaylistItemPayload<ExtArgs>[]
      style: Prisma.$StylePayload<ExtArgs> | null
      exhibits: Prisma.$ExhibitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      uri: string
      name: string | null
      description: string | null
      thumbnailUri: string | null
      mimetype: string
      bytes: string
      createdAt: Date
      userId: string
      organizationId: string
      styleId: string | null
      directoryId: string | null
      hostedFileId: string | null
    }, ExtArgs["result"]["content"]>
    composites: {}
  }


  type ContentGetPayload<S extends boolean | null | undefined | ContentDefaultArgs> = $Result.GetResult<Prisma.$ContentPayload, S>

  type ContentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContentCountAggregateInputType | true
    }

  export interface ContentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Content'], meta: { name: 'Content' } }
    /**
     * Find zero or one Content that matches the filter.
     * @param {ContentFindUniqueArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ContentFindUniqueArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Content that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContentFindUniqueOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Content that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindFirstArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFindFirstArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Content that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindFirstOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Contents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contents
     * const contents = await prisma.content.findMany()
     * 
     * // Get first 10 Contents
     * const contents = await prisma.content.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentWithIdOnly = await prisma.content.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Content.
     * @param {ContentCreateArgs} args - Arguments to create a Content.
     * @example
     * // Create one Content
     * const Content = await prisma.content.create({
     *   data: {
     *     // ... data to create a Content
     *   }
     * })
     * 
    **/
    create<T extends ContentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ContentCreateArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Contents.
     *     @param {ContentCreateManyArgs} args - Arguments to create many Contents.
     *     @example
     *     // Create many Contents
     *     const content = await prisma.content.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Content.
     * @param {ContentDeleteArgs} args - Arguments to delete one Content.
     * @example
     * // Delete one Content
     * const Content = await prisma.content.delete({
     *   where: {
     *     // ... filter to delete one Content
     *   }
     * })
     * 
    **/
    delete<T extends ContentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ContentDeleteArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Content.
     * @param {ContentUpdateArgs} args - Arguments to update one Content.
     * @example
     * // Update one Content
     * const content = await prisma.content.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ContentUpdateArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Contents.
     * @param {ContentDeleteManyArgs} args - Arguments to filter Contents to delete.
     * @example
     * // Delete a few Contents
     * const { count } = await prisma.content.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ContentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ContentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Content.
     * @param {ContentUpsertArgs} args - Arguments to update or create a Content.
     * @example
     * // Update or create a Content
     * const content = await prisma.content.upsert({
     *   create: {
     *     // ... data to create a Content
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Content we want to update
     *   }
     * })
    **/
    upsert<T extends ContentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ContentUpsertArgs<ExtArgs>>
    ): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCountArgs} args - Arguments to filter Contents to count.
     * @example
     * // Count the number of Contents
     * const count = await prisma.content.count({
     *   where: {
     *     // ... the filter for the Contents we want to count
     *   }
     * })
    **/
    count<T extends ContentCountArgs>(
      args?: Subset<T, ContentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentAggregateArgs>(args: Subset<T, ContentAggregateArgs>): Prisma.PrismaPromise<GetContentAggregateType<T>>

    /**
     * Group by Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentGroupByArgs['orderBy'] }
        : { orderBy?: ContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Content model
   */
  readonly fields: ContentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Content.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    hostedFile<T extends Content$hostedFileArgs<ExtArgs> = {}>(args?: Subset<T, Content$hostedFileArgs<ExtArgs>>): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    displayContentPairs<T extends Content$displayContentPairsArgs<ExtArgs> = {}>(args?: Subset<T, Content$displayContentPairsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findMany'> | Null>;

    playlistItems<T extends Content$playlistItemsArgs<ExtArgs> = {}>(args?: Subset<T, Content$playlistItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    style<T extends Content$styleArgs<ExtArgs> = {}>(args?: Subset<T, Content$styleArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    exhibits<T extends Content$exhibitsArgs<ExtArgs> = {}>(args?: Subset<T, Content$exhibitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Content model
   */ 
  interface ContentFieldRefs {
    readonly id: FieldRef<"Content", 'String'>
    readonly uri: FieldRef<"Content", 'String'>
    readonly name: FieldRef<"Content", 'String'>
    readonly description: FieldRef<"Content", 'String'>
    readonly thumbnailUri: FieldRef<"Content", 'String'>
    readonly mimetype: FieldRef<"Content", 'String'>
    readonly bytes: FieldRef<"Content", 'String'>
    readonly createdAt: FieldRef<"Content", 'DateTime'>
    readonly userId: FieldRef<"Content", 'String'>
    readonly organizationId: FieldRef<"Content", 'String'>
    readonly styleId: FieldRef<"Content", 'String'>
    readonly directoryId: FieldRef<"Content", 'String'>
    readonly hostedFileId: FieldRef<"Content", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Content findUnique
   */
  export type ContentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content findUniqueOrThrow
   */
  export type ContentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content findFirst
   */
  export type ContentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contents.
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Content findFirstOrThrow
   */
  export type ContentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Content to fetch.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contents.
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contents.
     */
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Content findMany
   */
  export type ContentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter, which Contents to fetch.
     */
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     */
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contents.
     */
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     */
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Content create
   */
  export type ContentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * The data needed to create a Content.
     */
    data: XOR<ContentCreateInput, ContentUncheckedCreateInput>
  }

  /**
   * Content createMany
   */
  export type ContentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contents.
     */
    data: ContentCreateManyInput | ContentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Content update
   */
  export type ContentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * The data needed to update a Content.
     */
    data: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
    /**
     * Choose, which Content to update.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content updateMany
   */
  export type ContentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contents.
     */
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyInput>
    /**
     * Filter which Contents to update
     */
    where?: ContentWhereInput
  }

  /**
   * Content upsert
   */
  export type ContentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * The filter to search for the Content to update in case it exists.
     */
    where: ContentWhereUniqueInput
    /**
     * In case the Content found by the `where` argument doesn't exist, create a new Content with this data.
     */
    create: XOR<ContentCreateInput, ContentUncheckedCreateInput>
    /**
     * In case the Content was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
  }

  /**
   * Content delete
   */
  export type ContentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    /**
     * Filter which Content to delete.
     */
    where: ContentWhereUniqueInput
  }

  /**
   * Content deleteMany
   */
  export type ContentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contents to delete
     */
    where?: ContentWhereInput
  }

  /**
   * Content.hostedFile
   */
  export type Content$hostedFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    where?: HostedFileWhereInput
  }

  /**
   * Content.displayContentPairs
   */
  export type Content$displayContentPairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    where?: DisplayContentPairWhereInput
    orderBy?: DisplayContentPairOrderByWithRelationInput | DisplayContentPairOrderByWithRelationInput[]
    cursor?: DisplayContentPairWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisplayContentPairScalarFieldEnum | DisplayContentPairScalarFieldEnum[]
  }

  /**
   * Content.playlistItems
   */
  export type Content$playlistItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    where?: PlaylistItemWhereInput
    orderBy?: PlaylistItemOrderByWithRelationInput | PlaylistItemOrderByWithRelationInput[]
    cursor?: PlaylistItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistItemScalarFieldEnum | PlaylistItemScalarFieldEnum[]
  }

  /**
   * Content.style
   */
  export type Content$styleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    where?: StyleWhereInput
  }

  /**
   * Content.exhibits
   */
  export type Content$exhibitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    where?: ExhibitWhereInput
    orderBy?: ExhibitOrderByWithRelationInput | ExhibitOrderByWithRelationInput[]
    cursor?: ExhibitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExhibitScalarFieldEnum | ExhibitScalarFieldEnum[]
  }

  /**
   * Content without action
   */
  export type ContentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
  }


  /**
   * Model Display
   */

  export type AggregateDisplay = {
    _count: DisplayCountAggregateOutputType | null
    _avg: DisplayAvgAggregateOutputType | null
    _sum: DisplaySumAggregateOutputType | null
    _min: DisplayMinAggregateOutputType | null
    _max: DisplayMaxAggregateOutputType | null
  }

  export type DisplayAvgAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type DisplaySumAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type DisplayMinAggregateOutputType = {
    id: string | null
    name: string | null
    organizationId: string | null
    createdAt: Date | null
    styleId: string | null
    deviceType: $Enums.DeviceType | null
    currentDisplayContentPairId: string | null
    lastSeenAt: Date | null
    width: number | null
    height: number | null
  }

  export type DisplayMaxAggregateOutputType = {
    id: string | null
    name: string | null
    organizationId: string | null
    createdAt: Date | null
    styleId: string | null
    deviceType: $Enums.DeviceType | null
    currentDisplayContentPairId: string | null
    lastSeenAt: Date | null
    width: number | null
    height: number | null
  }

  export type DisplayCountAggregateOutputType = {
    id: number
    name: number
    organizationId: number
    createdAt: number
    styleId: number
    settings: number
    deviceType: number
    currentDisplayContentPairId: number
    lastSeenAt: number
    width: number
    height: number
    _all: number
  }


  export type DisplayAvgAggregateInputType = {
    width?: true
    height?: true
  }

  export type DisplaySumAggregateInputType = {
    width?: true
    height?: true
  }

  export type DisplayMinAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    createdAt?: true
    styleId?: true
    deviceType?: true
    currentDisplayContentPairId?: true
    lastSeenAt?: true
    width?: true
    height?: true
  }

  export type DisplayMaxAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    createdAt?: true
    styleId?: true
    deviceType?: true
    currentDisplayContentPairId?: true
    lastSeenAt?: true
    width?: true
    height?: true
  }

  export type DisplayCountAggregateInputType = {
    id?: true
    name?: true
    organizationId?: true
    createdAt?: true
    styleId?: true
    settings?: true
    deviceType?: true
    currentDisplayContentPairId?: true
    lastSeenAt?: true
    width?: true
    height?: true
    _all?: true
  }

  export type DisplayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Display to aggregate.
     */
    where?: DisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Displays to fetch.
     */
    orderBy?: DisplayOrderByWithRelationInput | DisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Displays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Displays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Displays
    **/
    _count?: true | DisplayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisplayAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisplaySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisplayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisplayMaxAggregateInputType
  }

  export type GetDisplayAggregateType<T extends DisplayAggregateArgs> = {
        [P in keyof T & keyof AggregateDisplay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisplay[P]>
      : GetScalarType<T[P], AggregateDisplay[P]>
  }




  export type DisplayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisplayWhereInput
    orderBy?: DisplayOrderByWithAggregationInput | DisplayOrderByWithAggregationInput[]
    by: DisplayScalarFieldEnum[] | DisplayScalarFieldEnum
    having?: DisplayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisplayCountAggregateInputType | true
    _avg?: DisplayAvgAggregateInputType
    _sum?: DisplaySumAggregateInputType
    _min?: DisplayMinAggregateInputType
    _max?: DisplayMaxAggregateInputType
  }

  export type DisplayGroupByOutputType = {
    id: string
    name: string
    organizationId: string
    createdAt: Date
    styleId: string | null
    settings: JsonValue
    deviceType: $Enums.DeviceType
    currentDisplayContentPairId: string | null
    lastSeenAt: Date
    width: number
    height: number
    _count: DisplayCountAggregateOutputType | null
    _avg: DisplayAvgAggregateOutputType | null
    _sum: DisplaySumAggregateOutputType | null
    _min: DisplayMinAggregateOutputType | null
    _max: DisplayMaxAggregateOutputType | null
  }

  type GetDisplayGroupByPayload<T extends DisplayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisplayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisplayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisplayGroupByOutputType[P]>
            : GetScalarType<T[P], DisplayGroupByOutputType[P]>
        }
      >
    >


  export type DisplaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    organizationId?: boolean
    createdAt?: boolean
    styleId?: boolean
    settings?: boolean
    deviceType?: boolean
    currentDisplayContentPairId?: boolean
    lastSeenAt?: boolean
    width?: boolean
    height?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    style?: boolean | Display$styleArgs<ExtArgs>
    displayContentPairs?: boolean | Display$displayContentPairsArgs<ExtArgs>
    currentDisplayContentPair?: boolean | Display$currentDisplayContentPairArgs<ExtArgs>
    playlists?: boolean | Display$playlistsArgs<ExtArgs>
    pairingCodes?: boolean | Display$pairingCodesArgs<ExtArgs>
    displayRenewal?: boolean | Display$displayRenewalArgs<ExtArgs>
    websocketConnectionToken?: boolean | Display$websocketConnectionTokenArgs<ExtArgs>
    _count?: boolean | DisplayCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["display"]>

  export type DisplaySelectScalar = {
    id?: boolean
    name?: boolean
    organizationId?: boolean
    createdAt?: boolean
    styleId?: boolean
    settings?: boolean
    deviceType?: boolean
    currentDisplayContentPairId?: boolean
    lastSeenAt?: boolean
    width?: boolean
    height?: boolean
  }


  export type DisplayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    style?: boolean | Display$styleArgs<ExtArgs>
    displayContentPairs?: boolean | Display$displayContentPairsArgs<ExtArgs>
    currentDisplayContentPair?: boolean | Display$currentDisplayContentPairArgs<ExtArgs>
    playlists?: boolean | Display$playlistsArgs<ExtArgs>
    pairingCodes?: boolean | Display$pairingCodesArgs<ExtArgs>
    displayRenewal?: boolean | Display$displayRenewalArgs<ExtArgs>
    websocketConnectionToken?: boolean | Display$websocketConnectionTokenArgs<ExtArgs>
    _count?: boolean | DisplayCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DisplayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Display"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      style: Prisma.$StylePayload<ExtArgs> | null
      displayContentPairs: Prisma.$DisplayContentPairPayload<ExtArgs>[]
      currentDisplayContentPair: Prisma.$DisplayContentPairPayload<ExtArgs> | null
      playlists: Prisma.$PlaylistPayload<ExtArgs>[]
      pairingCodes: Prisma.$PairingCodePayload<ExtArgs>[]
      displayRenewal: Prisma.$DisplayRenewalPayload<ExtArgs> | null
      websocketConnectionToken: Prisma.$WebsocketConnectionTokenPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      organizationId: string
      createdAt: Date
      styleId: string | null
      settings: Prisma.JsonValue
      deviceType: $Enums.DeviceType
      currentDisplayContentPairId: string | null
      lastSeenAt: Date
      width: number
      height: number
    }, ExtArgs["result"]["display"]>
    composites: {}
  }


  type DisplayGetPayload<S extends boolean | null | undefined | DisplayDefaultArgs> = $Result.GetResult<Prisma.$DisplayPayload, S>

  type DisplayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DisplayFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DisplayCountAggregateInputType | true
    }

  export interface DisplayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Display'], meta: { name: 'Display' } }
    /**
     * Find zero or one Display that matches the filter.
     * @param {DisplayFindUniqueArgs} args - Arguments to find a Display
     * @example
     * // Get one Display
     * const display = await prisma.display.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisplayFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayFindUniqueArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Display that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DisplayFindUniqueOrThrowArgs} args - Arguments to find a Display
     * @example
     * // Get one Display
     * const display = await prisma.display.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisplayFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Display that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayFindFirstArgs} args - Arguments to find a Display
     * @example
     * // Get one Display
     * const display = await prisma.display.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisplayFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayFindFirstArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Display that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayFindFirstOrThrowArgs} args - Arguments to find a Display
     * @example
     * // Get one Display
     * const display = await prisma.display.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisplayFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Displays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Displays
     * const displays = await prisma.display.findMany()
     * 
     * // Get first 10 Displays
     * const displays = await prisma.display.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const displayWithIdOnly = await prisma.display.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisplayFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Display.
     * @param {DisplayCreateArgs} args - Arguments to create a Display.
     * @example
     * // Create one Display
     * const Display = await prisma.display.create({
     *   data: {
     *     // ... data to create a Display
     *   }
     * })
     * 
    **/
    create<T extends DisplayCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayCreateArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Displays.
     *     @param {DisplayCreateManyArgs} args - Arguments to create many Displays.
     *     @example
     *     // Create many Displays
     *     const display = await prisma.display.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisplayCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Display.
     * @param {DisplayDeleteArgs} args - Arguments to delete one Display.
     * @example
     * // Delete one Display
     * const Display = await prisma.display.delete({
     *   where: {
     *     // ... filter to delete one Display
     *   }
     * })
     * 
    **/
    delete<T extends DisplayDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayDeleteArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Display.
     * @param {DisplayUpdateArgs} args - Arguments to update one Display.
     * @example
     * // Update one Display
     * const display = await prisma.display.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisplayUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayUpdateArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Displays.
     * @param {DisplayDeleteManyArgs} args - Arguments to filter Displays to delete.
     * @example
     * // Delete a few Displays
     * const { count } = await prisma.display.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisplayDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Displays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Displays
     * const display = await prisma.display.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisplayUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Display.
     * @param {DisplayUpsertArgs} args - Arguments to update or create a Display.
     * @example
     * // Update or create a Display
     * const display = await prisma.display.upsert({
     *   create: {
     *     // ... data to create a Display
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Display we want to update
     *   }
     * })
    **/
    upsert<T extends DisplayUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayUpsertArgs<ExtArgs>>
    ): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Displays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayCountArgs} args - Arguments to filter Displays to count.
     * @example
     * // Count the number of Displays
     * const count = await prisma.display.count({
     *   where: {
     *     // ... the filter for the Displays we want to count
     *   }
     * })
    **/
    count<T extends DisplayCountArgs>(
      args?: Subset<T, DisplayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisplayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Display.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisplayAggregateArgs>(args: Subset<T, DisplayAggregateArgs>): Prisma.PrismaPromise<GetDisplayAggregateType<T>>

    /**
     * Group by Display.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisplayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisplayGroupByArgs['orderBy'] }
        : { orderBy?: DisplayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisplayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisplayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Display model
   */
  readonly fields: DisplayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Display.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisplayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    style<T extends Display$styleArgs<ExtArgs> = {}>(args?: Subset<T, Display$styleArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    displayContentPairs<T extends Display$displayContentPairsArgs<ExtArgs> = {}>(args?: Subset<T, Display$displayContentPairsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findMany'> | Null>;

    currentDisplayContentPair<T extends Display$currentDisplayContentPairArgs<ExtArgs> = {}>(args?: Subset<T, Display$currentDisplayContentPairArgs<ExtArgs>>): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    playlists<T extends Display$playlistsArgs<ExtArgs> = {}>(args?: Subset<T, Display$playlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findMany'> | Null>;

    pairingCodes<T extends Display$pairingCodesArgs<ExtArgs> = {}>(args?: Subset<T, Display$pairingCodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'findMany'> | Null>;

    displayRenewal<T extends Display$displayRenewalArgs<ExtArgs> = {}>(args?: Subset<T, Display$displayRenewalArgs<ExtArgs>>): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    websocketConnectionToken<T extends Display$websocketConnectionTokenArgs<ExtArgs> = {}>(args?: Subset<T, Display$websocketConnectionTokenArgs<ExtArgs>>): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Display model
   */ 
  interface DisplayFieldRefs {
    readonly id: FieldRef<"Display", 'String'>
    readonly name: FieldRef<"Display", 'String'>
    readonly organizationId: FieldRef<"Display", 'String'>
    readonly createdAt: FieldRef<"Display", 'DateTime'>
    readonly styleId: FieldRef<"Display", 'String'>
    readonly settings: FieldRef<"Display", 'Json'>
    readonly deviceType: FieldRef<"Display", 'DeviceType'>
    readonly currentDisplayContentPairId: FieldRef<"Display", 'String'>
    readonly lastSeenAt: FieldRef<"Display", 'DateTime'>
    readonly width: FieldRef<"Display", 'Int'>
    readonly height: FieldRef<"Display", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Display findUnique
   */
  export type DisplayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * Filter, which Display to fetch.
     */
    where: DisplayWhereUniqueInput
  }

  /**
   * Display findUniqueOrThrow
   */
  export type DisplayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * Filter, which Display to fetch.
     */
    where: DisplayWhereUniqueInput
  }

  /**
   * Display findFirst
   */
  export type DisplayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * Filter, which Display to fetch.
     */
    where?: DisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Displays to fetch.
     */
    orderBy?: DisplayOrderByWithRelationInput | DisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Displays.
     */
    cursor?: DisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Displays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Displays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Displays.
     */
    distinct?: DisplayScalarFieldEnum | DisplayScalarFieldEnum[]
  }

  /**
   * Display findFirstOrThrow
   */
  export type DisplayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * Filter, which Display to fetch.
     */
    where?: DisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Displays to fetch.
     */
    orderBy?: DisplayOrderByWithRelationInput | DisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Displays.
     */
    cursor?: DisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Displays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Displays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Displays.
     */
    distinct?: DisplayScalarFieldEnum | DisplayScalarFieldEnum[]
  }

  /**
   * Display findMany
   */
  export type DisplayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * Filter, which Displays to fetch.
     */
    where?: DisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Displays to fetch.
     */
    orderBy?: DisplayOrderByWithRelationInput | DisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Displays.
     */
    cursor?: DisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Displays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Displays.
     */
    skip?: number
    distinct?: DisplayScalarFieldEnum | DisplayScalarFieldEnum[]
  }

  /**
   * Display create
   */
  export type DisplayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * The data needed to create a Display.
     */
    data: XOR<DisplayCreateInput, DisplayUncheckedCreateInput>
  }

  /**
   * Display createMany
   */
  export type DisplayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Displays.
     */
    data: DisplayCreateManyInput | DisplayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Display update
   */
  export type DisplayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * The data needed to update a Display.
     */
    data: XOR<DisplayUpdateInput, DisplayUncheckedUpdateInput>
    /**
     * Choose, which Display to update.
     */
    where: DisplayWhereUniqueInput
  }

  /**
   * Display updateMany
   */
  export type DisplayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Displays.
     */
    data: XOR<DisplayUpdateManyMutationInput, DisplayUncheckedUpdateManyInput>
    /**
     * Filter which Displays to update
     */
    where?: DisplayWhereInput
  }

  /**
   * Display upsert
   */
  export type DisplayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * The filter to search for the Display to update in case it exists.
     */
    where: DisplayWhereUniqueInput
    /**
     * In case the Display found by the `where` argument doesn't exist, create a new Display with this data.
     */
    create: XOR<DisplayCreateInput, DisplayUncheckedCreateInput>
    /**
     * In case the Display was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisplayUpdateInput, DisplayUncheckedUpdateInput>
  }

  /**
   * Display delete
   */
  export type DisplayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    /**
     * Filter which Display to delete.
     */
    where: DisplayWhereUniqueInput
  }

  /**
   * Display deleteMany
   */
  export type DisplayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Displays to delete
     */
    where?: DisplayWhereInput
  }

  /**
   * Display.style
   */
  export type Display$styleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    where?: StyleWhereInput
  }

  /**
   * Display.displayContentPairs
   */
  export type Display$displayContentPairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    where?: DisplayContentPairWhereInput
    orderBy?: DisplayContentPairOrderByWithRelationInput | DisplayContentPairOrderByWithRelationInput[]
    cursor?: DisplayContentPairWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisplayContentPairScalarFieldEnum | DisplayContentPairScalarFieldEnum[]
  }

  /**
   * Display.currentDisplayContentPair
   */
  export type Display$currentDisplayContentPairArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    where?: DisplayContentPairWhereInput
  }

  /**
   * Display.playlists
   */
  export type Display$playlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    cursor?: PlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * Display.pairingCodes
   */
  export type Display$pairingCodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    where?: PairingCodeWhereInput
    orderBy?: PairingCodeOrderByWithRelationInput | PairingCodeOrderByWithRelationInput[]
    cursor?: PairingCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PairingCodeScalarFieldEnum | PairingCodeScalarFieldEnum[]
  }

  /**
   * Display.displayRenewal
   */
  export type Display$displayRenewalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    where?: DisplayRenewalWhereInput
  }

  /**
   * Display.websocketConnectionToken
   */
  export type Display$websocketConnectionTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    where?: WebsocketConnectionTokenWhereInput
  }

  /**
   * Display without action
   */
  export type DisplayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
  }


  /**
   * Model PairingCode
   */

  export type AggregatePairingCode = {
    _count: PairingCodeCountAggregateOutputType | null
    _min: PairingCodeMinAggregateOutputType | null
    _max: PairingCodeMaxAggregateOutputType | null
  }

  export type PairingCodeMinAggregateOutputType = {
    code: string | null
    secret: string | null
    createdAt: Date | null
    claimedAt: Date | null
    deviceType: $Enums.DeviceType | null
    displayId: string | null
  }

  export type PairingCodeMaxAggregateOutputType = {
    code: string | null
    secret: string | null
    createdAt: Date | null
    claimedAt: Date | null
    deviceType: $Enums.DeviceType | null
    displayId: string | null
  }

  export type PairingCodeCountAggregateOutputType = {
    code: number
    secret: number
    createdAt: number
    claimedAt: number
    deviceType: number
    displayId: number
    _all: number
  }


  export type PairingCodeMinAggregateInputType = {
    code?: true
    secret?: true
    createdAt?: true
    claimedAt?: true
    deviceType?: true
    displayId?: true
  }

  export type PairingCodeMaxAggregateInputType = {
    code?: true
    secret?: true
    createdAt?: true
    claimedAt?: true
    deviceType?: true
    displayId?: true
  }

  export type PairingCodeCountAggregateInputType = {
    code?: true
    secret?: true
    createdAt?: true
    claimedAt?: true
    deviceType?: true
    displayId?: true
    _all?: true
  }

  export type PairingCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PairingCode to aggregate.
     */
    where?: PairingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PairingCodes to fetch.
     */
    orderBy?: PairingCodeOrderByWithRelationInput | PairingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PairingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PairingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PairingCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PairingCodes
    **/
    _count?: true | PairingCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PairingCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PairingCodeMaxAggregateInputType
  }

  export type GetPairingCodeAggregateType<T extends PairingCodeAggregateArgs> = {
        [P in keyof T & keyof AggregatePairingCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePairingCode[P]>
      : GetScalarType<T[P], AggregatePairingCode[P]>
  }




  export type PairingCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PairingCodeWhereInput
    orderBy?: PairingCodeOrderByWithAggregationInput | PairingCodeOrderByWithAggregationInput[]
    by: PairingCodeScalarFieldEnum[] | PairingCodeScalarFieldEnum
    having?: PairingCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PairingCodeCountAggregateInputType | true
    _min?: PairingCodeMinAggregateInputType
    _max?: PairingCodeMaxAggregateInputType
  }

  export type PairingCodeGroupByOutputType = {
    code: string
    secret: string
    createdAt: Date
    claimedAt: Date | null
    deviceType: $Enums.DeviceType
    displayId: string | null
    _count: PairingCodeCountAggregateOutputType | null
    _min: PairingCodeMinAggregateOutputType | null
    _max: PairingCodeMaxAggregateOutputType | null
  }

  type GetPairingCodeGroupByPayload<T extends PairingCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PairingCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PairingCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PairingCodeGroupByOutputType[P]>
            : GetScalarType<T[P], PairingCodeGroupByOutputType[P]>
        }
      >
    >


  export type PairingCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    code?: boolean
    secret?: boolean
    createdAt?: boolean
    claimedAt?: boolean
    deviceType?: boolean
    displayId?: boolean
    display?: boolean | PairingCode$displayArgs<ExtArgs>
  }, ExtArgs["result"]["pairingCode"]>

  export type PairingCodeSelectScalar = {
    code?: boolean
    secret?: boolean
    createdAt?: boolean
    claimedAt?: boolean
    deviceType?: boolean
    displayId?: boolean
  }


  export type PairingCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    display?: boolean | PairingCode$displayArgs<ExtArgs>
  }


  export type $PairingCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PairingCode"
    objects: {
      display: Prisma.$DisplayPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      code: string
      secret: string
      createdAt: Date
      claimedAt: Date | null
      deviceType: $Enums.DeviceType
      displayId: string | null
    }, ExtArgs["result"]["pairingCode"]>
    composites: {}
  }


  type PairingCodeGetPayload<S extends boolean | null | undefined | PairingCodeDefaultArgs> = $Result.GetResult<Prisma.$PairingCodePayload, S>

  type PairingCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PairingCodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PairingCodeCountAggregateInputType | true
    }

  export interface PairingCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PairingCode'], meta: { name: 'PairingCode' } }
    /**
     * Find zero or one PairingCode that matches the filter.
     * @param {PairingCodeFindUniqueArgs} args - Arguments to find a PairingCode
     * @example
     * // Get one PairingCode
     * const pairingCode = await prisma.pairingCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PairingCodeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PairingCodeFindUniqueArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PairingCode that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PairingCodeFindUniqueOrThrowArgs} args - Arguments to find a PairingCode
     * @example
     * // Get one PairingCode
     * const pairingCode = await prisma.pairingCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PairingCodeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PairingCodeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PairingCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PairingCodeFindFirstArgs} args - Arguments to find a PairingCode
     * @example
     * // Get one PairingCode
     * const pairingCode = await prisma.pairingCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PairingCodeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PairingCodeFindFirstArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PairingCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PairingCodeFindFirstOrThrowArgs} args - Arguments to find a PairingCode
     * @example
     * // Get one PairingCode
     * const pairingCode = await prisma.pairingCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PairingCodeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PairingCodeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PairingCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PairingCodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PairingCodes
     * const pairingCodes = await prisma.pairingCode.findMany()
     * 
     * // Get first 10 PairingCodes
     * const pairingCodes = await prisma.pairingCode.findMany({ take: 10 })
     * 
     * // Only select the `code`
     * const pairingCodeWithCodeOnly = await prisma.pairingCode.findMany({ select: { code: true } })
     * 
    **/
    findMany<T extends PairingCodeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PairingCodeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PairingCode.
     * @param {PairingCodeCreateArgs} args - Arguments to create a PairingCode.
     * @example
     * // Create one PairingCode
     * const PairingCode = await prisma.pairingCode.create({
     *   data: {
     *     // ... data to create a PairingCode
     *   }
     * })
     * 
    **/
    create<T extends PairingCodeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PairingCodeCreateArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PairingCodes.
     *     @param {PairingCodeCreateManyArgs} args - Arguments to create many PairingCodes.
     *     @example
     *     // Create many PairingCodes
     *     const pairingCode = await prisma.pairingCode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PairingCodeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PairingCodeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PairingCode.
     * @param {PairingCodeDeleteArgs} args - Arguments to delete one PairingCode.
     * @example
     * // Delete one PairingCode
     * const PairingCode = await prisma.pairingCode.delete({
     *   where: {
     *     // ... filter to delete one PairingCode
     *   }
     * })
     * 
    **/
    delete<T extends PairingCodeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PairingCodeDeleteArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PairingCode.
     * @param {PairingCodeUpdateArgs} args - Arguments to update one PairingCode.
     * @example
     * // Update one PairingCode
     * const pairingCode = await prisma.pairingCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PairingCodeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PairingCodeUpdateArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PairingCodes.
     * @param {PairingCodeDeleteManyArgs} args - Arguments to filter PairingCodes to delete.
     * @example
     * // Delete a few PairingCodes
     * const { count } = await prisma.pairingCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PairingCodeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PairingCodeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PairingCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PairingCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PairingCodes
     * const pairingCode = await prisma.pairingCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PairingCodeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PairingCodeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PairingCode.
     * @param {PairingCodeUpsertArgs} args - Arguments to update or create a PairingCode.
     * @example
     * // Update or create a PairingCode
     * const pairingCode = await prisma.pairingCode.upsert({
     *   create: {
     *     // ... data to create a PairingCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PairingCode we want to update
     *   }
     * })
    **/
    upsert<T extends PairingCodeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PairingCodeUpsertArgs<ExtArgs>>
    ): Prisma__PairingCodeClient<$Result.GetResult<Prisma.$PairingCodePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PairingCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PairingCodeCountArgs} args - Arguments to filter PairingCodes to count.
     * @example
     * // Count the number of PairingCodes
     * const count = await prisma.pairingCode.count({
     *   where: {
     *     // ... the filter for the PairingCodes we want to count
     *   }
     * })
    **/
    count<T extends PairingCodeCountArgs>(
      args?: Subset<T, PairingCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PairingCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PairingCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PairingCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PairingCodeAggregateArgs>(args: Subset<T, PairingCodeAggregateArgs>): Prisma.PrismaPromise<GetPairingCodeAggregateType<T>>

    /**
     * Group by PairingCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PairingCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PairingCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PairingCodeGroupByArgs['orderBy'] }
        : { orderBy?: PairingCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PairingCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPairingCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PairingCode model
   */
  readonly fields: PairingCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PairingCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PairingCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    display<T extends PairingCode$displayArgs<ExtArgs> = {}>(args?: Subset<T, PairingCode$displayArgs<ExtArgs>>): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PairingCode model
   */ 
  interface PairingCodeFieldRefs {
    readonly code: FieldRef<"PairingCode", 'String'>
    readonly secret: FieldRef<"PairingCode", 'String'>
    readonly createdAt: FieldRef<"PairingCode", 'DateTime'>
    readonly claimedAt: FieldRef<"PairingCode", 'DateTime'>
    readonly deviceType: FieldRef<"PairingCode", 'DeviceType'>
    readonly displayId: FieldRef<"PairingCode", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PairingCode findUnique
   */
  export type PairingCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * Filter, which PairingCode to fetch.
     */
    where: PairingCodeWhereUniqueInput
  }

  /**
   * PairingCode findUniqueOrThrow
   */
  export type PairingCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * Filter, which PairingCode to fetch.
     */
    where: PairingCodeWhereUniqueInput
  }

  /**
   * PairingCode findFirst
   */
  export type PairingCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * Filter, which PairingCode to fetch.
     */
    where?: PairingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PairingCodes to fetch.
     */
    orderBy?: PairingCodeOrderByWithRelationInput | PairingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PairingCodes.
     */
    cursor?: PairingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PairingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PairingCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PairingCodes.
     */
    distinct?: PairingCodeScalarFieldEnum | PairingCodeScalarFieldEnum[]
  }

  /**
   * PairingCode findFirstOrThrow
   */
  export type PairingCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * Filter, which PairingCode to fetch.
     */
    where?: PairingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PairingCodes to fetch.
     */
    orderBy?: PairingCodeOrderByWithRelationInput | PairingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PairingCodes.
     */
    cursor?: PairingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PairingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PairingCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PairingCodes.
     */
    distinct?: PairingCodeScalarFieldEnum | PairingCodeScalarFieldEnum[]
  }

  /**
   * PairingCode findMany
   */
  export type PairingCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * Filter, which PairingCodes to fetch.
     */
    where?: PairingCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PairingCodes to fetch.
     */
    orderBy?: PairingCodeOrderByWithRelationInput | PairingCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PairingCodes.
     */
    cursor?: PairingCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PairingCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PairingCodes.
     */
    skip?: number
    distinct?: PairingCodeScalarFieldEnum | PairingCodeScalarFieldEnum[]
  }

  /**
   * PairingCode create
   */
  export type PairingCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a PairingCode.
     */
    data: XOR<PairingCodeCreateInput, PairingCodeUncheckedCreateInput>
  }

  /**
   * PairingCode createMany
   */
  export type PairingCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PairingCodes.
     */
    data: PairingCodeCreateManyInput | PairingCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PairingCode update
   */
  export type PairingCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a PairingCode.
     */
    data: XOR<PairingCodeUpdateInput, PairingCodeUncheckedUpdateInput>
    /**
     * Choose, which PairingCode to update.
     */
    where: PairingCodeWhereUniqueInput
  }

  /**
   * PairingCode updateMany
   */
  export type PairingCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PairingCodes.
     */
    data: XOR<PairingCodeUpdateManyMutationInput, PairingCodeUncheckedUpdateManyInput>
    /**
     * Filter which PairingCodes to update
     */
    where?: PairingCodeWhereInput
  }

  /**
   * PairingCode upsert
   */
  export type PairingCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the PairingCode to update in case it exists.
     */
    where: PairingCodeWhereUniqueInput
    /**
     * In case the PairingCode found by the `where` argument doesn't exist, create a new PairingCode with this data.
     */
    create: XOR<PairingCodeCreateInput, PairingCodeUncheckedCreateInput>
    /**
     * In case the PairingCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PairingCodeUpdateInput, PairingCodeUncheckedUpdateInput>
  }

  /**
   * PairingCode delete
   */
  export type PairingCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
    /**
     * Filter which PairingCode to delete.
     */
    where: PairingCodeWhereUniqueInput
  }

  /**
   * PairingCode deleteMany
   */
  export type PairingCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PairingCodes to delete
     */
    where?: PairingCodeWhereInput
  }

  /**
   * PairingCode.display
   */
  export type PairingCode$displayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    where?: DisplayWhereInput
  }

  /**
   * PairingCode without action
   */
  export type PairingCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PairingCode
     */
    select?: PairingCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PairingCodeInclude<ExtArgs> | null
  }


  /**
   * Model DisplayContentPair
   */

  export type AggregateDisplayContentPair = {
    _count: DisplayContentPairCountAggregateOutputType | null
    _min: DisplayContentPairMinAggregateOutputType | null
    _max: DisplayContentPairMaxAggregateOutputType | null
  }

  export type DisplayContentPairMinAggregateOutputType = {
    id: string | null
    displayId: string | null
    contentId: string | null
    collectionId: string | null
    styleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DisplayContentPairMaxAggregateOutputType = {
    id: string | null
    displayId: string | null
    contentId: string | null
    collectionId: string | null
    styleId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DisplayContentPairCountAggregateOutputType = {
    id: number
    displayId: number
    contentId: number
    collectionId: number
    styleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DisplayContentPairMinAggregateInputType = {
    id?: true
    displayId?: true
    contentId?: true
    collectionId?: true
    styleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DisplayContentPairMaxAggregateInputType = {
    id?: true
    displayId?: true
    contentId?: true
    collectionId?: true
    styleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DisplayContentPairCountAggregateInputType = {
    id?: true
    displayId?: true
    contentId?: true
    collectionId?: true
    styleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DisplayContentPairAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisplayContentPair to aggregate.
     */
    where?: DisplayContentPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayContentPairs to fetch.
     */
    orderBy?: DisplayContentPairOrderByWithRelationInput | DisplayContentPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisplayContentPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayContentPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayContentPairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DisplayContentPairs
    **/
    _count?: true | DisplayContentPairCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisplayContentPairMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisplayContentPairMaxAggregateInputType
  }

  export type GetDisplayContentPairAggregateType<T extends DisplayContentPairAggregateArgs> = {
        [P in keyof T & keyof AggregateDisplayContentPair]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisplayContentPair[P]>
      : GetScalarType<T[P], AggregateDisplayContentPair[P]>
  }




  export type DisplayContentPairGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisplayContentPairWhereInput
    orderBy?: DisplayContentPairOrderByWithAggregationInput | DisplayContentPairOrderByWithAggregationInput[]
    by: DisplayContentPairScalarFieldEnum[] | DisplayContentPairScalarFieldEnum
    having?: DisplayContentPairScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisplayContentPairCountAggregateInputType | true
    _min?: DisplayContentPairMinAggregateInputType
    _max?: DisplayContentPairMaxAggregateInputType
  }

  export type DisplayContentPairGroupByOutputType = {
    id: string
    displayId: string
    contentId: string
    collectionId: string | null
    styleId: string | null
    createdAt: Date
    updatedAt: Date
    _count: DisplayContentPairCountAggregateOutputType | null
    _min: DisplayContentPairMinAggregateOutputType | null
    _max: DisplayContentPairMaxAggregateOutputType | null
  }

  type GetDisplayContentPairGroupByPayload<T extends DisplayContentPairGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisplayContentPairGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisplayContentPairGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisplayContentPairGroupByOutputType[P]>
            : GetScalarType<T[P], DisplayContentPairGroupByOutputType[P]>
        }
      >
    >


  export type DisplayContentPairSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    displayId?: boolean
    contentId?: boolean
    collectionId?: boolean
    styleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    display?: boolean | DisplayDefaultArgs<ExtArgs>
    currentDisplay?: boolean | DisplayContentPair$currentDisplayArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
    style?: boolean | DisplayContentPair$styleArgs<ExtArgs>
    playlistItems?: boolean | DisplayContentPair$playlistItemsArgs<ExtArgs>
    _count?: boolean | DisplayContentPairCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["displayContentPair"]>

  export type DisplayContentPairSelectScalar = {
    id?: boolean
    displayId?: boolean
    contentId?: boolean
    collectionId?: boolean
    styleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type DisplayContentPairInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    display?: boolean | DisplayDefaultArgs<ExtArgs>
    currentDisplay?: boolean | DisplayContentPair$currentDisplayArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
    style?: boolean | DisplayContentPair$styleArgs<ExtArgs>
    playlistItems?: boolean | DisplayContentPair$playlistItemsArgs<ExtArgs>
    _count?: boolean | DisplayContentPairCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DisplayContentPairPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DisplayContentPair"
    objects: {
      display: Prisma.$DisplayPayload<ExtArgs>
      currentDisplay: Prisma.$DisplayPayload<ExtArgs> | null
      content: Prisma.$ContentPayload<ExtArgs>
      style: Prisma.$StylePayload<ExtArgs> | null
      playlistItems: Prisma.$PlaylistItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      displayId: string
      contentId: string
      collectionId: string | null
      styleId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["displayContentPair"]>
    composites: {}
  }


  type DisplayContentPairGetPayload<S extends boolean | null | undefined | DisplayContentPairDefaultArgs> = $Result.GetResult<Prisma.$DisplayContentPairPayload, S>

  type DisplayContentPairCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DisplayContentPairFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DisplayContentPairCountAggregateInputType | true
    }

  export interface DisplayContentPairDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DisplayContentPair'], meta: { name: 'DisplayContentPair' } }
    /**
     * Find zero or one DisplayContentPair that matches the filter.
     * @param {DisplayContentPairFindUniqueArgs} args - Arguments to find a DisplayContentPair
     * @example
     * // Get one DisplayContentPair
     * const displayContentPair = await prisma.displayContentPair.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisplayContentPairFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayContentPairFindUniqueArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DisplayContentPair that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DisplayContentPairFindUniqueOrThrowArgs} args - Arguments to find a DisplayContentPair
     * @example
     * // Get one DisplayContentPair
     * const displayContentPair = await prisma.displayContentPair.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisplayContentPairFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayContentPairFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DisplayContentPair that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayContentPairFindFirstArgs} args - Arguments to find a DisplayContentPair
     * @example
     * // Get one DisplayContentPair
     * const displayContentPair = await prisma.displayContentPair.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisplayContentPairFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayContentPairFindFirstArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DisplayContentPair that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayContentPairFindFirstOrThrowArgs} args - Arguments to find a DisplayContentPair
     * @example
     * // Get one DisplayContentPair
     * const displayContentPair = await prisma.displayContentPair.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisplayContentPairFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayContentPairFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DisplayContentPairs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayContentPairFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DisplayContentPairs
     * const displayContentPairs = await prisma.displayContentPair.findMany()
     * 
     * // Get first 10 DisplayContentPairs
     * const displayContentPairs = await prisma.displayContentPair.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const displayContentPairWithIdOnly = await prisma.displayContentPair.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisplayContentPairFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayContentPairFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DisplayContentPair.
     * @param {DisplayContentPairCreateArgs} args - Arguments to create a DisplayContentPair.
     * @example
     * // Create one DisplayContentPair
     * const DisplayContentPair = await prisma.displayContentPair.create({
     *   data: {
     *     // ... data to create a DisplayContentPair
     *   }
     * })
     * 
    **/
    create<T extends DisplayContentPairCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayContentPairCreateArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DisplayContentPairs.
     *     @param {DisplayContentPairCreateManyArgs} args - Arguments to create many DisplayContentPairs.
     *     @example
     *     // Create many DisplayContentPairs
     *     const displayContentPair = await prisma.displayContentPair.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisplayContentPairCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayContentPairCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DisplayContentPair.
     * @param {DisplayContentPairDeleteArgs} args - Arguments to delete one DisplayContentPair.
     * @example
     * // Delete one DisplayContentPair
     * const DisplayContentPair = await prisma.displayContentPair.delete({
     *   where: {
     *     // ... filter to delete one DisplayContentPair
     *   }
     * })
     * 
    **/
    delete<T extends DisplayContentPairDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayContentPairDeleteArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DisplayContentPair.
     * @param {DisplayContentPairUpdateArgs} args - Arguments to update one DisplayContentPair.
     * @example
     * // Update one DisplayContentPair
     * const displayContentPair = await prisma.displayContentPair.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisplayContentPairUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayContentPairUpdateArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DisplayContentPairs.
     * @param {DisplayContentPairDeleteManyArgs} args - Arguments to filter DisplayContentPairs to delete.
     * @example
     * // Delete a few DisplayContentPairs
     * const { count } = await prisma.displayContentPair.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisplayContentPairDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayContentPairDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DisplayContentPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayContentPairUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DisplayContentPairs
     * const displayContentPair = await prisma.displayContentPair.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisplayContentPairUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayContentPairUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DisplayContentPair.
     * @param {DisplayContentPairUpsertArgs} args - Arguments to update or create a DisplayContentPair.
     * @example
     * // Update or create a DisplayContentPair
     * const displayContentPair = await prisma.displayContentPair.upsert({
     *   create: {
     *     // ... data to create a DisplayContentPair
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DisplayContentPair we want to update
     *   }
     * })
    **/
    upsert<T extends DisplayContentPairUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayContentPairUpsertArgs<ExtArgs>>
    ): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DisplayContentPairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayContentPairCountArgs} args - Arguments to filter DisplayContentPairs to count.
     * @example
     * // Count the number of DisplayContentPairs
     * const count = await prisma.displayContentPair.count({
     *   where: {
     *     // ... the filter for the DisplayContentPairs we want to count
     *   }
     * })
    **/
    count<T extends DisplayContentPairCountArgs>(
      args?: Subset<T, DisplayContentPairCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisplayContentPairCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DisplayContentPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayContentPairAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisplayContentPairAggregateArgs>(args: Subset<T, DisplayContentPairAggregateArgs>): Prisma.PrismaPromise<GetDisplayContentPairAggregateType<T>>

    /**
     * Group by DisplayContentPair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayContentPairGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisplayContentPairGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisplayContentPairGroupByArgs['orderBy'] }
        : { orderBy?: DisplayContentPairGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisplayContentPairGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisplayContentPairGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DisplayContentPair model
   */
  readonly fields: DisplayContentPairFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DisplayContentPair.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisplayContentPairClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    display<T extends DisplayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisplayDefaultArgs<ExtArgs>>): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    currentDisplay<T extends DisplayContentPair$currentDisplayArgs<ExtArgs> = {}>(args?: Subset<T, DisplayContentPair$currentDisplayArgs<ExtArgs>>): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    content<T extends ContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentDefaultArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    style<T extends DisplayContentPair$styleArgs<ExtArgs> = {}>(args?: Subset<T, DisplayContentPair$styleArgs<ExtArgs>>): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    playlistItems<T extends DisplayContentPair$playlistItemsArgs<ExtArgs> = {}>(args?: Subset<T, DisplayContentPair$playlistItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DisplayContentPair model
   */ 
  interface DisplayContentPairFieldRefs {
    readonly id: FieldRef<"DisplayContentPair", 'String'>
    readonly displayId: FieldRef<"DisplayContentPair", 'String'>
    readonly contentId: FieldRef<"DisplayContentPair", 'String'>
    readonly collectionId: FieldRef<"DisplayContentPair", 'String'>
    readonly styleId: FieldRef<"DisplayContentPair", 'String'>
    readonly createdAt: FieldRef<"DisplayContentPair", 'DateTime'>
    readonly updatedAt: FieldRef<"DisplayContentPair", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DisplayContentPair findUnique
   */
  export type DisplayContentPairFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * Filter, which DisplayContentPair to fetch.
     */
    where: DisplayContentPairWhereUniqueInput
  }

  /**
   * DisplayContentPair findUniqueOrThrow
   */
  export type DisplayContentPairFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * Filter, which DisplayContentPair to fetch.
     */
    where: DisplayContentPairWhereUniqueInput
  }

  /**
   * DisplayContentPair findFirst
   */
  export type DisplayContentPairFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * Filter, which DisplayContentPair to fetch.
     */
    where?: DisplayContentPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayContentPairs to fetch.
     */
    orderBy?: DisplayContentPairOrderByWithRelationInput | DisplayContentPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisplayContentPairs.
     */
    cursor?: DisplayContentPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayContentPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayContentPairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisplayContentPairs.
     */
    distinct?: DisplayContentPairScalarFieldEnum | DisplayContentPairScalarFieldEnum[]
  }

  /**
   * DisplayContentPair findFirstOrThrow
   */
  export type DisplayContentPairFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * Filter, which DisplayContentPair to fetch.
     */
    where?: DisplayContentPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayContentPairs to fetch.
     */
    orderBy?: DisplayContentPairOrderByWithRelationInput | DisplayContentPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisplayContentPairs.
     */
    cursor?: DisplayContentPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayContentPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayContentPairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisplayContentPairs.
     */
    distinct?: DisplayContentPairScalarFieldEnum | DisplayContentPairScalarFieldEnum[]
  }

  /**
   * DisplayContentPair findMany
   */
  export type DisplayContentPairFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * Filter, which DisplayContentPairs to fetch.
     */
    where?: DisplayContentPairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayContentPairs to fetch.
     */
    orderBy?: DisplayContentPairOrderByWithRelationInput | DisplayContentPairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DisplayContentPairs.
     */
    cursor?: DisplayContentPairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayContentPairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayContentPairs.
     */
    skip?: number
    distinct?: DisplayContentPairScalarFieldEnum | DisplayContentPairScalarFieldEnum[]
  }

  /**
   * DisplayContentPair create
   */
  export type DisplayContentPairCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * The data needed to create a DisplayContentPair.
     */
    data: XOR<DisplayContentPairCreateInput, DisplayContentPairUncheckedCreateInput>
  }

  /**
   * DisplayContentPair createMany
   */
  export type DisplayContentPairCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DisplayContentPairs.
     */
    data: DisplayContentPairCreateManyInput | DisplayContentPairCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DisplayContentPair update
   */
  export type DisplayContentPairUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * The data needed to update a DisplayContentPair.
     */
    data: XOR<DisplayContentPairUpdateInput, DisplayContentPairUncheckedUpdateInput>
    /**
     * Choose, which DisplayContentPair to update.
     */
    where: DisplayContentPairWhereUniqueInput
  }

  /**
   * DisplayContentPair updateMany
   */
  export type DisplayContentPairUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DisplayContentPairs.
     */
    data: XOR<DisplayContentPairUpdateManyMutationInput, DisplayContentPairUncheckedUpdateManyInput>
    /**
     * Filter which DisplayContentPairs to update
     */
    where?: DisplayContentPairWhereInput
  }

  /**
   * DisplayContentPair upsert
   */
  export type DisplayContentPairUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * The filter to search for the DisplayContentPair to update in case it exists.
     */
    where: DisplayContentPairWhereUniqueInput
    /**
     * In case the DisplayContentPair found by the `where` argument doesn't exist, create a new DisplayContentPair with this data.
     */
    create: XOR<DisplayContentPairCreateInput, DisplayContentPairUncheckedCreateInput>
    /**
     * In case the DisplayContentPair was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisplayContentPairUpdateInput, DisplayContentPairUncheckedUpdateInput>
  }

  /**
   * DisplayContentPair delete
   */
  export type DisplayContentPairDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    /**
     * Filter which DisplayContentPair to delete.
     */
    where: DisplayContentPairWhereUniqueInput
  }

  /**
   * DisplayContentPair deleteMany
   */
  export type DisplayContentPairDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisplayContentPairs to delete
     */
    where?: DisplayContentPairWhereInput
  }

  /**
   * DisplayContentPair.currentDisplay
   */
  export type DisplayContentPair$currentDisplayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    where?: DisplayWhereInput
  }

  /**
   * DisplayContentPair.style
   */
  export type DisplayContentPair$styleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    where?: StyleWhereInput
  }

  /**
   * DisplayContentPair.playlistItems
   */
  export type DisplayContentPair$playlistItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    where?: PlaylistItemWhereInput
    orderBy?: PlaylistItemOrderByWithRelationInput | PlaylistItemOrderByWithRelationInput[]
    cursor?: PlaylistItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistItemScalarFieldEnum | PlaylistItemScalarFieldEnum[]
  }

  /**
   * DisplayContentPair without action
   */
  export type DisplayContentPairDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
  }


  /**
   * Model Style
   */

  export type AggregateStyle = {
    _count: StyleCountAggregateOutputType | null
    _avg: StyleAvgAggregateOutputType | null
    _sum: StyleSumAggregateOutputType | null
    _min: StyleMinAggregateOutputType | null
    _max: StyleMaxAggregateOutputType | null
  }

  export type StyleAvgAggregateOutputType = {
    size: number | null
    posX: number | null
    posY: number | null
    rotation: number | null
  }

  export type StyleSumAggregateOutputType = {
    size: number | null
    posX: number | null
    posY: number | null
    rotation: number | null
  }

  export type StyleMinAggregateOutputType = {
    id: string | null
    size: number | null
    posX: number | null
    posY: number | null
    rotation: number | null
  }

  export type StyleMaxAggregateOutputType = {
    id: string | null
    size: number | null
    posX: number | null
    posY: number | null
    rotation: number | null
  }

  export type StyleCountAggregateOutputType = {
    id: number
    size: number
    posX: number
    posY: number
    rotation: number
    css: number
    _all: number
  }


  export type StyleAvgAggregateInputType = {
    size?: true
    posX?: true
    posY?: true
    rotation?: true
  }

  export type StyleSumAggregateInputType = {
    size?: true
    posX?: true
    posY?: true
    rotation?: true
  }

  export type StyleMinAggregateInputType = {
    id?: true
    size?: true
    posX?: true
    posY?: true
    rotation?: true
  }

  export type StyleMaxAggregateInputType = {
    id?: true
    size?: true
    posX?: true
    posY?: true
    rotation?: true
  }

  export type StyleCountAggregateInputType = {
    id?: true
    size?: true
    posX?: true
    posY?: true
    rotation?: true
    css?: true
    _all?: true
  }

  export type StyleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Style to aggregate.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Styles
    **/
    _count?: true | StyleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StyleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StyleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StyleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StyleMaxAggregateInputType
  }

  export type GetStyleAggregateType<T extends StyleAggregateArgs> = {
        [P in keyof T & keyof AggregateStyle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStyle[P]>
      : GetScalarType<T[P], AggregateStyle[P]>
  }




  export type StyleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleWhereInput
    orderBy?: StyleOrderByWithAggregationInput | StyleOrderByWithAggregationInput[]
    by: StyleScalarFieldEnum[] | StyleScalarFieldEnum
    having?: StyleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StyleCountAggregateInputType | true
    _avg?: StyleAvgAggregateInputType
    _sum?: StyleSumAggregateInputType
    _min?: StyleMinAggregateInputType
    _max?: StyleMaxAggregateInputType
  }

  export type StyleGroupByOutputType = {
    id: string
    size: number
    posX: number
    posY: number
    rotation: number
    css: JsonValue
    _count: StyleCountAggregateOutputType | null
    _avg: StyleAvgAggregateOutputType | null
    _sum: StyleSumAggregateOutputType | null
    _min: StyleMinAggregateOutputType | null
    _max: StyleMaxAggregateOutputType | null
  }

  type GetStyleGroupByPayload<T extends StyleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StyleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StyleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StyleGroupByOutputType[P]>
            : GetScalarType<T[P], StyleGroupByOutputType[P]>
        }
      >
    >


  export type StyleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    size?: boolean
    posX?: boolean
    posY?: boolean
    rotation?: boolean
    css?: boolean
    content?: boolean | Style$contentArgs<ExtArgs>
    display?: boolean | Style$displayArgs<ExtArgs>
    displayContentPairs?: boolean | Style$displayContentPairsArgs<ExtArgs>
    _count?: boolean | StyleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["style"]>

  export type StyleSelectScalar = {
    id?: boolean
    size?: boolean
    posX?: boolean
    posY?: boolean
    rotation?: boolean
    css?: boolean
  }


  export type StyleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | Style$contentArgs<ExtArgs>
    display?: boolean | Style$displayArgs<ExtArgs>
    displayContentPairs?: boolean | Style$displayContentPairsArgs<ExtArgs>
    _count?: boolean | StyleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StylePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Style"
    objects: {
      content: Prisma.$ContentPayload<ExtArgs>[]
      display: Prisma.$DisplayPayload<ExtArgs> | null
      displayContentPairs: Prisma.$DisplayContentPairPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      size: number
      posX: number
      posY: number
      rotation: number
      css: Prisma.JsonValue
    }, ExtArgs["result"]["style"]>
    composites: {}
  }


  type StyleGetPayload<S extends boolean | null | undefined | StyleDefaultArgs> = $Result.GetResult<Prisma.$StylePayload, S>

  type StyleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StyleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StyleCountAggregateInputType | true
    }

  export interface StyleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Style'], meta: { name: 'Style' } }
    /**
     * Find zero or one Style that matches the filter.
     * @param {StyleFindUniqueArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StyleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StyleFindUniqueArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Style that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StyleFindUniqueOrThrowArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StyleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StyleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Style that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindFirstArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StyleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StyleFindFirstArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Style that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindFirstOrThrowArgs} args - Arguments to find a Style
     * @example
     * // Get one Style
     * const style = await prisma.style.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StyleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StyleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Styles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Styles
     * const styles = await prisma.style.findMany()
     * 
     * // Get first 10 Styles
     * const styles = await prisma.style.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const styleWithIdOnly = await prisma.style.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StyleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StyleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Style.
     * @param {StyleCreateArgs} args - Arguments to create a Style.
     * @example
     * // Create one Style
     * const Style = await prisma.style.create({
     *   data: {
     *     // ... data to create a Style
     *   }
     * })
     * 
    **/
    create<T extends StyleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StyleCreateArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Styles.
     *     @param {StyleCreateManyArgs} args - Arguments to create many Styles.
     *     @example
     *     // Create many Styles
     *     const style = await prisma.style.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StyleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StyleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Style.
     * @param {StyleDeleteArgs} args - Arguments to delete one Style.
     * @example
     * // Delete one Style
     * const Style = await prisma.style.delete({
     *   where: {
     *     // ... filter to delete one Style
     *   }
     * })
     * 
    **/
    delete<T extends StyleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StyleDeleteArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Style.
     * @param {StyleUpdateArgs} args - Arguments to update one Style.
     * @example
     * // Update one Style
     * const style = await prisma.style.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StyleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StyleUpdateArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Styles.
     * @param {StyleDeleteManyArgs} args - Arguments to filter Styles to delete.
     * @example
     * // Delete a few Styles
     * const { count } = await prisma.style.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StyleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StyleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Styles
     * const style = await prisma.style.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StyleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StyleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Style.
     * @param {StyleUpsertArgs} args - Arguments to update or create a Style.
     * @example
     * // Update or create a Style
     * const style = await prisma.style.upsert({
     *   create: {
     *     // ... data to create a Style
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Style we want to update
     *   }
     * })
    **/
    upsert<T extends StyleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StyleUpsertArgs<ExtArgs>>
    ): Prisma__StyleClient<$Result.GetResult<Prisma.$StylePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Styles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleCountArgs} args - Arguments to filter Styles to count.
     * @example
     * // Count the number of Styles
     * const count = await prisma.style.count({
     *   where: {
     *     // ... the filter for the Styles we want to count
     *   }
     * })
    **/
    count<T extends StyleCountArgs>(
      args?: Subset<T, StyleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StyleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Style.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StyleAggregateArgs>(args: Subset<T, StyleAggregateArgs>): Prisma.PrismaPromise<GetStyleAggregateType<T>>

    /**
     * Group by Style.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StyleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StyleGroupByArgs['orderBy'] }
        : { orderBy?: StyleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StyleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStyleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Style model
   */
  readonly fields: StyleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Style.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StyleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    content<T extends Style$contentArgs<ExtArgs> = {}>(args?: Subset<T, Style$contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findMany'> | Null>;

    display<T extends Style$displayArgs<ExtArgs> = {}>(args?: Subset<T, Style$displayArgs<ExtArgs>>): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    displayContentPairs<T extends Style$displayContentPairsArgs<ExtArgs> = {}>(args?: Subset<T, Style$displayContentPairsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Style model
   */ 
  interface StyleFieldRefs {
    readonly id: FieldRef<"Style", 'String'>
    readonly size: FieldRef<"Style", 'Float'>
    readonly posX: FieldRef<"Style", 'Float'>
    readonly posY: FieldRef<"Style", 'Float'>
    readonly rotation: FieldRef<"Style", 'Float'>
    readonly css: FieldRef<"Style", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Style findUnique
   */
  export type StyleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style findUniqueOrThrow
   */
  export type StyleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style findFirst
   */
  export type StyleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Styles.
     */
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style findFirstOrThrow
   */
  export type StyleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Style to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Styles.
     */
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style findMany
   */
  export type StyleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter, which Styles to fetch.
     */
    where?: StyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Styles to fetch.
     */
    orderBy?: StyleOrderByWithRelationInput | StyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Styles.
     */
    cursor?: StyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Styles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Styles.
     */
    skip?: number
    distinct?: StyleScalarFieldEnum | StyleScalarFieldEnum[]
  }

  /**
   * Style create
   */
  export type StyleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The data needed to create a Style.
     */
    data: XOR<StyleCreateInput, StyleUncheckedCreateInput>
  }

  /**
   * Style createMany
   */
  export type StyleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Styles.
     */
    data: StyleCreateManyInput | StyleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Style update
   */
  export type StyleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The data needed to update a Style.
     */
    data: XOR<StyleUpdateInput, StyleUncheckedUpdateInput>
    /**
     * Choose, which Style to update.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style updateMany
   */
  export type StyleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Styles.
     */
    data: XOR<StyleUpdateManyMutationInput, StyleUncheckedUpdateManyInput>
    /**
     * Filter which Styles to update
     */
    where?: StyleWhereInput
  }

  /**
   * Style upsert
   */
  export type StyleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * The filter to search for the Style to update in case it exists.
     */
    where: StyleWhereUniqueInput
    /**
     * In case the Style found by the `where` argument doesn't exist, create a new Style with this data.
     */
    create: XOR<StyleCreateInput, StyleUncheckedCreateInput>
    /**
     * In case the Style was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StyleUpdateInput, StyleUncheckedUpdateInput>
  }

  /**
   * Style delete
   */
  export type StyleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
    /**
     * Filter which Style to delete.
     */
    where: StyleWhereUniqueInput
  }

  /**
   * Style deleteMany
   */
  export type StyleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Styles to delete
     */
    where?: StyleWhereInput
  }

  /**
   * Style.content
   */
  export type Style$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    cursor?: ContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Style.display
   */
  export type Style$displayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    where?: DisplayWhereInput
  }

  /**
   * Style.displayContentPairs
   */
  export type Style$displayContentPairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayContentPair
     */
    select?: DisplayContentPairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayContentPairInclude<ExtArgs> | null
    where?: DisplayContentPairWhereInput
    orderBy?: DisplayContentPairOrderByWithRelationInput | DisplayContentPairOrderByWithRelationInput[]
    cursor?: DisplayContentPairWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisplayContentPairScalarFieldEnum | DisplayContentPairScalarFieldEnum[]
  }

  /**
   * Style without action
   */
  export type StyleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Style
     */
    select?: StyleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleInclude<ExtArgs> | null
  }


  /**
   * Model Playlist
   */

  export type AggregatePlaylist = {
    _count: PlaylistCountAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  export type PlaylistMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayId: string | null
  }

  export type PlaylistMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    displayId: string | null
  }

  export type PlaylistCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    createdAt: number
    updatedAt: number
    displayId: number
    _all: number
  }


  export type PlaylistMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    displayId?: true
  }

  export type PlaylistMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    displayId?: true
  }

  export type PlaylistCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    displayId?: true
    _all?: true
  }

  export type PlaylistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlist to aggregate.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Playlists
    **/
    _count?: true | PlaylistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistMaxAggregateInputType
  }

  export type GetPlaylistAggregateType<T extends PlaylistAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylist[P]>
      : GetScalarType<T[P], AggregatePlaylist[P]>
  }




  export type PlaylistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithAggregationInput | PlaylistOrderByWithAggregationInput[]
    by: PlaylistScalarFieldEnum[] | PlaylistScalarFieldEnum
    having?: PlaylistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistCountAggregateInputType | true
    _min?: PlaylistMinAggregateInputType
    _max?: PlaylistMaxAggregateInputType
  }

  export type PlaylistGroupByOutputType = {
    id: string
    name: string
    description: string | null
    userId: string
    createdAt: Date
    updatedAt: Date
    displayId: string | null
    _count: PlaylistCountAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  type GetPlaylistGroupByPayload<T extends PlaylistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlistItem?: boolean | Playlist$playlistItemArgs<ExtArgs>
    display?: boolean | Playlist$displayArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlist"]>

  export type PlaylistSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    displayId?: boolean
  }


  export type PlaylistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    playlistItem?: boolean | Playlist$playlistItemArgs<ExtArgs>
    display?: boolean | Playlist$displayArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlaylistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Playlist"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      playlistItem: Prisma.$PlaylistItemPayload<ExtArgs>[]
      display: Prisma.$DisplayPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      userId: string
      createdAt: Date
      updatedAt: Date
      displayId: string | null
    }, ExtArgs["result"]["playlist"]>
    composites: {}
  }


  type PlaylistGetPayload<S extends boolean | null | undefined | PlaylistDefaultArgs> = $Result.GetResult<Prisma.$PlaylistPayload, S>

  type PlaylistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlaylistFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlaylistCountAggregateInputType | true
    }

  export interface PlaylistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Playlist'], meta: { name: 'Playlist' } }
    /**
     * Find zero or one Playlist that matches the filter.
     * @param {PlaylistFindUniqueArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlaylistFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistFindUniqueArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Playlist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlaylistFindUniqueOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlaylistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Playlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlaylistFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindFirstArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Playlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlaylistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlists
     * const playlists = await prisma.playlist.findMany()
     * 
     * // Get first 10 Playlists
     * const playlists = await prisma.playlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistWithIdOnly = await prisma.playlist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlaylistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Playlist.
     * @param {PlaylistCreateArgs} args - Arguments to create a Playlist.
     * @example
     * // Create one Playlist
     * const Playlist = await prisma.playlist.create({
     *   data: {
     *     // ... data to create a Playlist
     *   }
     * })
     * 
    **/
    create<T extends PlaylistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistCreateArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Playlists.
     *     @param {PlaylistCreateManyArgs} args - Arguments to create many Playlists.
     *     @example
     *     // Create many Playlists
     *     const playlist = await prisma.playlist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlaylistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Playlist.
     * @param {PlaylistDeleteArgs} args - Arguments to delete one Playlist.
     * @example
     * // Delete one Playlist
     * const Playlist = await prisma.playlist.delete({
     *   where: {
     *     // ... filter to delete one Playlist
     *   }
     * })
     * 
    **/
    delete<T extends PlaylistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistDeleteArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Playlist.
     * @param {PlaylistUpdateArgs} args - Arguments to update one Playlist.
     * @example
     * // Update one Playlist
     * const playlist = await prisma.playlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlaylistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpdateArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Playlists.
     * @param {PlaylistDeleteManyArgs} args - Arguments to filter Playlists to delete.
     * @example
     * // Delete a few Playlists
     * const { count } = await prisma.playlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlaylistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlists
     * const playlist = await prisma.playlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlaylistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Playlist.
     * @param {PlaylistUpsertArgs} args - Arguments to update or create a Playlist.
     * @example
     * // Update or create a Playlist
     * const playlist = await prisma.playlist.upsert({
     *   create: {
     *     // ... data to create a Playlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlist we want to update
     *   }
     * })
    **/
    upsert<T extends PlaylistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpsertArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistCountArgs} args - Arguments to filter Playlists to count.
     * @example
     * // Count the number of Playlists
     * const count = await prisma.playlist.count({
     *   where: {
     *     // ... the filter for the Playlists we want to count
     *   }
     * })
    **/
    count<T extends PlaylistCountArgs>(
      args?: Subset<T, PlaylistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistAggregateArgs>(args: Subset<T, PlaylistAggregateArgs>): Prisma.PrismaPromise<GetPlaylistAggregateType<T>>

    /**
     * Group by Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Playlist model
   */
  readonly fields: PlaylistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Playlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaylistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    playlistItem<T extends Playlist$playlistItemArgs<ExtArgs> = {}>(args?: Subset<T, Playlist$playlistItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findMany'> | Null>;

    display<T extends Playlist$displayArgs<ExtArgs> = {}>(args?: Subset<T, Playlist$displayArgs<ExtArgs>>): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Playlist model
   */ 
  interface PlaylistFieldRefs {
    readonly id: FieldRef<"Playlist", 'String'>
    readonly name: FieldRef<"Playlist", 'String'>
    readonly description: FieldRef<"Playlist", 'String'>
    readonly userId: FieldRef<"Playlist", 'String'>
    readonly createdAt: FieldRef<"Playlist", 'DateTime'>
    readonly updatedAt: FieldRef<"Playlist", 'DateTime'>
    readonly displayId: FieldRef<"Playlist", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Playlist findUnique
   */
  export type PlaylistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist findUniqueOrThrow
   */
  export type PlaylistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist findFirst
   */
  export type PlaylistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * Playlist findFirstOrThrow
   */
  export type PlaylistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * Playlist findMany
   */
  export type PlaylistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlists to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }

  /**
   * Playlist create
   */
  export type PlaylistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to create a Playlist.
     */
    data: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
  }

  /**
   * Playlist createMany
   */
  export type PlaylistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Playlists.
     */
    data: PlaylistCreateManyInput | PlaylistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Playlist update
   */
  export type PlaylistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to update a Playlist.
     */
    data: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
    /**
     * Choose, which Playlist to update.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist updateMany
   */
  export type PlaylistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Playlists.
     */
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyInput>
    /**
     * Filter which Playlists to update
     */
    where?: PlaylistWhereInput
  }

  /**
   * Playlist upsert
   */
  export type PlaylistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The filter to search for the Playlist to update in case it exists.
     */
    where: PlaylistWhereUniqueInput
    /**
     * In case the Playlist found by the `where` argument doesn't exist, create a new Playlist with this data.
     */
    create: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
    /**
     * In case the Playlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
  }

  /**
   * Playlist delete
   */
  export type PlaylistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter which Playlist to delete.
     */
    where: PlaylistWhereUniqueInput
  }

  /**
   * Playlist deleteMany
   */
  export type PlaylistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlists to delete
     */
    where?: PlaylistWhereInput
  }

  /**
   * Playlist.playlistItem
   */
  export type Playlist$playlistItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    where?: PlaylistItemWhereInput
    orderBy?: PlaylistItemOrderByWithRelationInput | PlaylistItemOrderByWithRelationInput[]
    cursor?: PlaylistItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistItemScalarFieldEnum | PlaylistItemScalarFieldEnum[]
  }

  /**
   * Playlist.display
   */
  export type Playlist$displayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Display
     */
    select?: DisplaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayInclude<ExtArgs> | null
    where?: DisplayWhereInput
  }

  /**
   * Playlist without action
   */
  export type PlaylistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistInclude<ExtArgs> | null
  }


  /**
   * Model PlaylistItem
   */

  export type AggregatePlaylistItem = {
    _count: PlaylistItemCountAggregateOutputType | null
    _avg: PlaylistItemAvgAggregateOutputType | null
    _sum: PlaylistItemSumAggregateOutputType | null
    _min: PlaylistItemMinAggregateOutputType | null
    _max: PlaylistItemMaxAggregateOutputType | null
  }

  export type PlaylistItemAvgAggregateOutputType = {
    order: number | null
    duration: number | null
  }

  export type PlaylistItemSumAggregateOutputType = {
    order: number | null
    duration: number | null
  }

  export type PlaylistItemMinAggregateOutputType = {
    id: string | null
    playlistId: string | null
    contentId: string | null
    displayContentPairId: string | null
    order: number | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistItemMaxAggregateOutputType = {
    id: string | null
    playlistId: string | null
    contentId: string | null
    displayContentPairId: string | null
    order: number | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistItemCountAggregateOutputType = {
    id: number
    playlistId: number
    contentId: number
    displayContentPairId: number
    order: number
    duration: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlaylistItemAvgAggregateInputType = {
    order?: true
    duration?: true
  }

  export type PlaylistItemSumAggregateInputType = {
    order?: true
    duration?: true
  }

  export type PlaylistItemMinAggregateInputType = {
    id?: true
    playlistId?: true
    contentId?: true
    displayContentPairId?: true
    order?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistItemMaxAggregateInputType = {
    id?: true
    playlistId?: true
    contentId?: true
    displayContentPairId?: true
    order?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistItemCountAggregateInputType = {
    id?: true
    playlistId?: true
    contentId?: true
    displayContentPairId?: true
    order?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlaylistItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaylistItem to aggregate.
     */
    where?: PlaylistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistItems to fetch.
     */
    orderBy?: PlaylistItemOrderByWithRelationInput | PlaylistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlaylistItems
    **/
    _count?: true | PlaylistItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaylistItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaylistItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistItemMaxAggregateInputType
  }

  export type GetPlaylistItemAggregateType<T extends PlaylistItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylistItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylistItem[P]>
      : GetScalarType<T[P], AggregatePlaylistItem[P]>
  }




  export type PlaylistItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistItemWhereInput
    orderBy?: PlaylistItemOrderByWithAggregationInput | PlaylistItemOrderByWithAggregationInput[]
    by: PlaylistItemScalarFieldEnum[] | PlaylistItemScalarFieldEnum
    having?: PlaylistItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistItemCountAggregateInputType | true
    _avg?: PlaylistItemAvgAggregateInputType
    _sum?: PlaylistItemSumAggregateInputType
    _min?: PlaylistItemMinAggregateInputType
    _max?: PlaylistItemMaxAggregateInputType
  }

  export type PlaylistItemGroupByOutputType = {
    id: string
    playlistId: string
    contentId: string
    displayContentPairId: string
    order: number
    duration: number
    createdAt: Date
    updatedAt: Date
    _count: PlaylistItemCountAggregateOutputType | null
    _avg: PlaylistItemAvgAggregateOutputType | null
    _sum: PlaylistItemSumAggregateOutputType | null
    _min: PlaylistItemMinAggregateOutputType | null
    _max: PlaylistItemMaxAggregateOutputType | null
  }

  type GetPlaylistItemGroupByPayload<T extends PlaylistItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistItemGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistItemGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playlistId?: boolean
    contentId?: boolean
    displayContentPairId?: boolean
    order?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
    displayContentPair?: boolean | DisplayContentPairDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlistItem"]>

  export type PlaylistItemSelectScalar = {
    id?: boolean
    playlistId?: boolean
    contentId?: boolean
    displayContentPairId?: boolean
    order?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type PlaylistItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    content?: boolean | ContentDefaultArgs<ExtArgs>
    displayContentPair?: boolean | DisplayContentPairDefaultArgs<ExtArgs>
  }


  export type $PlaylistItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlaylistItem"
    objects: {
      playlist: Prisma.$PlaylistPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs>
      displayContentPair: Prisma.$DisplayContentPairPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      playlistId: string
      contentId: string
      displayContentPairId: string
      order: number
      duration: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["playlistItem"]>
    composites: {}
  }


  type PlaylistItemGetPayload<S extends boolean | null | undefined | PlaylistItemDefaultArgs> = $Result.GetResult<Prisma.$PlaylistItemPayload, S>

  type PlaylistItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlaylistItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlaylistItemCountAggregateInputType | true
    }

  export interface PlaylistItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlaylistItem'], meta: { name: 'PlaylistItem' } }
    /**
     * Find zero or one PlaylistItem that matches the filter.
     * @param {PlaylistItemFindUniqueArgs} args - Arguments to find a PlaylistItem
     * @example
     * // Get one PlaylistItem
     * const playlistItem = await prisma.playlistItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlaylistItemFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistItemFindUniqueArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PlaylistItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlaylistItemFindUniqueOrThrowArgs} args - Arguments to find a PlaylistItem
     * @example
     * // Get one PlaylistItem
     * const playlistItem = await prisma.playlistItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlaylistItemFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistItemFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PlaylistItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistItemFindFirstArgs} args - Arguments to find a PlaylistItem
     * @example
     * // Get one PlaylistItem
     * const playlistItem = await prisma.playlistItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlaylistItemFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistItemFindFirstArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PlaylistItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistItemFindFirstOrThrowArgs} args - Arguments to find a PlaylistItem
     * @example
     * // Get one PlaylistItem
     * const playlistItem = await prisma.playlistItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlaylistItemFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistItemFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PlaylistItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlaylistItems
     * const playlistItems = await prisma.playlistItem.findMany()
     * 
     * // Get first 10 PlaylistItems
     * const playlistItems = await prisma.playlistItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistItemWithIdOnly = await prisma.playlistItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlaylistItemFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistItemFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PlaylistItem.
     * @param {PlaylistItemCreateArgs} args - Arguments to create a PlaylistItem.
     * @example
     * // Create one PlaylistItem
     * const PlaylistItem = await prisma.playlistItem.create({
     *   data: {
     *     // ... data to create a PlaylistItem
     *   }
     * })
     * 
    **/
    create<T extends PlaylistItemCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistItemCreateArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PlaylistItems.
     *     @param {PlaylistItemCreateManyArgs} args - Arguments to create many PlaylistItems.
     *     @example
     *     // Create many PlaylistItems
     *     const playlistItem = await prisma.playlistItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlaylistItemCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistItemCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlaylistItem.
     * @param {PlaylistItemDeleteArgs} args - Arguments to delete one PlaylistItem.
     * @example
     * // Delete one PlaylistItem
     * const PlaylistItem = await prisma.playlistItem.delete({
     *   where: {
     *     // ... filter to delete one PlaylistItem
     *   }
     * })
     * 
    **/
    delete<T extends PlaylistItemDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistItemDeleteArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PlaylistItem.
     * @param {PlaylistItemUpdateArgs} args - Arguments to update one PlaylistItem.
     * @example
     * // Update one PlaylistItem
     * const playlistItem = await prisma.playlistItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlaylistItemUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistItemUpdateArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PlaylistItems.
     * @param {PlaylistItemDeleteManyArgs} args - Arguments to filter PlaylistItems to delete.
     * @example
     * // Delete a few PlaylistItems
     * const { count } = await prisma.playlistItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlaylistItemDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistItemDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlaylistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlaylistItems
     * const playlistItem = await prisma.playlistItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlaylistItemUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistItemUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlaylistItem.
     * @param {PlaylistItemUpsertArgs} args - Arguments to update or create a PlaylistItem.
     * @example
     * // Update or create a PlaylistItem
     * const playlistItem = await prisma.playlistItem.upsert({
     *   create: {
     *     // ... data to create a PlaylistItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlaylistItem we want to update
     *   }
     * })
    **/
    upsert<T extends PlaylistItemUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistItemUpsertArgs<ExtArgs>>
    ): Prisma__PlaylistItemClient<$Result.GetResult<Prisma.$PlaylistItemPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PlaylistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistItemCountArgs} args - Arguments to filter PlaylistItems to count.
     * @example
     * // Count the number of PlaylistItems
     * const count = await prisma.playlistItem.count({
     *   where: {
     *     // ... the filter for the PlaylistItems we want to count
     *   }
     * })
    **/
    count<T extends PlaylistItemCountArgs>(
      args?: Subset<T, PlaylistItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlaylistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistItemAggregateArgs>(args: Subset<T, PlaylistItemAggregateArgs>): Prisma.PrismaPromise<GetPlaylistItemAggregateType<T>>

    /**
     * Group by PlaylistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistItemGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlaylistItem model
   */
  readonly fields: PlaylistItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlaylistItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaylistItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    playlist<T extends PlaylistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaylistDefaultArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    content<T extends ContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContentDefaultArgs<ExtArgs>>): Prisma__ContentClient<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    displayContentPair<T extends DisplayContentPairDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisplayContentPairDefaultArgs<ExtArgs>>): Prisma__DisplayContentPairClient<$Result.GetResult<Prisma.$DisplayContentPairPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PlaylistItem model
   */ 
  interface PlaylistItemFieldRefs {
    readonly id: FieldRef<"PlaylistItem", 'String'>
    readonly playlistId: FieldRef<"PlaylistItem", 'String'>
    readonly contentId: FieldRef<"PlaylistItem", 'String'>
    readonly displayContentPairId: FieldRef<"PlaylistItem", 'String'>
    readonly order: FieldRef<"PlaylistItem", 'Int'>
    readonly duration: FieldRef<"PlaylistItem", 'Int'>
    readonly createdAt: FieldRef<"PlaylistItem", 'DateTime'>
    readonly updatedAt: FieldRef<"PlaylistItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlaylistItem findUnique
   */
  export type PlaylistItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistItem to fetch.
     */
    where: PlaylistItemWhereUniqueInput
  }

  /**
   * PlaylistItem findUniqueOrThrow
   */
  export type PlaylistItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistItem to fetch.
     */
    where: PlaylistItemWhereUniqueInput
  }

  /**
   * PlaylistItem findFirst
   */
  export type PlaylistItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistItem to fetch.
     */
    where?: PlaylistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistItems to fetch.
     */
    orderBy?: PlaylistItemOrderByWithRelationInput | PlaylistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaylistItems.
     */
    cursor?: PlaylistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaylistItems.
     */
    distinct?: PlaylistItemScalarFieldEnum | PlaylistItemScalarFieldEnum[]
  }

  /**
   * PlaylistItem findFirstOrThrow
   */
  export type PlaylistItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistItem to fetch.
     */
    where?: PlaylistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistItems to fetch.
     */
    orderBy?: PlaylistItemOrderByWithRelationInput | PlaylistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlaylistItems.
     */
    cursor?: PlaylistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlaylistItems.
     */
    distinct?: PlaylistItemScalarFieldEnum | PlaylistItemScalarFieldEnum[]
  }

  /**
   * PlaylistItem findMany
   */
  export type PlaylistItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * Filter, which PlaylistItems to fetch.
     */
    where?: PlaylistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlaylistItems to fetch.
     */
    orderBy?: PlaylistItemOrderByWithRelationInput | PlaylistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlaylistItems.
     */
    cursor?: PlaylistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlaylistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlaylistItems.
     */
    skip?: number
    distinct?: PlaylistItemScalarFieldEnum | PlaylistItemScalarFieldEnum[]
  }

  /**
   * PlaylistItem create
   */
  export type PlaylistItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PlaylistItem.
     */
    data: XOR<PlaylistItemCreateInput, PlaylistItemUncheckedCreateInput>
  }

  /**
   * PlaylistItem createMany
   */
  export type PlaylistItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlaylistItems.
     */
    data: PlaylistItemCreateManyInput | PlaylistItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlaylistItem update
   */
  export type PlaylistItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PlaylistItem.
     */
    data: XOR<PlaylistItemUpdateInput, PlaylistItemUncheckedUpdateInput>
    /**
     * Choose, which PlaylistItem to update.
     */
    where: PlaylistItemWhereUniqueInput
  }

  /**
   * PlaylistItem updateMany
   */
  export type PlaylistItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlaylistItems.
     */
    data: XOR<PlaylistItemUpdateManyMutationInput, PlaylistItemUncheckedUpdateManyInput>
    /**
     * Filter which PlaylistItems to update
     */
    where?: PlaylistItemWhereInput
  }

  /**
   * PlaylistItem upsert
   */
  export type PlaylistItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PlaylistItem to update in case it exists.
     */
    where: PlaylistItemWhereUniqueInput
    /**
     * In case the PlaylistItem found by the `where` argument doesn't exist, create a new PlaylistItem with this data.
     */
    create: XOR<PlaylistItemCreateInput, PlaylistItemUncheckedCreateInput>
    /**
     * In case the PlaylistItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistItemUpdateInput, PlaylistItemUncheckedUpdateInput>
  }

  /**
   * PlaylistItem delete
   */
  export type PlaylistItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
    /**
     * Filter which PlaylistItem to delete.
     */
    where: PlaylistItemWhereUniqueInput
  }

  /**
   * PlaylistItem deleteMany
   */
  export type PlaylistItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlaylistItems to delete
     */
    where?: PlaylistItemWhereInput
  }

  /**
   * PlaylistItem without action
   */
  export type PlaylistItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistItem
     */
    select?: PlaylistItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlaylistItemInclude<ExtArgs> | null
  }


  /**
   * Model HostedFile
   */

  export type AggregateHostedFile = {
    _count: HostedFileCountAggregateOutputType | null
    _min: HostedFileMinAggregateOutputType | null
    _max: HostedFileMaxAggregateOutputType | null
  }

  export type HostedFileMinAggregateOutputType = {
    id: string | null
    objectKey: string | null
    userId: string | null
    organizationId: string | null
    bucketName: string | null
    mimetype: string | null
    bytes: string | null
    region: string | null
    status: $Enums.HostedFileUploadStatus | null
    createdAt: Date | null
  }

  export type HostedFileMaxAggregateOutputType = {
    id: string | null
    objectKey: string | null
    userId: string | null
    organizationId: string | null
    bucketName: string | null
    mimetype: string | null
    bytes: string | null
    region: string | null
    status: $Enums.HostedFileUploadStatus | null
    createdAt: Date | null
  }

  export type HostedFileCountAggregateOutputType = {
    id: number
    objectKey: number
    userId: number
    organizationId: number
    bucketName: number
    mimetype: number
    bytes: number
    region: number
    status: number
    createdAt: number
    _all: number
  }


  export type HostedFileMinAggregateInputType = {
    id?: true
    objectKey?: true
    userId?: true
    organizationId?: true
    bucketName?: true
    mimetype?: true
    bytes?: true
    region?: true
    status?: true
    createdAt?: true
  }

  export type HostedFileMaxAggregateInputType = {
    id?: true
    objectKey?: true
    userId?: true
    organizationId?: true
    bucketName?: true
    mimetype?: true
    bytes?: true
    region?: true
    status?: true
    createdAt?: true
  }

  export type HostedFileCountAggregateInputType = {
    id?: true
    objectKey?: true
    userId?: true
    organizationId?: true
    bucketName?: true
    mimetype?: true
    bytes?: true
    region?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type HostedFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostedFile to aggregate.
     */
    where?: HostedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostedFiles to fetch.
     */
    orderBy?: HostedFileOrderByWithRelationInput | HostedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostedFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostedFiles
    **/
    _count?: true | HostedFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostedFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostedFileMaxAggregateInputType
  }

  export type GetHostedFileAggregateType<T extends HostedFileAggregateArgs> = {
        [P in keyof T & keyof AggregateHostedFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostedFile[P]>
      : GetScalarType<T[P], AggregateHostedFile[P]>
  }




  export type HostedFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostedFileWhereInput
    orderBy?: HostedFileOrderByWithAggregationInput | HostedFileOrderByWithAggregationInput[]
    by: HostedFileScalarFieldEnum[] | HostedFileScalarFieldEnum
    having?: HostedFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostedFileCountAggregateInputType | true
    _min?: HostedFileMinAggregateInputType
    _max?: HostedFileMaxAggregateInputType
  }

  export type HostedFileGroupByOutputType = {
    id: string
    objectKey: string
    userId: string
    organizationId: string
    bucketName: string
    mimetype: string
    bytes: string
    region: string
    status: $Enums.HostedFileUploadStatus
    createdAt: Date
    _count: HostedFileCountAggregateOutputType | null
    _min: HostedFileMinAggregateOutputType | null
    _max: HostedFileMaxAggregateOutputType | null
  }

  type GetHostedFileGroupByPayload<T extends HostedFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostedFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostedFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostedFileGroupByOutputType[P]>
            : GetScalarType<T[P], HostedFileGroupByOutputType[P]>
        }
      >
    >


  export type HostedFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objectKey?: boolean
    userId?: boolean
    organizationId?: boolean
    bucketName?: boolean
    mimetype?: boolean
    bytes?: boolean
    region?: boolean
    status?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | HostedFile$contentArgs<ExtArgs>
    _count?: boolean | HostedFileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hostedFile"]>

  export type HostedFileSelectScalar = {
    id?: boolean
    objectKey?: boolean
    userId?: boolean
    organizationId?: boolean
    bucketName?: boolean
    mimetype?: boolean
    bytes?: boolean
    region?: boolean
    status?: boolean
    createdAt?: boolean
  }


  export type HostedFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    content?: boolean | HostedFile$contentArgs<ExtArgs>
    _count?: boolean | HostedFileCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $HostedFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostedFile"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      content: Prisma.$ContentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      objectKey: string
      userId: string
      organizationId: string
      bucketName: string
      mimetype: string
      bytes: string
      region: string
      status: $Enums.HostedFileUploadStatus
      createdAt: Date
    }, ExtArgs["result"]["hostedFile"]>
    composites: {}
  }


  type HostedFileGetPayload<S extends boolean | null | undefined | HostedFileDefaultArgs> = $Result.GetResult<Prisma.$HostedFilePayload, S>

  type HostedFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HostedFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HostedFileCountAggregateInputType | true
    }

  export interface HostedFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostedFile'], meta: { name: 'HostedFile' } }
    /**
     * Find zero or one HostedFile that matches the filter.
     * @param {HostedFileFindUniqueArgs} args - Arguments to find a HostedFile
     * @example
     * // Get one HostedFile
     * const hostedFile = await prisma.hostedFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HostedFileFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HostedFileFindUniqueArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one HostedFile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HostedFileFindUniqueOrThrowArgs} args - Arguments to find a HostedFile
     * @example
     * // Get one HostedFile
     * const hostedFile = await prisma.hostedFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HostedFileFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HostedFileFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first HostedFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostedFileFindFirstArgs} args - Arguments to find a HostedFile
     * @example
     * // Get one HostedFile
     * const hostedFile = await prisma.hostedFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HostedFileFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HostedFileFindFirstArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first HostedFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostedFileFindFirstOrThrowArgs} args - Arguments to find a HostedFile
     * @example
     * // Get one HostedFile
     * const hostedFile = await prisma.hostedFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HostedFileFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HostedFileFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more HostedFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostedFileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostedFiles
     * const hostedFiles = await prisma.hostedFile.findMany()
     * 
     * // Get first 10 HostedFiles
     * const hostedFiles = await prisma.hostedFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostedFileWithIdOnly = await prisma.hostedFile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HostedFileFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HostedFileFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a HostedFile.
     * @param {HostedFileCreateArgs} args - Arguments to create a HostedFile.
     * @example
     * // Create one HostedFile
     * const HostedFile = await prisma.hostedFile.create({
     *   data: {
     *     // ... data to create a HostedFile
     *   }
     * })
     * 
    **/
    create<T extends HostedFileCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HostedFileCreateArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many HostedFiles.
     *     @param {HostedFileCreateManyArgs} args - Arguments to create many HostedFiles.
     *     @example
     *     // Create many HostedFiles
     *     const hostedFile = await prisma.hostedFile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HostedFileCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HostedFileCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HostedFile.
     * @param {HostedFileDeleteArgs} args - Arguments to delete one HostedFile.
     * @example
     * // Delete one HostedFile
     * const HostedFile = await prisma.hostedFile.delete({
     *   where: {
     *     // ... filter to delete one HostedFile
     *   }
     * })
     * 
    **/
    delete<T extends HostedFileDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HostedFileDeleteArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one HostedFile.
     * @param {HostedFileUpdateArgs} args - Arguments to update one HostedFile.
     * @example
     * // Update one HostedFile
     * const hostedFile = await prisma.hostedFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HostedFileUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HostedFileUpdateArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more HostedFiles.
     * @param {HostedFileDeleteManyArgs} args - Arguments to filter HostedFiles to delete.
     * @example
     * // Delete a few HostedFiles
     * const { count } = await prisma.hostedFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HostedFileDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HostedFileDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostedFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostedFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostedFiles
     * const hostedFile = await prisma.hostedFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HostedFileUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HostedFileUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HostedFile.
     * @param {HostedFileUpsertArgs} args - Arguments to update or create a HostedFile.
     * @example
     * // Update or create a HostedFile
     * const hostedFile = await prisma.hostedFile.upsert({
     *   create: {
     *     // ... data to create a HostedFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostedFile we want to update
     *   }
     * })
    **/
    upsert<T extends HostedFileUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HostedFileUpsertArgs<ExtArgs>>
    ): Prisma__HostedFileClient<$Result.GetResult<Prisma.$HostedFilePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of HostedFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostedFileCountArgs} args - Arguments to filter HostedFiles to count.
     * @example
     * // Count the number of HostedFiles
     * const count = await prisma.hostedFile.count({
     *   where: {
     *     // ... the filter for the HostedFiles we want to count
     *   }
     * })
    **/
    count<T extends HostedFileCountArgs>(
      args?: Subset<T, HostedFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostedFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostedFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostedFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostedFileAggregateArgs>(args: Subset<T, HostedFileAggregateArgs>): Prisma.PrismaPromise<GetHostedFileAggregateType<T>>

    /**
     * Group by HostedFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostedFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostedFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostedFileGroupByArgs['orderBy'] }
        : { orderBy?: HostedFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostedFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostedFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostedFile model
   */
  readonly fields: HostedFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostedFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostedFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    content<T extends HostedFile$contentArgs<ExtArgs> = {}>(args?: Subset<T, HostedFile$contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the HostedFile model
   */ 
  interface HostedFileFieldRefs {
    readonly id: FieldRef<"HostedFile", 'String'>
    readonly objectKey: FieldRef<"HostedFile", 'String'>
    readonly userId: FieldRef<"HostedFile", 'String'>
    readonly organizationId: FieldRef<"HostedFile", 'String'>
    readonly bucketName: FieldRef<"HostedFile", 'String'>
    readonly mimetype: FieldRef<"HostedFile", 'String'>
    readonly bytes: FieldRef<"HostedFile", 'String'>
    readonly region: FieldRef<"HostedFile", 'String'>
    readonly status: FieldRef<"HostedFile", 'HostedFileUploadStatus'>
    readonly createdAt: FieldRef<"HostedFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HostedFile findUnique
   */
  export type HostedFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * Filter, which HostedFile to fetch.
     */
    where: HostedFileWhereUniqueInput
  }

  /**
   * HostedFile findUniqueOrThrow
   */
  export type HostedFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * Filter, which HostedFile to fetch.
     */
    where: HostedFileWhereUniqueInput
  }

  /**
   * HostedFile findFirst
   */
  export type HostedFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * Filter, which HostedFile to fetch.
     */
    where?: HostedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostedFiles to fetch.
     */
    orderBy?: HostedFileOrderByWithRelationInput | HostedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostedFiles.
     */
    cursor?: HostedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostedFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostedFiles.
     */
    distinct?: HostedFileScalarFieldEnum | HostedFileScalarFieldEnum[]
  }

  /**
   * HostedFile findFirstOrThrow
   */
  export type HostedFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * Filter, which HostedFile to fetch.
     */
    where?: HostedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostedFiles to fetch.
     */
    orderBy?: HostedFileOrderByWithRelationInput | HostedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostedFiles.
     */
    cursor?: HostedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostedFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostedFiles.
     */
    distinct?: HostedFileScalarFieldEnum | HostedFileScalarFieldEnum[]
  }

  /**
   * HostedFile findMany
   */
  export type HostedFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * Filter, which HostedFiles to fetch.
     */
    where?: HostedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostedFiles to fetch.
     */
    orderBy?: HostedFileOrderByWithRelationInput | HostedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostedFiles.
     */
    cursor?: HostedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostedFiles.
     */
    skip?: number
    distinct?: HostedFileScalarFieldEnum | HostedFileScalarFieldEnum[]
  }

  /**
   * HostedFile create
   */
  export type HostedFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * The data needed to create a HostedFile.
     */
    data: XOR<HostedFileCreateInput, HostedFileUncheckedCreateInput>
  }

  /**
   * HostedFile createMany
   */
  export type HostedFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostedFiles.
     */
    data: HostedFileCreateManyInput | HostedFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostedFile update
   */
  export type HostedFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * The data needed to update a HostedFile.
     */
    data: XOR<HostedFileUpdateInput, HostedFileUncheckedUpdateInput>
    /**
     * Choose, which HostedFile to update.
     */
    where: HostedFileWhereUniqueInput
  }

  /**
   * HostedFile updateMany
   */
  export type HostedFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostedFiles.
     */
    data: XOR<HostedFileUpdateManyMutationInput, HostedFileUncheckedUpdateManyInput>
    /**
     * Filter which HostedFiles to update
     */
    where?: HostedFileWhereInput
  }

  /**
   * HostedFile upsert
   */
  export type HostedFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * The filter to search for the HostedFile to update in case it exists.
     */
    where: HostedFileWhereUniqueInput
    /**
     * In case the HostedFile found by the `where` argument doesn't exist, create a new HostedFile with this data.
     */
    create: XOR<HostedFileCreateInput, HostedFileUncheckedCreateInput>
    /**
     * In case the HostedFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostedFileUpdateInput, HostedFileUncheckedUpdateInput>
  }

  /**
   * HostedFile delete
   */
  export type HostedFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
    /**
     * Filter which HostedFile to delete.
     */
    where: HostedFileWhereUniqueInput
  }

  /**
   * HostedFile deleteMany
   */
  export type HostedFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostedFiles to delete
     */
    where?: HostedFileWhereInput
  }

  /**
   * HostedFile.content
   */
  export type HostedFile$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    cursor?: ContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * HostedFile without action
   */
  export type HostedFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostedFile
     */
    select?: HostedFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostedFileInclude<ExtArgs> | null
  }


  /**
   * Model Exhibit
   */

  export type AggregateExhibit = {
    _count: ExhibitCountAggregateOutputType | null
    _min: ExhibitMinAggregateOutputType | null
    _max: ExhibitMaxAggregateOutputType | null
  }

  export type ExhibitMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExhibitMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExhibitCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExhibitMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExhibitMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExhibitCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExhibitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exhibit to aggregate.
     */
    where?: ExhibitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibits to fetch.
     */
    orderBy?: ExhibitOrderByWithRelationInput | ExhibitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExhibitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exhibits
    **/
    _count?: true | ExhibitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExhibitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExhibitMaxAggregateInputType
  }

  export type GetExhibitAggregateType<T extends ExhibitAggregateArgs> = {
        [P in keyof T & keyof AggregateExhibit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExhibit[P]>
      : GetScalarType<T[P], AggregateExhibit[P]>
  }




  export type ExhibitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExhibitWhereInput
    orderBy?: ExhibitOrderByWithAggregationInput | ExhibitOrderByWithAggregationInput[]
    by: ExhibitScalarFieldEnum[] | ExhibitScalarFieldEnum
    having?: ExhibitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExhibitCountAggregateInputType | true
    _min?: ExhibitMinAggregateInputType
    _max?: ExhibitMaxAggregateInputType
  }

  export type ExhibitGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ExhibitCountAggregateOutputType | null
    _min: ExhibitMinAggregateOutputType | null
    _max: ExhibitMaxAggregateOutputType | null
  }

  type GetExhibitGroupByPayload<T extends ExhibitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExhibitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExhibitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExhibitGroupByOutputType[P]>
            : GetScalarType<T[P], ExhibitGroupByOutputType[P]>
        }
      >
    >


  export type ExhibitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    content?: boolean | Exhibit$contentArgs<ExtArgs>
    _count?: boolean | ExhibitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exhibit"]>

  export type ExhibitSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type ExhibitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    content?: boolean | Exhibit$contentArgs<ExtArgs>
    _count?: boolean | ExhibitCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ExhibitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Exhibit"
    objects: {
      content: Prisma.$ContentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["exhibit"]>
    composites: {}
  }


  type ExhibitGetPayload<S extends boolean | null | undefined | ExhibitDefaultArgs> = $Result.GetResult<Prisma.$ExhibitPayload, S>

  type ExhibitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExhibitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExhibitCountAggregateInputType | true
    }

  export interface ExhibitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exhibit'], meta: { name: 'Exhibit' } }
    /**
     * Find zero or one Exhibit that matches the filter.
     * @param {ExhibitFindUniqueArgs} args - Arguments to find a Exhibit
     * @example
     * // Get one Exhibit
     * const exhibit = await prisma.exhibit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExhibitFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExhibitFindUniqueArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exhibit that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExhibitFindUniqueOrThrowArgs} args - Arguments to find a Exhibit
     * @example
     * // Get one Exhibit
     * const exhibit = await prisma.exhibit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExhibitFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExhibitFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exhibit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitFindFirstArgs} args - Arguments to find a Exhibit
     * @example
     * // Get one Exhibit
     * const exhibit = await prisma.exhibit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExhibitFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExhibitFindFirstArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exhibit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitFindFirstOrThrowArgs} args - Arguments to find a Exhibit
     * @example
     * // Get one Exhibit
     * const exhibit = await prisma.exhibit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExhibitFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExhibitFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exhibits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exhibits
     * const exhibits = await prisma.exhibit.findMany()
     * 
     * // Get first 10 Exhibits
     * const exhibits = await prisma.exhibit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exhibitWithIdOnly = await prisma.exhibit.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExhibitFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExhibitFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exhibit.
     * @param {ExhibitCreateArgs} args - Arguments to create a Exhibit.
     * @example
     * // Create one Exhibit
     * const Exhibit = await prisma.exhibit.create({
     *   data: {
     *     // ... data to create a Exhibit
     *   }
     * })
     * 
    **/
    create<T extends ExhibitCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExhibitCreateArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exhibits.
     *     @param {ExhibitCreateManyArgs} args - Arguments to create many Exhibits.
     *     @example
     *     // Create many Exhibits
     *     const exhibit = await prisma.exhibit.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExhibitCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExhibitCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exhibit.
     * @param {ExhibitDeleteArgs} args - Arguments to delete one Exhibit.
     * @example
     * // Delete one Exhibit
     * const Exhibit = await prisma.exhibit.delete({
     *   where: {
     *     // ... filter to delete one Exhibit
     *   }
     * })
     * 
    **/
    delete<T extends ExhibitDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExhibitDeleteArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exhibit.
     * @param {ExhibitUpdateArgs} args - Arguments to update one Exhibit.
     * @example
     * // Update one Exhibit
     * const exhibit = await prisma.exhibit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExhibitUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExhibitUpdateArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exhibits.
     * @param {ExhibitDeleteManyArgs} args - Arguments to filter Exhibits to delete.
     * @example
     * // Delete a few Exhibits
     * const { count } = await prisma.exhibit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExhibitDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExhibitDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exhibits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exhibits
     * const exhibit = await prisma.exhibit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExhibitUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExhibitUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exhibit.
     * @param {ExhibitUpsertArgs} args - Arguments to update or create a Exhibit.
     * @example
     * // Update or create a Exhibit
     * const exhibit = await prisma.exhibit.upsert({
     *   create: {
     *     // ... data to create a Exhibit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exhibit we want to update
     *   }
     * })
    **/
    upsert<T extends ExhibitUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExhibitUpsertArgs<ExtArgs>>
    ): Prisma__ExhibitClient<$Result.GetResult<Prisma.$ExhibitPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exhibits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitCountArgs} args - Arguments to filter Exhibits to count.
     * @example
     * // Count the number of Exhibits
     * const count = await prisma.exhibit.count({
     *   where: {
     *     // ... the filter for the Exhibits we want to count
     *   }
     * })
    **/
    count<T extends ExhibitCountArgs>(
      args?: Subset<T, ExhibitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExhibitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exhibit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExhibitAggregateArgs>(args: Subset<T, ExhibitAggregateArgs>): Prisma.PrismaPromise<GetExhibitAggregateType<T>>

    /**
     * Group by Exhibit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExhibitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExhibitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExhibitGroupByArgs['orderBy'] }
        : { orderBy?: ExhibitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExhibitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExhibitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exhibit model
   */
  readonly fields: ExhibitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exhibit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExhibitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    content<T extends Exhibit$contentArgs<ExtArgs> = {}>(args?: Subset<T, Exhibit$contentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exhibit model
   */ 
  interface ExhibitFieldRefs {
    readonly id: FieldRef<"Exhibit", 'String'>
    readonly name: FieldRef<"Exhibit", 'String'>
    readonly description: FieldRef<"Exhibit", 'String'>
    readonly createdAt: FieldRef<"Exhibit", 'DateTime'>
    readonly updatedAt: FieldRef<"Exhibit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Exhibit findUnique
   */
  export type ExhibitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * Filter, which Exhibit to fetch.
     */
    where: ExhibitWhereUniqueInput
  }

  /**
   * Exhibit findUniqueOrThrow
   */
  export type ExhibitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * Filter, which Exhibit to fetch.
     */
    where: ExhibitWhereUniqueInput
  }

  /**
   * Exhibit findFirst
   */
  export type ExhibitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * Filter, which Exhibit to fetch.
     */
    where?: ExhibitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibits to fetch.
     */
    orderBy?: ExhibitOrderByWithRelationInput | ExhibitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exhibits.
     */
    cursor?: ExhibitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exhibits.
     */
    distinct?: ExhibitScalarFieldEnum | ExhibitScalarFieldEnum[]
  }

  /**
   * Exhibit findFirstOrThrow
   */
  export type ExhibitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * Filter, which Exhibit to fetch.
     */
    where?: ExhibitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibits to fetch.
     */
    orderBy?: ExhibitOrderByWithRelationInput | ExhibitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exhibits.
     */
    cursor?: ExhibitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exhibits.
     */
    distinct?: ExhibitScalarFieldEnum | ExhibitScalarFieldEnum[]
  }

  /**
   * Exhibit findMany
   */
  export type ExhibitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * Filter, which Exhibits to fetch.
     */
    where?: ExhibitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exhibits to fetch.
     */
    orderBy?: ExhibitOrderByWithRelationInput | ExhibitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exhibits.
     */
    cursor?: ExhibitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exhibits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exhibits.
     */
    skip?: number
    distinct?: ExhibitScalarFieldEnum | ExhibitScalarFieldEnum[]
  }

  /**
   * Exhibit create
   */
  export type ExhibitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * The data needed to create a Exhibit.
     */
    data: XOR<ExhibitCreateInput, ExhibitUncheckedCreateInput>
  }

  /**
   * Exhibit createMany
   */
  export type ExhibitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exhibits.
     */
    data: ExhibitCreateManyInput | ExhibitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Exhibit update
   */
  export type ExhibitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * The data needed to update a Exhibit.
     */
    data: XOR<ExhibitUpdateInput, ExhibitUncheckedUpdateInput>
    /**
     * Choose, which Exhibit to update.
     */
    where: ExhibitWhereUniqueInput
  }

  /**
   * Exhibit updateMany
   */
  export type ExhibitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exhibits.
     */
    data: XOR<ExhibitUpdateManyMutationInput, ExhibitUncheckedUpdateManyInput>
    /**
     * Filter which Exhibits to update
     */
    where?: ExhibitWhereInput
  }

  /**
   * Exhibit upsert
   */
  export type ExhibitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * The filter to search for the Exhibit to update in case it exists.
     */
    where: ExhibitWhereUniqueInput
    /**
     * In case the Exhibit found by the `where` argument doesn't exist, create a new Exhibit with this data.
     */
    create: XOR<ExhibitCreateInput, ExhibitUncheckedCreateInput>
    /**
     * In case the Exhibit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExhibitUpdateInput, ExhibitUncheckedUpdateInput>
  }

  /**
   * Exhibit delete
   */
  export type ExhibitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
    /**
     * Filter which Exhibit to delete.
     */
    where: ExhibitWhereUniqueInput
  }

  /**
   * Exhibit deleteMany
   */
  export type ExhibitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exhibits to delete
     */
    where?: ExhibitWhereInput
  }

  /**
   * Exhibit.content
   */
  export type Exhibit$contentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Content
     */
    select?: ContentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContentInclude<ExtArgs> | null
    where?: ContentWhereInput
    orderBy?: ContentOrderByWithRelationInput | ContentOrderByWithRelationInput[]
    cursor?: ContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContentScalarFieldEnum | ContentScalarFieldEnum[]
  }

  /**
   * Exhibit without action
   */
  export type ExhibitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exhibit
     */
    select?: ExhibitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExhibitInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    userInvites?: boolean | Role$userInvitesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }


  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    userInvites?: boolean | Role$userInvitesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      userInvites: Prisma.$UserInvitePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleCreateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>
    ): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    userInvites<T extends Role$userInvitesArgs<ExtArgs> = {}>(args?: Subset<T, Role$userInvitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role.userInvites
   */
  export type Role$userInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    where?: UserInviteWhereInput
    orderBy?: UserInviteOrderByWithRelationInput | UserInviteOrderByWithRelationInput[]
    cursor?: UserInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserInviteScalarFieldEnum | UserInviteScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model DisplayRenewal
   */

  export type AggregateDisplayRenewal = {
    _count: DisplayRenewalCountAggregateOutputType | null
    _min: DisplayRenewalMinAggregateOutputType | null
    _max: DisplayRenewalMaxAggregateOutputType | null
  }

  export type DisplayRenewalMinAggregateOutputType = {
    id: string | null
    secret: string | null
    displayId: string | null
    createdAt: Date | null
    validAfter: Date | null
  }

  export type DisplayRenewalMaxAggregateOutputType = {
    id: string | null
    secret: string | null
    displayId: string | null
    createdAt: Date | null
    validAfter: Date | null
  }

  export type DisplayRenewalCountAggregateOutputType = {
    id: number
    secret: number
    displayId: number
    createdAt: number
    validAfter: number
    _all: number
  }


  export type DisplayRenewalMinAggregateInputType = {
    id?: true
    secret?: true
    displayId?: true
    createdAt?: true
    validAfter?: true
  }

  export type DisplayRenewalMaxAggregateInputType = {
    id?: true
    secret?: true
    displayId?: true
    createdAt?: true
    validAfter?: true
  }

  export type DisplayRenewalCountAggregateInputType = {
    id?: true
    secret?: true
    displayId?: true
    createdAt?: true
    validAfter?: true
    _all?: true
  }

  export type DisplayRenewalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisplayRenewal to aggregate.
     */
    where?: DisplayRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayRenewals to fetch.
     */
    orderBy?: DisplayRenewalOrderByWithRelationInput | DisplayRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisplayRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DisplayRenewals
    **/
    _count?: true | DisplayRenewalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisplayRenewalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisplayRenewalMaxAggregateInputType
  }

  export type GetDisplayRenewalAggregateType<T extends DisplayRenewalAggregateArgs> = {
        [P in keyof T & keyof AggregateDisplayRenewal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisplayRenewal[P]>
      : GetScalarType<T[P], AggregateDisplayRenewal[P]>
  }




  export type DisplayRenewalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisplayRenewalWhereInput
    orderBy?: DisplayRenewalOrderByWithAggregationInput | DisplayRenewalOrderByWithAggregationInput[]
    by: DisplayRenewalScalarFieldEnum[] | DisplayRenewalScalarFieldEnum
    having?: DisplayRenewalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisplayRenewalCountAggregateInputType | true
    _min?: DisplayRenewalMinAggregateInputType
    _max?: DisplayRenewalMaxAggregateInputType
  }

  export type DisplayRenewalGroupByOutputType = {
    id: string
    secret: string
    displayId: string
    createdAt: Date
    validAfter: Date
    _count: DisplayRenewalCountAggregateOutputType | null
    _min: DisplayRenewalMinAggregateOutputType | null
    _max: DisplayRenewalMaxAggregateOutputType | null
  }

  type GetDisplayRenewalGroupByPayload<T extends DisplayRenewalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisplayRenewalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisplayRenewalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisplayRenewalGroupByOutputType[P]>
            : GetScalarType<T[P], DisplayRenewalGroupByOutputType[P]>
        }
      >
    >


  export type DisplayRenewalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    secret?: boolean
    displayId?: boolean
    createdAt?: boolean
    validAfter?: boolean
    display?: boolean | DisplayDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["displayRenewal"]>

  export type DisplayRenewalSelectScalar = {
    id?: boolean
    secret?: boolean
    displayId?: boolean
    createdAt?: boolean
    validAfter?: boolean
  }


  export type DisplayRenewalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    display?: boolean | DisplayDefaultArgs<ExtArgs>
  }


  export type $DisplayRenewalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DisplayRenewal"
    objects: {
      display: Prisma.$DisplayPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      secret: string
      displayId: string
      createdAt: Date
      validAfter: Date
    }, ExtArgs["result"]["displayRenewal"]>
    composites: {}
  }


  type DisplayRenewalGetPayload<S extends boolean | null | undefined | DisplayRenewalDefaultArgs> = $Result.GetResult<Prisma.$DisplayRenewalPayload, S>

  type DisplayRenewalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DisplayRenewalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DisplayRenewalCountAggregateInputType | true
    }

  export interface DisplayRenewalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DisplayRenewal'], meta: { name: 'DisplayRenewal' } }
    /**
     * Find zero or one DisplayRenewal that matches the filter.
     * @param {DisplayRenewalFindUniqueArgs} args - Arguments to find a DisplayRenewal
     * @example
     * // Get one DisplayRenewal
     * const displayRenewal = await prisma.displayRenewal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DisplayRenewalFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayRenewalFindUniqueArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DisplayRenewal that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DisplayRenewalFindUniqueOrThrowArgs} args - Arguments to find a DisplayRenewal
     * @example
     * // Get one DisplayRenewal
     * const displayRenewal = await prisma.displayRenewal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DisplayRenewalFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayRenewalFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DisplayRenewal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayRenewalFindFirstArgs} args - Arguments to find a DisplayRenewal
     * @example
     * // Get one DisplayRenewal
     * const displayRenewal = await prisma.displayRenewal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DisplayRenewalFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayRenewalFindFirstArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DisplayRenewal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayRenewalFindFirstOrThrowArgs} args - Arguments to find a DisplayRenewal
     * @example
     * // Get one DisplayRenewal
     * const displayRenewal = await prisma.displayRenewal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DisplayRenewalFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayRenewalFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DisplayRenewals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayRenewalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DisplayRenewals
     * const displayRenewals = await prisma.displayRenewal.findMany()
     * 
     * // Get first 10 DisplayRenewals
     * const displayRenewals = await prisma.displayRenewal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const displayRenewalWithIdOnly = await prisma.displayRenewal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DisplayRenewalFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayRenewalFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DisplayRenewal.
     * @param {DisplayRenewalCreateArgs} args - Arguments to create a DisplayRenewal.
     * @example
     * // Create one DisplayRenewal
     * const DisplayRenewal = await prisma.displayRenewal.create({
     *   data: {
     *     // ... data to create a DisplayRenewal
     *   }
     * })
     * 
    **/
    create<T extends DisplayRenewalCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayRenewalCreateArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DisplayRenewals.
     *     @param {DisplayRenewalCreateManyArgs} args - Arguments to create many DisplayRenewals.
     *     @example
     *     // Create many DisplayRenewals
     *     const displayRenewal = await prisma.displayRenewal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DisplayRenewalCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayRenewalCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DisplayRenewal.
     * @param {DisplayRenewalDeleteArgs} args - Arguments to delete one DisplayRenewal.
     * @example
     * // Delete one DisplayRenewal
     * const DisplayRenewal = await prisma.displayRenewal.delete({
     *   where: {
     *     // ... filter to delete one DisplayRenewal
     *   }
     * })
     * 
    **/
    delete<T extends DisplayRenewalDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayRenewalDeleteArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DisplayRenewal.
     * @param {DisplayRenewalUpdateArgs} args - Arguments to update one DisplayRenewal.
     * @example
     * // Update one DisplayRenewal
     * const displayRenewal = await prisma.displayRenewal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DisplayRenewalUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayRenewalUpdateArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DisplayRenewals.
     * @param {DisplayRenewalDeleteManyArgs} args - Arguments to filter DisplayRenewals to delete.
     * @example
     * // Delete a few DisplayRenewals
     * const { count } = await prisma.displayRenewal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DisplayRenewalDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DisplayRenewalDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DisplayRenewals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayRenewalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DisplayRenewals
     * const displayRenewal = await prisma.displayRenewal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DisplayRenewalUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayRenewalUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DisplayRenewal.
     * @param {DisplayRenewalUpsertArgs} args - Arguments to update or create a DisplayRenewal.
     * @example
     * // Update or create a DisplayRenewal
     * const displayRenewal = await prisma.displayRenewal.upsert({
     *   create: {
     *     // ... data to create a DisplayRenewal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DisplayRenewal we want to update
     *   }
     * })
    **/
    upsert<T extends DisplayRenewalUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DisplayRenewalUpsertArgs<ExtArgs>>
    ): Prisma__DisplayRenewalClient<$Result.GetResult<Prisma.$DisplayRenewalPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DisplayRenewals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayRenewalCountArgs} args - Arguments to filter DisplayRenewals to count.
     * @example
     * // Count the number of DisplayRenewals
     * const count = await prisma.displayRenewal.count({
     *   where: {
     *     // ... the filter for the DisplayRenewals we want to count
     *   }
     * })
    **/
    count<T extends DisplayRenewalCountArgs>(
      args?: Subset<T, DisplayRenewalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisplayRenewalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DisplayRenewal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayRenewalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisplayRenewalAggregateArgs>(args: Subset<T, DisplayRenewalAggregateArgs>): Prisma.PrismaPromise<GetDisplayRenewalAggregateType<T>>

    /**
     * Group by DisplayRenewal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisplayRenewalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisplayRenewalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisplayRenewalGroupByArgs['orderBy'] }
        : { orderBy?: DisplayRenewalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisplayRenewalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisplayRenewalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DisplayRenewal model
   */
  readonly fields: DisplayRenewalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DisplayRenewal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisplayRenewalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    display<T extends DisplayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisplayDefaultArgs<ExtArgs>>): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DisplayRenewal model
   */ 
  interface DisplayRenewalFieldRefs {
    readonly id: FieldRef<"DisplayRenewal", 'String'>
    readonly secret: FieldRef<"DisplayRenewal", 'String'>
    readonly displayId: FieldRef<"DisplayRenewal", 'String'>
    readonly createdAt: FieldRef<"DisplayRenewal", 'DateTime'>
    readonly validAfter: FieldRef<"DisplayRenewal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DisplayRenewal findUnique
   */
  export type DisplayRenewalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * Filter, which DisplayRenewal to fetch.
     */
    where: DisplayRenewalWhereUniqueInput
  }

  /**
   * DisplayRenewal findUniqueOrThrow
   */
  export type DisplayRenewalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * Filter, which DisplayRenewal to fetch.
     */
    where: DisplayRenewalWhereUniqueInput
  }

  /**
   * DisplayRenewal findFirst
   */
  export type DisplayRenewalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * Filter, which DisplayRenewal to fetch.
     */
    where?: DisplayRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayRenewals to fetch.
     */
    orderBy?: DisplayRenewalOrderByWithRelationInput | DisplayRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisplayRenewals.
     */
    cursor?: DisplayRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisplayRenewals.
     */
    distinct?: DisplayRenewalScalarFieldEnum | DisplayRenewalScalarFieldEnum[]
  }

  /**
   * DisplayRenewal findFirstOrThrow
   */
  export type DisplayRenewalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * Filter, which DisplayRenewal to fetch.
     */
    where?: DisplayRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayRenewals to fetch.
     */
    orderBy?: DisplayRenewalOrderByWithRelationInput | DisplayRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisplayRenewals.
     */
    cursor?: DisplayRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayRenewals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisplayRenewals.
     */
    distinct?: DisplayRenewalScalarFieldEnum | DisplayRenewalScalarFieldEnum[]
  }

  /**
   * DisplayRenewal findMany
   */
  export type DisplayRenewalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * Filter, which DisplayRenewals to fetch.
     */
    where?: DisplayRenewalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisplayRenewals to fetch.
     */
    orderBy?: DisplayRenewalOrderByWithRelationInput | DisplayRenewalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DisplayRenewals.
     */
    cursor?: DisplayRenewalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisplayRenewals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisplayRenewals.
     */
    skip?: number
    distinct?: DisplayRenewalScalarFieldEnum | DisplayRenewalScalarFieldEnum[]
  }

  /**
   * DisplayRenewal create
   */
  export type DisplayRenewalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * The data needed to create a DisplayRenewal.
     */
    data: XOR<DisplayRenewalCreateInput, DisplayRenewalUncheckedCreateInput>
  }

  /**
   * DisplayRenewal createMany
   */
  export type DisplayRenewalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DisplayRenewals.
     */
    data: DisplayRenewalCreateManyInput | DisplayRenewalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DisplayRenewal update
   */
  export type DisplayRenewalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * The data needed to update a DisplayRenewal.
     */
    data: XOR<DisplayRenewalUpdateInput, DisplayRenewalUncheckedUpdateInput>
    /**
     * Choose, which DisplayRenewal to update.
     */
    where: DisplayRenewalWhereUniqueInput
  }

  /**
   * DisplayRenewal updateMany
   */
  export type DisplayRenewalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DisplayRenewals.
     */
    data: XOR<DisplayRenewalUpdateManyMutationInput, DisplayRenewalUncheckedUpdateManyInput>
    /**
     * Filter which DisplayRenewals to update
     */
    where?: DisplayRenewalWhereInput
  }

  /**
   * DisplayRenewal upsert
   */
  export type DisplayRenewalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * The filter to search for the DisplayRenewal to update in case it exists.
     */
    where: DisplayRenewalWhereUniqueInput
    /**
     * In case the DisplayRenewal found by the `where` argument doesn't exist, create a new DisplayRenewal with this data.
     */
    create: XOR<DisplayRenewalCreateInput, DisplayRenewalUncheckedCreateInput>
    /**
     * In case the DisplayRenewal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisplayRenewalUpdateInput, DisplayRenewalUncheckedUpdateInput>
  }

  /**
   * DisplayRenewal delete
   */
  export type DisplayRenewalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
    /**
     * Filter which DisplayRenewal to delete.
     */
    where: DisplayRenewalWhereUniqueInput
  }

  /**
   * DisplayRenewal deleteMany
   */
  export type DisplayRenewalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisplayRenewals to delete
     */
    where?: DisplayRenewalWhereInput
  }

  /**
   * DisplayRenewal without action
   */
  export type DisplayRenewalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisplayRenewal
     */
    select?: DisplayRenewalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisplayRenewalInclude<ExtArgs> | null
  }


  /**
   * Model License
   */

  export type AggregateLicense = {
    _count: LicenseCountAggregateOutputType | null
    _avg: LicenseAvgAggregateOutputType | null
    _sum: LicenseSumAggregateOutputType | null
    _min: LicenseMinAggregateOutputType | null
    _max: LicenseMaxAggregateOutputType | null
  }

  export type LicenseAvgAggregateOutputType = {
    priceMonthly: number | null
    maxUsers: number | null
    maxDisplays: number | null
    maxStorageBytes: number | null
  }

  export type LicenseSumAggregateOutputType = {
    priceMonthly: number | null
    maxUsers: number | null
    maxDisplays: number | null
    maxStorageBytes: bigint | null
  }

  export type LicenseMinAggregateOutputType = {
    id: string | null
    type: $Enums.LicenseType | null
    purchasedAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
    priceMonthly: number | null
    maxUsers: number | null
    maxDisplays: number | null
    maxStorageBytes: bigint | null
  }

  export type LicenseMaxAggregateOutputType = {
    id: string | null
    type: $Enums.LicenseType | null
    purchasedAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
    priceMonthly: number | null
    maxUsers: number | null
    maxDisplays: number | null
    maxStorageBytes: bigint | null
  }

  export type LicenseCountAggregateOutputType = {
    id: number
    type: number
    purchasedAt: number
    updatedAt: number
    expiresAt: number
    priceMonthly: number
    maxUsers: number
    maxDisplays: number
    maxStorageBytes: number
    _all: number
  }


  export type LicenseAvgAggregateInputType = {
    priceMonthly?: true
    maxUsers?: true
    maxDisplays?: true
    maxStorageBytes?: true
  }

  export type LicenseSumAggregateInputType = {
    priceMonthly?: true
    maxUsers?: true
    maxDisplays?: true
    maxStorageBytes?: true
  }

  export type LicenseMinAggregateInputType = {
    id?: true
    type?: true
    purchasedAt?: true
    updatedAt?: true
    expiresAt?: true
    priceMonthly?: true
    maxUsers?: true
    maxDisplays?: true
    maxStorageBytes?: true
  }

  export type LicenseMaxAggregateInputType = {
    id?: true
    type?: true
    purchasedAt?: true
    updatedAt?: true
    expiresAt?: true
    priceMonthly?: true
    maxUsers?: true
    maxDisplays?: true
    maxStorageBytes?: true
  }

  export type LicenseCountAggregateInputType = {
    id?: true
    type?: true
    purchasedAt?: true
    updatedAt?: true
    expiresAt?: true
    priceMonthly?: true
    maxUsers?: true
    maxDisplays?: true
    maxStorageBytes?: true
    _all?: true
  }

  export type LicenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which License to aggregate.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Licenses
    **/
    _count?: true | LicenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LicenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LicenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LicenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LicenseMaxAggregateInputType
  }

  export type GetLicenseAggregateType<T extends LicenseAggregateArgs> = {
        [P in keyof T & keyof AggregateLicense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLicense[P]>
      : GetScalarType<T[P], AggregateLicense[P]>
  }




  export type LicenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicenseWhereInput
    orderBy?: LicenseOrderByWithAggregationInput | LicenseOrderByWithAggregationInput[]
    by: LicenseScalarFieldEnum[] | LicenseScalarFieldEnum
    having?: LicenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LicenseCountAggregateInputType | true
    _avg?: LicenseAvgAggregateInputType
    _sum?: LicenseSumAggregateInputType
    _min?: LicenseMinAggregateInputType
    _max?: LicenseMaxAggregateInputType
  }

  export type LicenseGroupByOutputType = {
    id: string
    type: $Enums.LicenseType
    purchasedAt: Date
    updatedAt: Date
    expiresAt: Date
    priceMonthly: number
    maxUsers: number
    maxDisplays: number
    maxStorageBytes: bigint
    _count: LicenseCountAggregateOutputType | null
    _avg: LicenseAvgAggregateOutputType | null
    _sum: LicenseSumAggregateOutputType | null
    _min: LicenseMinAggregateOutputType | null
    _max: LicenseMaxAggregateOutputType | null
  }

  type GetLicenseGroupByPayload<T extends LicenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LicenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LicenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LicenseGroupByOutputType[P]>
            : GetScalarType<T[P], LicenseGroupByOutputType[P]>
        }
      >
    >


  export type LicenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    purchasedAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    priceMonthly?: boolean
    maxUsers?: boolean
    maxDisplays?: boolean
    maxStorageBytes?: boolean
    organization?: boolean | License$organizationArgs<ExtArgs>
  }, ExtArgs["result"]["license"]>

  export type LicenseSelectScalar = {
    id?: boolean
    type?: boolean
    purchasedAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    priceMonthly?: boolean
    maxUsers?: boolean
    maxDisplays?: boolean
    maxStorageBytes?: boolean
  }


  export type LicenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | License$organizationArgs<ExtArgs>
  }


  export type $LicensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "License"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.LicenseType
      purchasedAt: Date
      updatedAt: Date
      expiresAt: Date
      priceMonthly: number
      maxUsers: number
      maxDisplays: number
      maxStorageBytes: bigint
    }, ExtArgs["result"]["license"]>
    composites: {}
  }


  type LicenseGetPayload<S extends boolean | null | undefined | LicenseDefaultArgs> = $Result.GetResult<Prisma.$LicensePayload, S>

  type LicenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LicenseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LicenseCountAggregateInputType | true
    }

  export interface LicenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['License'], meta: { name: 'License' } }
    /**
     * Find zero or one License that matches the filter.
     * @param {LicenseFindUniqueArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LicenseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LicenseFindUniqueArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one License that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LicenseFindUniqueOrThrowArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LicenseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LicenseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first License that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindFirstArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LicenseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LicenseFindFirstArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first License that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindFirstOrThrowArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LicenseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LicenseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Licenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Licenses
     * const licenses = await prisma.license.findMany()
     * 
     * // Get first 10 Licenses
     * const licenses = await prisma.license.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const licenseWithIdOnly = await prisma.license.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LicenseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LicenseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a License.
     * @param {LicenseCreateArgs} args - Arguments to create a License.
     * @example
     * // Create one License
     * const License = await prisma.license.create({
     *   data: {
     *     // ... data to create a License
     *   }
     * })
     * 
    **/
    create<T extends LicenseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LicenseCreateArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Licenses.
     *     @param {LicenseCreateManyArgs} args - Arguments to create many Licenses.
     *     @example
     *     // Create many Licenses
     *     const license = await prisma.license.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LicenseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LicenseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a License.
     * @param {LicenseDeleteArgs} args - Arguments to delete one License.
     * @example
     * // Delete one License
     * const License = await prisma.license.delete({
     *   where: {
     *     // ... filter to delete one License
     *   }
     * })
     * 
    **/
    delete<T extends LicenseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LicenseDeleteArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one License.
     * @param {LicenseUpdateArgs} args - Arguments to update one License.
     * @example
     * // Update one License
     * const license = await prisma.license.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LicenseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LicenseUpdateArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Licenses.
     * @param {LicenseDeleteManyArgs} args - Arguments to filter Licenses to delete.
     * @example
     * // Delete a few Licenses
     * const { count } = await prisma.license.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LicenseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LicenseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Licenses
     * const license = await prisma.license.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LicenseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LicenseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one License.
     * @param {LicenseUpsertArgs} args - Arguments to update or create a License.
     * @example
     * // Update or create a License
     * const license = await prisma.license.upsert({
     *   create: {
     *     // ... data to create a License
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the License we want to update
     *   }
     * })
    **/
    upsert<T extends LicenseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LicenseUpsertArgs<ExtArgs>>
    ): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseCountArgs} args - Arguments to filter Licenses to count.
     * @example
     * // Count the number of Licenses
     * const count = await prisma.license.count({
     *   where: {
     *     // ... the filter for the Licenses we want to count
     *   }
     * })
    **/
    count<T extends LicenseCountArgs>(
      args?: Subset<T, LicenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LicenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a License.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LicenseAggregateArgs>(args: Subset<T, LicenseAggregateArgs>): Prisma.PrismaPromise<GetLicenseAggregateType<T>>

    /**
     * Group by License.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LicenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LicenseGroupByArgs['orderBy'] }
        : { orderBy?: LicenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LicenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLicenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the License model
   */
  readonly fields: LicenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for License.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LicenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    organization<T extends License$organizationArgs<ExtArgs> = {}>(args?: Subset<T, License$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the License model
   */ 
  interface LicenseFieldRefs {
    readonly id: FieldRef<"License", 'String'>
    readonly type: FieldRef<"License", 'LicenseType'>
    readonly purchasedAt: FieldRef<"License", 'DateTime'>
    readonly updatedAt: FieldRef<"License", 'DateTime'>
    readonly expiresAt: FieldRef<"License", 'DateTime'>
    readonly priceMonthly: FieldRef<"License", 'Int'>
    readonly maxUsers: FieldRef<"License", 'Int'>
    readonly maxDisplays: FieldRef<"License", 'Int'>
    readonly maxStorageBytes: FieldRef<"License", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * License findUnique
   */
  export type LicenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License findUniqueOrThrow
   */
  export type LicenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License findFirst
   */
  export type LicenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licenses.
     */
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License findFirstOrThrow
   */
  export type LicenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licenses.
     */
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License findMany
   */
  export type LicenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which Licenses to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License create
   */
  export type LicenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The data needed to create a License.
     */
    data: XOR<LicenseCreateInput, LicenseUncheckedCreateInput>
  }

  /**
   * License createMany
   */
  export type LicenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Licenses.
     */
    data: LicenseCreateManyInput | LicenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * License update
   */
  export type LicenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The data needed to update a License.
     */
    data: XOR<LicenseUpdateInput, LicenseUncheckedUpdateInput>
    /**
     * Choose, which License to update.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License updateMany
   */
  export type LicenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Licenses.
     */
    data: XOR<LicenseUpdateManyMutationInput, LicenseUncheckedUpdateManyInput>
    /**
     * Filter which Licenses to update
     */
    where?: LicenseWhereInput
  }

  /**
   * License upsert
   */
  export type LicenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The filter to search for the License to update in case it exists.
     */
    where: LicenseWhereUniqueInput
    /**
     * In case the License found by the `where` argument doesn't exist, create a new License with this data.
     */
    create: XOR<LicenseCreateInput, LicenseUncheckedCreateInput>
    /**
     * In case the License was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LicenseUpdateInput, LicenseUncheckedUpdateInput>
  }

  /**
   * License delete
   */
  export type LicenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter which License to delete.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License deleteMany
   */
  export type LicenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Licenses to delete
     */
    where?: LicenseWhereInput
  }

  /**
   * License.organization
   */
  export type License$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * License without action
   */
  export type LicenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
  }


  /**
   * Model UserInvite
   */

  export type AggregateUserInvite = {
    _count: UserInviteCountAggregateOutputType | null
    _min: UserInviteMinAggregateOutputType | null
    _max: UserInviteMaxAggregateOutputType | null
  }

  export type UserInviteMinAggregateOutputType = {
    id: string | null
    token: string | null
    email: string | null
    name: string | null
    organizationId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    acceptedAt: Date | null
    inviterId: string | null
  }

  export type UserInviteMaxAggregateOutputType = {
    id: string | null
    token: string | null
    email: string | null
    name: string | null
    organizationId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    acceptedAt: Date | null
    inviterId: string | null
  }

  export type UserInviteCountAggregateOutputType = {
    id: number
    token: number
    email: number
    name: number
    organizationId: number
    createdAt: number
    expiresAt: number
    acceptedAt: number
    inviterId: number
    _all: number
  }


  export type UserInviteMinAggregateInputType = {
    id?: true
    token?: true
    email?: true
    name?: true
    organizationId?: true
    createdAt?: true
    expiresAt?: true
    acceptedAt?: true
    inviterId?: true
  }

  export type UserInviteMaxAggregateInputType = {
    id?: true
    token?: true
    email?: true
    name?: true
    organizationId?: true
    createdAt?: true
    expiresAt?: true
    acceptedAt?: true
    inviterId?: true
  }

  export type UserInviteCountAggregateInputType = {
    id?: true
    token?: true
    email?: true
    name?: true
    organizationId?: true
    createdAt?: true
    expiresAt?: true
    acceptedAt?: true
    inviterId?: true
    _all?: true
  }

  export type UserInviteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvite to aggregate.
     */
    where?: UserInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvites to fetch.
     */
    orderBy?: UserInviteOrderByWithRelationInput | UserInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserInvites
    **/
    _count?: true | UserInviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserInviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserInviteMaxAggregateInputType
  }

  export type GetUserInviteAggregateType<T extends UserInviteAggregateArgs> = {
        [P in keyof T & keyof AggregateUserInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserInvite[P]>
      : GetScalarType<T[P], AggregateUserInvite[P]>
  }




  export type UserInviteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserInviteWhereInput
    orderBy?: UserInviteOrderByWithAggregationInput | UserInviteOrderByWithAggregationInput[]
    by: UserInviteScalarFieldEnum[] | UserInviteScalarFieldEnum
    having?: UserInviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserInviteCountAggregateInputType | true
    _min?: UserInviteMinAggregateInputType
    _max?: UserInviteMaxAggregateInputType
  }

  export type UserInviteGroupByOutputType = {
    id: string
    token: string
    email: string
    name: string | null
    organizationId: string
    createdAt: Date
    expiresAt: Date
    acceptedAt: Date | null
    inviterId: string
    _count: UserInviteCountAggregateOutputType | null
    _min: UserInviteMinAggregateOutputType | null
    _max: UserInviteMaxAggregateOutputType | null
  }

  type GetUserInviteGroupByPayload<T extends UserInviteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserInviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserInviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserInviteGroupByOutputType[P]>
            : GetScalarType<T[P], UserInviteGroupByOutputType[P]>
        }
      >
    >


  export type UserInviteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    email?: boolean
    name?: boolean
    organizationId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    inviterId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    inviter?: boolean | UserDefaultArgs<ExtArgs>
    roles?: boolean | UserInvite$rolesArgs<ExtArgs>
    _count?: boolean | UserInviteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userInvite"]>

  export type UserInviteSelectScalar = {
    id?: boolean
    token?: boolean
    email?: boolean
    name?: boolean
    organizationId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    acceptedAt?: boolean
    inviterId?: boolean
  }


  export type UserInviteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    inviter?: boolean | UserDefaultArgs<ExtArgs>
    roles?: boolean | UserInvite$rolesArgs<ExtArgs>
    _count?: boolean | UserInviteCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserInvitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserInvite"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      inviter: Prisma.$UserPayload<ExtArgs>
      roles: Prisma.$RolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      email: string
      name: string | null
      organizationId: string
      createdAt: Date
      expiresAt: Date
      acceptedAt: Date | null
      inviterId: string
    }, ExtArgs["result"]["userInvite"]>
    composites: {}
  }


  type UserInviteGetPayload<S extends boolean | null | undefined | UserInviteDefaultArgs> = $Result.GetResult<Prisma.$UserInvitePayload, S>

  type UserInviteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserInviteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserInviteCountAggregateInputType | true
    }

  export interface UserInviteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserInvite'], meta: { name: 'UserInvite' } }
    /**
     * Find zero or one UserInvite that matches the filter.
     * @param {UserInviteFindUniqueArgs} args - Arguments to find a UserInvite
     * @example
     * // Get one UserInvite
     * const userInvite = await prisma.userInvite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserInviteFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserInviteFindUniqueArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserInvite that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserInviteFindUniqueOrThrowArgs} args - Arguments to find a UserInvite
     * @example
     * // Get one UserInvite
     * const userInvite = await prisma.userInvite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserInviteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInviteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserInvite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInviteFindFirstArgs} args - Arguments to find a UserInvite
     * @example
     * // Get one UserInvite
     * const userInvite = await prisma.userInvite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserInviteFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInviteFindFirstArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserInvite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInviteFindFirstOrThrowArgs} args - Arguments to find a UserInvite
     * @example
     * // Get one UserInvite
     * const userInvite = await prisma.userInvite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserInviteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInviteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInviteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserInvites
     * const userInvites = await prisma.userInvite.findMany()
     * 
     * // Get first 10 UserInvites
     * const userInvites = await prisma.userInvite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userInviteWithIdOnly = await prisma.userInvite.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserInviteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInviteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserInvite.
     * @param {UserInviteCreateArgs} args - Arguments to create a UserInvite.
     * @example
     * // Create one UserInvite
     * const UserInvite = await prisma.userInvite.create({
     *   data: {
     *     // ... data to create a UserInvite
     *   }
     * })
     * 
    **/
    create<T extends UserInviteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserInviteCreateArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserInvites.
     *     @param {UserInviteCreateManyArgs} args - Arguments to create many UserInvites.
     *     @example
     *     // Create many UserInvites
     *     const userInvite = await prisma.userInvite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserInviteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInviteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserInvite.
     * @param {UserInviteDeleteArgs} args - Arguments to delete one UserInvite.
     * @example
     * // Delete one UserInvite
     * const UserInvite = await prisma.userInvite.delete({
     *   where: {
     *     // ... filter to delete one UserInvite
     *   }
     * })
     * 
    **/
    delete<T extends UserInviteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserInviteDeleteArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserInvite.
     * @param {UserInviteUpdateArgs} args - Arguments to update one UserInvite.
     * @example
     * // Update one UserInvite
     * const userInvite = await prisma.userInvite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserInviteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserInviteUpdateArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserInvites.
     * @param {UserInviteDeleteManyArgs} args - Arguments to filter UserInvites to delete.
     * @example
     * // Delete a few UserInvites
     * const { count } = await prisma.userInvite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserInviteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserInviteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserInvites
     * const userInvite = await prisma.userInvite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserInviteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserInviteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserInvite.
     * @param {UserInviteUpsertArgs} args - Arguments to update or create a UserInvite.
     * @example
     * // Update or create a UserInvite
     * const userInvite = await prisma.userInvite.upsert({
     *   create: {
     *     // ... data to create a UserInvite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserInvite we want to update
     *   }
     * })
    **/
    upsert<T extends UserInviteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserInviteUpsertArgs<ExtArgs>>
    ): Prisma__UserInviteClient<$Result.GetResult<Prisma.$UserInvitePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInviteCountArgs} args - Arguments to filter UserInvites to count.
     * @example
     * // Count the number of UserInvites
     * const count = await prisma.userInvite.count({
     *   where: {
     *     // ... the filter for the UserInvites we want to count
     *   }
     * })
    **/
    count<T extends UserInviteCountArgs>(
      args?: Subset<T, UserInviteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserInviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserInviteAggregateArgs>(args: Subset<T, UserInviteAggregateArgs>): Prisma.PrismaPromise<GetUserInviteAggregateType<T>>

    /**
     * Group by UserInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserInviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserInviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserInviteGroupByArgs['orderBy'] }
        : { orderBy?: UserInviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserInviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserInvite model
   */
  readonly fields: UserInviteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserInvite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserInviteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    inviter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    roles<T extends UserInvite$rolesArgs<ExtArgs> = {}>(args?: Subset<T, UserInvite$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserInvite model
   */ 
  interface UserInviteFieldRefs {
    readonly id: FieldRef<"UserInvite", 'String'>
    readonly token: FieldRef<"UserInvite", 'String'>
    readonly email: FieldRef<"UserInvite", 'String'>
    readonly name: FieldRef<"UserInvite", 'String'>
    readonly organizationId: FieldRef<"UserInvite", 'String'>
    readonly createdAt: FieldRef<"UserInvite", 'DateTime'>
    readonly expiresAt: FieldRef<"UserInvite", 'DateTime'>
    readonly acceptedAt: FieldRef<"UserInvite", 'DateTime'>
    readonly inviterId: FieldRef<"UserInvite", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserInvite findUnique
   */
  export type UserInviteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * Filter, which UserInvite to fetch.
     */
    where: UserInviteWhereUniqueInput
  }

  /**
   * UserInvite findUniqueOrThrow
   */
  export type UserInviteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * Filter, which UserInvite to fetch.
     */
    where: UserInviteWhereUniqueInput
  }

  /**
   * UserInvite findFirst
   */
  export type UserInviteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * Filter, which UserInvite to fetch.
     */
    where?: UserInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvites to fetch.
     */
    orderBy?: UserInviteOrderByWithRelationInput | UserInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvites.
     */
    cursor?: UserInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvites.
     */
    distinct?: UserInviteScalarFieldEnum | UserInviteScalarFieldEnum[]
  }

  /**
   * UserInvite findFirstOrThrow
   */
  export type UserInviteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * Filter, which UserInvite to fetch.
     */
    where?: UserInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvites to fetch.
     */
    orderBy?: UserInviteOrderByWithRelationInput | UserInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserInvites.
     */
    cursor?: UserInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserInvites.
     */
    distinct?: UserInviteScalarFieldEnum | UserInviteScalarFieldEnum[]
  }

  /**
   * UserInvite findMany
   */
  export type UserInviteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * Filter, which UserInvites to fetch.
     */
    where?: UserInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserInvites to fetch.
     */
    orderBy?: UserInviteOrderByWithRelationInput | UserInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserInvites.
     */
    cursor?: UserInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserInvites.
     */
    skip?: number
    distinct?: UserInviteScalarFieldEnum | UserInviteScalarFieldEnum[]
  }

  /**
   * UserInvite create
   */
  export type UserInviteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * The data needed to create a UserInvite.
     */
    data: XOR<UserInviteCreateInput, UserInviteUncheckedCreateInput>
  }

  /**
   * UserInvite createMany
   */
  export type UserInviteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserInvites.
     */
    data: UserInviteCreateManyInput | UserInviteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserInvite update
   */
  export type UserInviteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * The data needed to update a UserInvite.
     */
    data: XOR<UserInviteUpdateInput, UserInviteUncheckedUpdateInput>
    /**
     * Choose, which UserInvite to update.
     */
    where: UserInviteWhereUniqueInput
  }

  /**
   * UserInvite updateMany
   */
  export type UserInviteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserInvites.
     */
    data: XOR<UserInviteUpdateManyMutationInput, UserInviteUncheckedUpdateManyInput>
    /**
     * Filter which UserInvites to update
     */
    where?: UserInviteWhereInput
  }

  /**
   * UserInvite upsert
   */
  export type UserInviteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * The filter to search for the UserInvite to update in case it exists.
     */
    where: UserInviteWhereUniqueInput
    /**
     * In case the UserInvite found by the `where` argument doesn't exist, create a new UserInvite with this data.
     */
    create: XOR<UserInviteCreateInput, UserInviteUncheckedCreateInput>
    /**
     * In case the UserInvite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserInviteUpdateInput, UserInviteUncheckedUpdateInput>
  }

  /**
   * UserInvite delete
   */
  export type UserInviteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
    /**
     * Filter which UserInvite to delete.
     */
    where: UserInviteWhereUniqueInput
  }

  /**
   * UserInvite deleteMany
   */
  export type UserInviteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserInvites to delete
     */
    where?: UserInviteWhereInput
  }

  /**
   * UserInvite.roles
   */
  export type UserInvite$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * UserInvite without action
   */
  export type UserInviteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserInvite
     */
    select?: UserInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInviteInclude<ExtArgs> | null
  }


  /**
   * Model WebsocketConnectionToken
   */

  export type AggregateWebsocketConnectionToken = {
    _count: WebsocketConnectionTokenCountAggregateOutputType | null
    _min: WebsocketConnectionTokenMinAggregateOutputType | null
    _max: WebsocketConnectionTokenMaxAggregateOutputType | null
  }

  export type WebsocketConnectionTokenMinAggregateOutputType = {
    id: string | null
    token: string | null
    displayId: string | null
    createdAt: Date | null
  }

  export type WebsocketConnectionTokenMaxAggregateOutputType = {
    id: string | null
    token: string | null
    displayId: string | null
    createdAt: Date | null
  }

  export type WebsocketConnectionTokenCountAggregateOutputType = {
    id: number
    token: number
    displayId: number
    createdAt: number
    _all: number
  }


  export type WebsocketConnectionTokenMinAggregateInputType = {
    id?: true
    token?: true
    displayId?: true
    createdAt?: true
  }

  export type WebsocketConnectionTokenMaxAggregateInputType = {
    id?: true
    token?: true
    displayId?: true
    createdAt?: true
  }

  export type WebsocketConnectionTokenCountAggregateInputType = {
    id?: true
    token?: true
    displayId?: true
    createdAt?: true
    _all?: true
  }

  export type WebsocketConnectionTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebsocketConnectionToken to aggregate.
     */
    where?: WebsocketConnectionTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsocketConnectionTokens to fetch.
     */
    orderBy?: WebsocketConnectionTokenOrderByWithRelationInput | WebsocketConnectionTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebsocketConnectionTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsocketConnectionTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsocketConnectionTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebsocketConnectionTokens
    **/
    _count?: true | WebsocketConnectionTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebsocketConnectionTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebsocketConnectionTokenMaxAggregateInputType
  }

  export type GetWebsocketConnectionTokenAggregateType<T extends WebsocketConnectionTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateWebsocketConnectionToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebsocketConnectionToken[P]>
      : GetScalarType<T[P], AggregateWebsocketConnectionToken[P]>
  }




  export type WebsocketConnectionTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebsocketConnectionTokenWhereInput
    orderBy?: WebsocketConnectionTokenOrderByWithAggregationInput | WebsocketConnectionTokenOrderByWithAggregationInput[]
    by: WebsocketConnectionTokenScalarFieldEnum[] | WebsocketConnectionTokenScalarFieldEnum
    having?: WebsocketConnectionTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebsocketConnectionTokenCountAggregateInputType | true
    _min?: WebsocketConnectionTokenMinAggregateInputType
    _max?: WebsocketConnectionTokenMaxAggregateInputType
  }

  export type WebsocketConnectionTokenGroupByOutputType = {
    id: string
    token: string
    displayId: string
    createdAt: Date
    _count: WebsocketConnectionTokenCountAggregateOutputType | null
    _min: WebsocketConnectionTokenMinAggregateOutputType | null
    _max: WebsocketConnectionTokenMaxAggregateOutputType | null
  }

  type GetWebsocketConnectionTokenGroupByPayload<T extends WebsocketConnectionTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebsocketConnectionTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebsocketConnectionTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebsocketConnectionTokenGroupByOutputType[P]>
            : GetScalarType<T[P], WebsocketConnectionTokenGroupByOutputType[P]>
        }
      >
    >


  export type WebsocketConnectionTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    displayId?: boolean
    createdAt?: boolean
    display?: boolean | DisplayDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["websocketConnectionToken"]>

  export type WebsocketConnectionTokenSelectScalar = {
    id?: boolean
    token?: boolean
    displayId?: boolean
    createdAt?: boolean
  }


  export type WebsocketConnectionTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    display?: boolean | DisplayDefaultArgs<ExtArgs>
  }


  export type $WebsocketConnectionTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebsocketConnectionToken"
    objects: {
      display: Prisma.$DisplayPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      displayId: string
      createdAt: Date
    }, ExtArgs["result"]["websocketConnectionToken"]>
    composites: {}
  }


  type WebsocketConnectionTokenGetPayload<S extends boolean | null | undefined | WebsocketConnectionTokenDefaultArgs> = $Result.GetResult<Prisma.$WebsocketConnectionTokenPayload, S>

  type WebsocketConnectionTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebsocketConnectionTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WebsocketConnectionTokenCountAggregateInputType | true
    }

  export interface WebsocketConnectionTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebsocketConnectionToken'], meta: { name: 'WebsocketConnectionToken' } }
    /**
     * Find zero or one WebsocketConnectionToken that matches the filter.
     * @param {WebsocketConnectionTokenFindUniqueArgs} args - Arguments to find a WebsocketConnectionToken
     * @example
     * // Get one WebsocketConnectionToken
     * const websocketConnectionToken = await prisma.websocketConnectionToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WebsocketConnectionTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WebsocketConnectionTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WebsocketConnectionToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WebsocketConnectionTokenFindUniqueOrThrowArgs} args - Arguments to find a WebsocketConnectionToken
     * @example
     * // Get one WebsocketConnectionToken
     * const websocketConnectionToken = await prisma.websocketConnectionToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WebsocketConnectionTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsocketConnectionTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WebsocketConnectionToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsocketConnectionTokenFindFirstArgs} args - Arguments to find a WebsocketConnectionToken
     * @example
     * // Get one WebsocketConnectionToken
     * const websocketConnectionToken = await prisma.websocketConnectionToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WebsocketConnectionTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsocketConnectionTokenFindFirstArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WebsocketConnectionToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsocketConnectionTokenFindFirstOrThrowArgs} args - Arguments to find a WebsocketConnectionToken
     * @example
     * // Get one WebsocketConnectionToken
     * const websocketConnectionToken = await prisma.websocketConnectionToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WebsocketConnectionTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsocketConnectionTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WebsocketConnectionTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsocketConnectionTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebsocketConnectionTokens
     * const websocketConnectionTokens = await prisma.websocketConnectionToken.findMany()
     * 
     * // Get first 10 WebsocketConnectionTokens
     * const websocketConnectionTokens = await prisma.websocketConnectionToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const websocketConnectionTokenWithIdOnly = await prisma.websocketConnectionToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WebsocketConnectionTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsocketConnectionTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WebsocketConnectionToken.
     * @param {WebsocketConnectionTokenCreateArgs} args - Arguments to create a WebsocketConnectionToken.
     * @example
     * // Create one WebsocketConnectionToken
     * const WebsocketConnectionToken = await prisma.websocketConnectionToken.create({
     *   data: {
     *     // ... data to create a WebsocketConnectionToken
     *   }
     * })
     * 
    **/
    create<T extends WebsocketConnectionTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WebsocketConnectionTokenCreateArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WebsocketConnectionTokens.
     *     @param {WebsocketConnectionTokenCreateManyArgs} args - Arguments to create many WebsocketConnectionTokens.
     *     @example
     *     // Create many WebsocketConnectionTokens
     *     const websocketConnectionToken = await prisma.websocketConnectionToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WebsocketConnectionTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsocketConnectionTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WebsocketConnectionToken.
     * @param {WebsocketConnectionTokenDeleteArgs} args - Arguments to delete one WebsocketConnectionToken.
     * @example
     * // Delete one WebsocketConnectionToken
     * const WebsocketConnectionToken = await prisma.websocketConnectionToken.delete({
     *   where: {
     *     // ... filter to delete one WebsocketConnectionToken
     *   }
     * })
     * 
    **/
    delete<T extends WebsocketConnectionTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WebsocketConnectionTokenDeleteArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WebsocketConnectionToken.
     * @param {WebsocketConnectionTokenUpdateArgs} args - Arguments to update one WebsocketConnectionToken.
     * @example
     * // Update one WebsocketConnectionToken
     * const websocketConnectionToken = await prisma.websocketConnectionToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WebsocketConnectionTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WebsocketConnectionTokenUpdateArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WebsocketConnectionTokens.
     * @param {WebsocketConnectionTokenDeleteManyArgs} args - Arguments to filter WebsocketConnectionTokens to delete.
     * @example
     * // Delete a few WebsocketConnectionTokens
     * const { count } = await prisma.websocketConnectionToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WebsocketConnectionTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WebsocketConnectionTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebsocketConnectionTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsocketConnectionTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebsocketConnectionTokens
     * const websocketConnectionToken = await prisma.websocketConnectionToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WebsocketConnectionTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WebsocketConnectionTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WebsocketConnectionToken.
     * @param {WebsocketConnectionTokenUpsertArgs} args - Arguments to update or create a WebsocketConnectionToken.
     * @example
     * // Update or create a WebsocketConnectionToken
     * const websocketConnectionToken = await prisma.websocketConnectionToken.upsert({
     *   create: {
     *     // ... data to create a WebsocketConnectionToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebsocketConnectionToken we want to update
     *   }
     * })
    **/
    upsert<T extends WebsocketConnectionTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WebsocketConnectionTokenUpsertArgs<ExtArgs>>
    ): Prisma__WebsocketConnectionTokenClient<$Result.GetResult<Prisma.$WebsocketConnectionTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WebsocketConnectionTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsocketConnectionTokenCountArgs} args - Arguments to filter WebsocketConnectionTokens to count.
     * @example
     * // Count the number of WebsocketConnectionTokens
     * const count = await prisma.websocketConnectionToken.count({
     *   where: {
     *     // ... the filter for the WebsocketConnectionTokens we want to count
     *   }
     * })
    **/
    count<T extends WebsocketConnectionTokenCountArgs>(
      args?: Subset<T, WebsocketConnectionTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebsocketConnectionTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebsocketConnectionToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsocketConnectionTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebsocketConnectionTokenAggregateArgs>(args: Subset<T, WebsocketConnectionTokenAggregateArgs>): Prisma.PrismaPromise<GetWebsocketConnectionTokenAggregateType<T>>

    /**
     * Group by WebsocketConnectionToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebsocketConnectionTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebsocketConnectionTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebsocketConnectionTokenGroupByArgs['orderBy'] }
        : { orderBy?: WebsocketConnectionTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebsocketConnectionTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebsocketConnectionTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebsocketConnectionToken model
   */
  readonly fields: WebsocketConnectionTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebsocketConnectionToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebsocketConnectionTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    display<T extends DisplayDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisplayDefaultArgs<ExtArgs>>): Prisma__DisplayClient<$Result.GetResult<Prisma.$DisplayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WebsocketConnectionToken model
   */ 
  interface WebsocketConnectionTokenFieldRefs {
    readonly id: FieldRef<"WebsocketConnectionToken", 'String'>
    readonly token: FieldRef<"WebsocketConnectionToken", 'String'>
    readonly displayId: FieldRef<"WebsocketConnectionToken", 'String'>
    readonly createdAt: FieldRef<"WebsocketConnectionToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WebsocketConnectionToken findUnique
   */
  export type WebsocketConnectionTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * Filter, which WebsocketConnectionToken to fetch.
     */
    where: WebsocketConnectionTokenWhereUniqueInput
  }

  /**
   * WebsocketConnectionToken findUniqueOrThrow
   */
  export type WebsocketConnectionTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * Filter, which WebsocketConnectionToken to fetch.
     */
    where: WebsocketConnectionTokenWhereUniqueInput
  }

  /**
   * WebsocketConnectionToken findFirst
   */
  export type WebsocketConnectionTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * Filter, which WebsocketConnectionToken to fetch.
     */
    where?: WebsocketConnectionTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsocketConnectionTokens to fetch.
     */
    orderBy?: WebsocketConnectionTokenOrderByWithRelationInput | WebsocketConnectionTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebsocketConnectionTokens.
     */
    cursor?: WebsocketConnectionTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsocketConnectionTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsocketConnectionTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebsocketConnectionTokens.
     */
    distinct?: WebsocketConnectionTokenScalarFieldEnum | WebsocketConnectionTokenScalarFieldEnum[]
  }

  /**
   * WebsocketConnectionToken findFirstOrThrow
   */
  export type WebsocketConnectionTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * Filter, which WebsocketConnectionToken to fetch.
     */
    where?: WebsocketConnectionTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsocketConnectionTokens to fetch.
     */
    orderBy?: WebsocketConnectionTokenOrderByWithRelationInput | WebsocketConnectionTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebsocketConnectionTokens.
     */
    cursor?: WebsocketConnectionTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsocketConnectionTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsocketConnectionTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebsocketConnectionTokens.
     */
    distinct?: WebsocketConnectionTokenScalarFieldEnum | WebsocketConnectionTokenScalarFieldEnum[]
  }

  /**
   * WebsocketConnectionToken findMany
   */
  export type WebsocketConnectionTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * Filter, which WebsocketConnectionTokens to fetch.
     */
    where?: WebsocketConnectionTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebsocketConnectionTokens to fetch.
     */
    orderBy?: WebsocketConnectionTokenOrderByWithRelationInput | WebsocketConnectionTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebsocketConnectionTokens.
     */
    cursor?: WebsocketConnectionTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebsocketConnectionTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebsocketConnectionTokens.
     */
    skip?: number
    distinct?: WebsocketConnectionTokenScalarFieldEnum | WebsocketConnectionTokenScalarFieldEnum[]
  }

  /**
   * WebsocketConnectionToken create
   */
  export type WebsocketConnectionTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a WebsocketConnectionToken.
     */
    data: XOR<WebsocketConnectionTokenCreateInput, WebsocketConnectionTokenUncheckedCreateInput>
  }

  /**
   * WebsocketConnectionToken createMany
   */
  export type WebsocketConnectionTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebsocketConnectionTokens.
     */
    data: WebsocketConnectionTokenCreateManyInput | WebsocketConnectionTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebsocketConnectionToken update
   */
  export type WebsocketConnectionTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a WebsocketConnectionToken.
     */
    data: XOR<WebsocketConnectionTokenUpdateInput, WebsocketConnectionTokenUncheckedUpdateInput>
    /**
     * Choose, which WebsocketConnectionToken to update.
     */
    where: WebsocketConnectionTokenWhereUniqueInput
  }

  /**
   * WebsocketConnectionToken updateMany
   */
  export type WebsocketConnectionTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebsocketConnectionTokens.
     */
    data: XOR<WebsocketConnectionTokenUpdateManyMutationInput, WebsocketConnectionTokenUncheckedUpdateManyInput>
    /**
     * Filter which WebsocketConnectionTokens to update
     */
    where?: WebsocketConnectionTokenWhereInput
  }

  /**
   * WebsocketConnectionToken upsert
   */
  export type WebsocketConnectionTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the WebsocketConnectionToken to update in case it exists.
     */
    where: WebsocketConnectionTokenWhereUniqueInput
    /**
     * In case the WebsocketConnectionToken found by the `where` argument doesn't exist, create a new WebsocketConnectionToken with this data.
     */
    create: XOR<WebsocketConnectionTokenCreateInput, WebsocketConnectionTokenUncheckedCreateInput>
    /**
     * In case the WebsocketConnectionToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebsocketConnectionTokenUpdateInput, WebsocketConnectionTokenUncheckedUpdateInput>
  }

  /**
   * WebsocketConnectionToken delete
   */
  export type WebsocketConnectionTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
    /**
     * Filter which WebsocketConnectionToken to delete.
     */
    where: WebsocketConnectionTokenWhereUniqueInput
  }

  /**
   * WebsocketConnectionToken deleteMany
   */
  export type WebsocketConnectionTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebsocketConnectionTokens to delete
     */
    where?: WebsocketConnectionTokenWhereInput
  }

  /**
   * WebsocketConnectionToken without action
   */
  export type WebsocketConnectionTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebsocketConnectionToken
     */
    select?: WebsocketConnectionTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebsocketConnectionTokenInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    licenseId: 'licenseId'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const ContentScalarFieldEnum: {
    id: 'id',
    uri: 'uri',
    name: 'name',
    description: 'description',
    thumbnailUri: 'thumbnailUri',
    mimetype: 'mimetype',
    bytes: 'bytes',
    createdAt: 'createdAt',
    userId: 'userId',
    organizationId: 'organizationId',
    styleId: 'styleId',
    directoryId: 'directoryId',
    hostedFileId: 'hostedFileId'
  };

  export type ContentScalarFieldEnum = (typeof ContentScalarFieldEnum)[keyof typeof ContentScalarFieldEnum]


  export const DisplayScalarFieldEnum: {
    id: 'id',
    name: 'name',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    styleId: 'styleId',
    settings: 'settings',
    deviceType: 'deviceType',
    currentDisplayContentPairId: 'currentDisplayContentPairId',
    lastSeenAt: 'lastSeenAt',
    width: 'width',
    height: 'height'
  };

  export type DisplayScalarFieldEnum = (typeof DisplayScalarFieldEnum)[keyof typeof DisplayScalarFieldEnum]


  export const PairingCodeScalarFieldEnum: {
    code: 'code',
    secret: 'secret',
    createdAt: 'createdAt',
    claimedAt: 'claimedAt',
    deviceType: 'deviceType',
    displayId: 'displayId'
  };

  export type PairingCodeScalarFieldEnum = (typeof PairingCodeScalarFieldEnum)[keyof typeof PairingCodeScalarFieldEnum]


  export const DisplayContentPairScalarFieldEnum: {
    id: 'id',
    displayId: 'displayId',
    contentId: 'contentId',
    collectionId: 'collectionId',
    styleId: 'styleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DisplayContentPairScalarFieldEnum = (typeof DisplayContentPairScalarFieldEnum)[keyof typeof DisplayContentPairScalarFieldEnum]


  export const StyleScalarFieldEnum: {
    id: 'id',
    size: 'size',
    posX: 'posX',
    posY: 'posY',
    rotation: 'rotation',
    css: 'css'
  };

  export type StyleScalarFieldEnum = (typeof StyleScalarFieldEnum)[keyof typeof StyleScalarFieldEnum]


  export const PlaylistScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    displayId: 'displayId'
  };

  export type PlaylistScalarFieldEnum = (typeof PlaylistScalarFieldEnum)[keyof typeof PlaylistScalarFieldEnum]


  export const PlaylistItemScalarFieldEnum: {
    id: 'id',
    playlistId: 'playlistId',
    contentId: 'contentId',
    displayContentPairId: 'displayContentPairId',
    order: 'order',
    duration: 'duration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlaylistItemScalarFieldEnum = (typeof PlaylistItemScalarFieldEnum)[keyof typeof PlaylistItemScalarFieldEnum]


  export const HostedFileScalarFieldEnum: {
    id: 'id',
    objectKey: 'objectKey',
    userId: 'userId',
    organizationId: 'organizationId',
    bucketName: 'bucketName',
    mimetype: 'mimetype',
    bytes: 'bytes',
    region: 'region',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type HostedFileScalarFieldEnum = (typeof HostedFileScalarFieldEnum)[keyof typeof HostedFileScalarFieldEnum]


  export const ExhibitScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExhibitScalarFieldEnum = (typeof ExhibitScalarFieldEnum)[keyof typeof ExhibitScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const DisplayRenewalScalarFieldEnum: {
    id: 'id',
    secret: 'secret',
    displayId: 'displayId',
    createdAt: 'createdAt',
    validAfter: 'validAfter'
  };

  export type DisplayRenewalScalarFieldEnum = (typeof DisplayRenewalScalarFieldEnum)[keyof typeof DisplayRenewalScalarFieldEnum]


  export const LicenseScalarFieldEnum: {
    id: 'id',
    type: 'type',
    purchasedAt: 'purchasedAt',
    updatedAt: 'updatedAt',
    expiresAt: 'expiresAt',
    priceMonthly: 'priceMonthly',
    maxUsers: 'maxUsers',
    maxDisplays: 'maxDisplays',
    maxStorageBytes: 'maxStorageBytes'
  };

  export type LicenseScalarFieldEnum = (typeof LicenseScalarFieldEnum)[keyof typeof LicenseScalarFieldEnum]


  export const UserInviteScalarFieldEnum: {
    id: 'id',
    token: 'token',
    email: 'email',
    name: 'name',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    acceptedAt: 'acceptedAt',
    inviterId: 'inviterId'
  };

  export type UserInviteScalarFieldEnum = (typeof UserInviteScalarFieldEnum)[keyof typeof UserInviteScalarFieldEnum]


  export const WebsocketConnectionTokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    displayId: 'displayId',
    createdAt: 'createdAt'
  };

  export type WebsocketConnectionTokenScalarFieldEnum = (typeof WebsocketConnectionTokenScalarFieldEnum)[keyof typeof WebsocketConnectionTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DeviceType'
   */
  export type EnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType'>
    


  /**
   * Reference to a field of type 'DeviceType[]'
   */
  export type ListEnumDeviceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DeviceType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'HostedFileUploadStatus'
   */
  export type EnumHostedFileUploadStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HostedFileUploadStatus'>
    


  /**
   * Reference to a field of type 'HostedFileUploadStatus[]'
   */
  export type ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HostedFileUploadStatus[]'>
    


  /**
   * Reference to a field of type 'LicenseType'
   */
  export type EnumLicenseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LicenseType'>
    


  /**
   * Reference to a field of type 'LicenseType[]'
   */
  export type ListEnumLicenseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LicenseType[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    organizationId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    content?: ContentListRelationFilter
    playlists?: PlaylistListRelationFilter
    hostedFiles?: HostedFileListRelationFilter
    roles?: RoleListRelationFilter
    userInvites?: UserInviteListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    content?: ContentOrderByRelationAggregateInput
    playlists?: PlaylistOrderByRelationAggregateInput
    hostedFiles?: HostedFileOrderByRelationAggregateInput
    roles?: RoleOrderByRelationAggregateInput
    userInvites?: UserInviteOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    organizationId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    content?: ContentListRelationFilter
    playlists?: PlaylistListRelationFilter
    hostedFiles?: HostedFileListRelationFilter
    roles?: RoleListRelationFilter
    userInvites?: UserInviteListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    organizationId?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    licenseId?: StringFilter<"Organization"> | string
    users?: UserListRelationFilter
    content?: ContentListRelationFilter
    displays?: DisplayListRelationFilter
    hostedFiles?: HostedFileListRelationFilter
    license?: XOR<LicenseRelationFilter, LicenseWhereInput>
    userInvites?: UserInviteListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    licenseId?: SortOrder
    users?: UserOrderByRelationAggregateInput
    content?: ContentOrderByRelationAggregateInput
    displays?: DisplayOrderByRelationAggregateInput
    hostedFiles?: HostedFileOrderByRelationAggregateInput
    license?: LicenseOrderByWithRelationInput
    userInvites?: UserInviteOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    licenseId?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    users?: UserListRelationFilter
    content?: ContentListRelationFilter
    displays?: DisplayListRelationFilter
    hostedFiles?: HostedFileListRelationFilter
    license?: XOR<LicenseRelationFilter, LicenseWhereInput>
    userInvites?: UserInviteListRelationFilter
  }, "id" | "name" | "licenseId">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    licenseId?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    licenseId?: StringWithAggregatesFilter<"Organization"> | string
  }

  export type ContentWhereInput = {
    AND?: ContentWhereInput | ContentWhereInput[]
    OR?: ContentWhereInput[]
    NOT?: ContentWhereInput | ContentWhereInput[]
    id?: StringFilter<"Content"> | string
    uri?: StringFilter<"Content"> | string
    name?: StringNullableFilter<"Content"> | string | null
    description?: StringNullableFilter<"Content"> | string | null
    thumbnailUri?: StringNullableFilter<"Content"> | string | null
    mimetype?: StringFilter<"Content"> | string
    bytes?: StringFilter<"Content"> | string
    createdAt?: DateTimeFilter<"Content"> | Date | string
    userId?: StringFilter<"Content"> | string
    organizationId?: StringFilter<"Content"> | string
    styleId?: StringNullableFilter<"Content"> | string | null
    directoryId?: StringNullableFilter<"Content"> | string | null
    hostedFileId?: StringNullableFilter<"Content"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    hostedFile?: XOR<HostedFileNullableRelationFilter, HostedFileWhereInput> | null
    displayContentPairs?: DisplayContentPairListRelationFilter
    playlistItems?: PlaylistItemListRelationFilter
    style?: XOR<StyleNullableRelationFilter, StyleWhereInput> | null
    exhibits?: ExhibitListRelationFilter
  }

  export type ContentOrderByWithRelationInput = {
    id?: SortOrder
    uri?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    thumbnailUri?: SortOrderInput | SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    styleId?: SortOrderInput | SortOrder
    directoryId?: SortOrderInput | SortOrder
    hostedFileId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    hostedFile?: HostedFileOrderByWithRelationInput
    displayContentPairs?: DisplayContentPairOrderByRelationAggregateInput
    playlistItems?: PlaylistItemOrderByRelationAggregateInput
    style?: StyleOrderByWithRelationInput
    exhibits?: ExhibitOrderByRelationAggregateInput
  }

  export type ContentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContentWhereInput | ContentWhereInput[]
    OR?: ContentWhereInput[]
    NOT?: ContentWhereInput | ContentWhereInput[]
    uri?: StringFilter<"Content"> | string
    name?: StringNullableFilter<"Content"> | string | null
    description?: StringNullableFilter<"Content"> | string | null
    thumbnailUri?: StringNullableFilter<"Content"> | string | null
    mimetype?: StringFilter<"Content"> | string
    bytes?: StringFilter<"Content"> | string
    createdAt?: DateTimeFilter<"Content"> | Date | string
    userId?: StringFilter<"Content"> | string
    organizationId?: StringFilter<"Content"> | string
    styleId?: StringNullableFilter<"Content"> | string | null
    directoryId?: StringNullableFilter<"Content"> | string | null
    hostedFileId?: StringNullableFilter<"Content"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    hostedFile?: XOR<HostedFileNullableRelationFilter, HostedFileWhereInput> | null
    displayContentPairs?: DisplayContentPairListRelationFilter
    playlistItems?: PlaylistItemListRelationFilter
    style?: XOR<StyleNullableRelationFilter, StyleWhereInput> | null
    exhibits?: ExhibitListRelationFilter
  }, "id">

  export type ContentOrderByWithAggregationInput = {
    id?: SortOrder
    uri?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    thumbnailUri?: SortOrderInput | SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    styleId?: SortOrderInput | SortOrder
    directoryId?: SortOrderInput | SortOrder
    hostedFileId?: SortOrderInput | SortOrder
    _count?: ContentCountOrderByAggregateInput
    _max?: ContentMaxOrderByAggregateInput
    _min?: ContentMinOrderByAggregateInput
  }

  export type ContentScalarWhereWithAggregatesInput = {
    AND?: ContentScalarWhereWithAggregatesInput | ContentScalarWhereWithAggregatesInput[]
    OR?: ContentScalarWhereWithAggregatesInput[]
    NOT?: ContentScalarWhereWithAggregatesInput | ContentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Content"> | string
    uri?: StringWithAggregatesFilter<"Content"> | string
    name?: StringNullableWithAggregatesFilter<"Content"> | string | null
    description?: StringNullableWithAggregatesFilter<"Content"> | string | null
    thumbnailUri?: StringNullableWithAggregatesFilter<"Content"> | string | null
    mimetype?: StringWithAggregatesFilter<"Content"> | string
    bytes?: StringWithAggregatesFilter<"Content"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Content"> | Date | string
    userId?: StringWithAggregatesFilter<"Content"> | string
    organizationId?: StringWithAggregatesFilter<"Content"> | string
    styleId?: StringNullableWithAggregatesFilter<"Content"> | string | null
    directoryId?: StringNullableWithAggregatesFilter<"Content"> | string | null
    hostedFileId?: StringNullableWithAggregatesFilter<"Content"> | string | null
  }

  export type DisplayWhereInput = {
    AND?: DisplayWhereInput | DisplayWhereInput[]
    OR?: DisplayWhereInput[]
    NOT?: DisplayWhereInput | DisplayWhereInput[]
    id?: StringFilter<"Display"> | string
    name?: StringFilter<"Display"> | string
    organizationId?: StringFilter<"Display"> | string
    createdAt?: DateTimeFilter<"Display"> | Date | string
    styleId?: StringNullableFilter<"Display"> | string | null
    settings?: JsonFilter<"Display">
    deviceType?: EnumDeviceTypeFilter<"Display"> | $Enums.DeviceType
    currentDisplayContentPairId?: StringNullableFilter<"Display"> | string | null
    lastSeenAt?: DateTimeFilter<"Display"> | Date | string
    width?: IntFilter<"Display"> | number
    height?: IntFilter<"Display"> | number
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    style?: XOR<StyleNullableRelationFilter, StyleWhereInput> | null
    displayContentPairs?: DisplayContentPairListRelationFilter
    currentDisplayContentPair?: XOR<DisplayContentPairNullableRelationFilter, DisplayContentPairWhereInput> | null
    playlists?: PlaylistListRelationFilter
    pairingCodes?: PairingCodeListRelationFilter
    displayRenewal?: XOR<DisplayRenewalNullableRelationFilter, DisplayRenewalWhereInput> | null
    websocketConnectionToken?: XOR<WebsocketConnectionTokenNullableRelationFilter, WebsocketConnectionTokenWhereInput> | null
  }

  export type DisplayOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    styleId?: SortOrderInput | SortOrder
    settings?: SortOrder
    deviceType?: SortOrder
    currentDisplayContentPairId?: SortOrderInput | SortOrder
    lastSeenAt?: SortOrder
    width?: SortOrder
    height?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    style?: StyleOrderByWithRelationInput
    displayContentPairs?: DisplayContentPairOrderByRelationAggregateInput
    currentDisplayContentPair?: DisplayContentPairOrderByWithRelationInput
    playlists?: PlaylistOrderByRelationAggregateInput
    pairingCodes?: PairingCodeOrderByRelationAggregateInput
    displayRenewal?: DisplayRenewalOrderByWithRelationInput
    websocketConnectionToken?: WebsocketConnectionTokenOrderByWithRelationInput
  }

  export type DisplayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    styleId?: string
    currentDisplayContentPairId?: string
    AND?: DisplayWhereInput | DisplayWhereInput[]
    OR?: DisplayWhereInput[]
    NOT?: DisplayWhereInput | DisplayWhereInput[]
    name?: StringFilter<"Display"> | string
    organizationId?: StringFilter<"Display"> | string
    createdAt?: DateTimeFilter<"Display"> | Date | string
    settings?: JsonFilter<"Display">
    deviceType?: EnumDeviceTypeFilter<"Display"> | $Enums.DeviceType
    lastSeenAt?: DateTimeFilter<"Display"> | Date | string
    width?: IntFilter<"Display"> | number
    height?: IntFilter<"Display"> | number
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    style?: XOR<StyleNullableRelationFilter, StyleWhereInput> | null
    displayContentPairs?: DisplayContentPairListRelationFilter
    currentDisplayContentPair?: XOR<DisplayContentPairNullableRelationFilter, DisplayContentPairWhereInput> | null
    playlists?: PlaylistListRelationFilter
    pairingCodes?: PairingCodeListRelationFilter
    displayRenewal?: XOR<DisplayRenewalNullableRelationFilter, DisplayRenewalWhereInput> | null
    websocketConnectionToken?: XOR<WebsocketConnectionTokenNullableRelationFilter, WebsocketConnectionTokenWhereInput> | null
  }, "id" | "styleId" | "currentDisplayContentPairId">

  export type DisplayOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    styleId?: SortOrderInput | SortOrder
    settings?: SortOrder
    deviceType?: SortOrder
    currentDisplayContentPairId?: SortOrderInput | SortOrder
    lastSeenAt?: SortOrder
    width?: SortOrder
    height?: SortOrder
    _count?: DisplayCountOrderByAggregateInput
    _avg?: DisplayAvgOrderByAggregateInput
    _max?: DisplayMaxOrderByAggregateInput
    _min?: DisplayMinOrderByAggregateInput
    _sum?: DisplaySumOrderByAggregateInput
  }

  export type DisplayScalarWhereWithAggregatesInput = {
    AND?: DisplayScalarWhereWithAggregatesInput | DisplayScalarWhereWithAggregatesInput[]
    OR?: DisplayScalarWhereWithAggregatesInput[]
    NOT?: DisplayScalarWhereWithAggregatesInput | DisplayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Display"> | string
    name?: StringWithAggregatesFilter<"Display"> | string
    organizationId?: StringWithAggregatesFilter<"Display"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Display"> | Date | string
    styleId?: StringNullableWithAggregatesFilter<"Display"> | string | null
    settings?: JsonWithAggregatesFilter<"Display">
    deviceType?: EnumDeviceTypeWithAggregatesFilter<"Display"> | $Enums.DeviceType
    currentDisplayContentPairId?: StringNullableWithAggregatesFilter<"Display"> | string | null
    lastSeenAt?: DateTimeWithAggregatesFilter<"Display"> | Date | string
    width?: IntWithAggregatesFilter<"Display"> | number
    height?: IntWithAggregatesFilter<"Display"> | number
  }

  export type PairingCodeWhereInput = {
    AND?: PairingCodeWhereInput | PairingCodeWhereInput[]
    OR?: PairingCodeWhereInput[]
    NOT?: PairingCodeWhereInput | PairingCodeWhereInput[]
    code?: StringFilter<"PairingCode"> | string
    secret?: StringFilter<"PairingCode"> | string
    createdAt?: DateTimeFilter<"PairingCode"> | Date | string
    claimedAt?: DateTimeNullableFilter<"PairingCode"> | Date | string | null
    deviceType?: EnumDeviceTypeFilter<"PairingCode"> | $Enums.DeviceType
    displayId?: StringNullableFilter<"PairingCode"> | string | null
    display?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
  }

  export type PairingCodeOrderByWithRelationInput = {
    code?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    deviceType?: SortOrder
    displayId?: SortOrderInput | SortOrder
    display?: DisplayOrderByWithRelationInput
  }

  export type PairingCodeWhereUniqueInput = Prisma.AtLeast<{
    code?: string
    AND?: PairingCodeWhereInput | PairingCodeWhereInput[]
    OR?: PairingCodeWhereInput[]
    NOT?: PairingCodeWhereInput | PairingCodeWhereInput[]
    secret?: StringFilter<"PairingCode"> | string
    createdAt?: DateTimeFilter<"PairingCode"> | Date | string
    claimedAt?: DateTimeNullableFilter<"PairingCode"> | Date | string | null
    deviceType?: EnumDeviceTypeFilter<"PairingCode"> | $Enums.DeviceType
    displayId?: StringNullableFilter<"PairingCode"> | string | null
    display?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
  }, "code">

  export type PairingCodeOrderByWithAggregationInput = {
    code?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    claimedAt?: SortOrderInput | SortOrder
    deviceType?: SortOrder
    displayId?: SortOrderInput | SortOrder
    _count?: PairingCodeCountOrderByAggregateInput
    _max?: PairingCodeMaxOrderByAggregateInput
    _min?: PairingCodeMinOrderByAggregateInput
  }

  export type PairingCodeScalarWhereWithAggregatesInput = {
    AND?: PairingCodeScalarWhereWithAggregatesInput | PairingCodeScalarWhereWithAggregatesInput[]
    OR?: PairingCodeScalarWhereWithAggregatesInput[]
    NOT?: PairingCodeScalarWhereWithAggregatesInput | PairingCodeScalarWhereWithAggregatesInput[]
    code?: StringWithAggregatesFilter<"PairingCode"> | string
    secret?: StringWithAggregatesFilter<"PairingCode"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PairingCode"> | Date | string
    claimedAt?: DateTimeNullableWithAggregatesFilter<"PairingCode"> | Date | string | null
    deviceType?: EnumDeviceTypeWithAggregatesFilter<"PairingCode"> | $Enums.DeviceType
    displayId?: StringNullableWithAggregatesFilter<"PairingCode"> | string | null
  }

  export type DisplayContentPairWhereInput = {
    AND?: DisplayContentPairWhereInput | DisplayContentPairWhereInput[]
    OR?: DisplayContentPairWhereInput[]
    NOT?: DisplayContentPairWhereInput | DisplayContentPairWhereInput[]
    id?: StringFilter<"DisplayContentPair"> | string
    displayId?: StringFilter<"DisplayContentPair"> | string
    contentId?: StringFilter<"DisplayContentPair"> | string
    collectionId?: StringNullableFilter<"DisplayContentPair"> | string | null
    styleId?: StringNullableFilter<"DisplayContentPair"> | string | null
    createdAt?: DateTimeFilter<"DisplayContentPair"> | Date | string
    updatedAt?: DateTimeFilter<"DisplayContentPair"> | Date | string
    display?: XOR<DisplayRelationFilter, DisplayWhereInput>
    currentDisplay?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
    content?: XOR<ContentRelationFilter, ContentWhereInput>
    style?: XOR<StyleNullableRelationFilter, StyleWhereInput> | null
    playlistItems?: PlaylistItemListRelationFilter
  }

  export type DisplayContentPairOrderByWithRelationInput = {
    id?: SortOrder
    displayId?: SortOrder
    contentId?: SortOrder
    collectionId?: SortOrderInput | SortOrder
    styleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    display?: DisplayOrderByWithRelationInput
    currentDisplay?: DisplayOrderByWithRelationInput
    content?: ContentOrderByWithRelationInput
    style?: StyleOrderByWithRelationInput
    playlistItems?: PlaylistItemOrderByRelationAggregateInput
  }

  export type DisplayContentPairWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DisplayContentPairWhereInput | DisplayContentPairWhereInput[]
    OR?: DisplayContentPairWhereInput[]
    NOT?: DisplayContentPairWhereInput | DisplayContentPairWhereInput[]
    displayId?: StringFilter<"DisplayContentPair"> | string
    contentId?: StringFilter<"DisplayContentPair"> | string
    collectionId?: StringNullableFilter<"DisplayContentPair"> | string | null
    styleId?: StringNullableFilter<"DisplayContentPair"> | string | null
    createdAt?: DateTimeFilter<"DisplayContentPair"> | Date | string
    updatedAt?: DateTimeFilter<"DisplayContentPair"> | Date | string
    display?: XOR<DisplayRelationFilter, DisplayWhereInput>
    currentDisplay?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
    content?: XOR<ContentRelationFilter, ContentWhereInput>
    style?: XOR<StyleNullableRelationFilter, StyleWhereInput> | null
    playlistItems?: PlaylistItemListRelationFilter
  }, "id">

  export type DisplayContentPairOrderByWithAggregationInput = {
    id?: SortOrder
    displayId?: SortOrder
    contentId?: SortOrder
    collectionId?: SortOrderInput | SortOrder
    styleId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DisplayContentPairCountOrderByAggregateInput
    _max?: DisplayContentPairMaxOrderByAggregateInput
    _min?: DisplayContentPairMinOrderByAggregateInput
  }

  export type DisplayContentPairScalarWhereWithAggregatesInput = {
    AND?: DisplayContentPairScalarWhereWithAggregatesInput | DisplayContentPairScalarWhereWithAggregatesInput[]
    OR?: DisplayContentPairScalarWhereWithAggregatesInput[]
    NOT?: DisplayContentPairScalarWhereWithAggregatesInput | DisplayContentPairScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DisplayContentPair"> | string
    displayId?: StringWithAggregatesFilter<"DisplayContentPair"> | string
    contentId?: StringWithAggregatesFilter<"DisplayContentPair"> | string
    collectionId?: StringNullableWithAggregatesFilter<"DisplayContentPair"> | string | null
    styleId?: StringNullableWithAggregatesFilter<"DisplayContentPair"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DisplayContentPair"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DisplayContentPair"> | Date | string
  }

  export type StyleWhereInput = {
    AND?: StyleWhereInput | StyleWhereInput[]
    OR?: StyleWhereInput[]
    NOT?: StyleWhereInput | StyleWhereInput[]
    id?: StringFilter<"Style"> | string
    size?: FloatFilter<"Style"> | number
    posX?: FloatFilter<"Style"> | number
    posY?: FloatFilter<"Style"> | number
    rotation?: FloatFilter<"Style"> | number
    css?: JsonFilter<"Style">
    content?: ContentListRelationFilter
    display?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
    displayContentPairs?: DisplayContentPairListRelationFilter
  }

  export type StyleOrderByWithRelationInput = {
    id?: SortOrder
    size?: SortOrder
    posX?: SortOrder
    posY?: SortOrder
    rotation?: SortOrder
    css?: SortOrder
    content?: ContentOrderByRelationAggregateInput
    display?: DisplayOrderByWithRelationInput
    displayContentPairs?: DisplayContentPairOrderByRelationAggregateInput
  }

  export type StyleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StyleWhereInput | StyleWhereInput[]
    OR?: StyleWhereInput[]
    NOT?: StyleWhereInput | StyleWhereInput[]
    size?: FloatFilter<"Style"> | number
    posX?: FloatFilter<"Style"> | number
    posY?: FloatFilter<"Style"> | number
    rotation?: FloatFilter<"Style"> | number
    css?: JsonFilter<"Style">
    content?: ContentListRelationFilter
    display?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
    displayContentPairs?: DisplayContentPairListRelationFilter
  }, "id">

  export type StyleOrderByWithAggregationInput = {
    id?: SortOrder
    size?: SortOrder
    posX?: SortOrder
    posY?: SortOrder
    rotation?: SortOrder
    css?: SortOrder
    _count?: StyleCountOrderByAggregateInput
    _avg?: StyleAvgOrderByAggregateInput
    _max?: StyleMaxOrderByAggregateInput
    _min?: StyleMinOrderByAggregateInput
    _sum?: StyleSumOrderByAggregateInput
  }

  export type StyleScalarWhereWithAggregatesInput = {
    AND?: StyleScalarWhereWithAggregatesInput | StyleScalarWhereWithAggregatesInput[]
    OR?: StyleScalarWhereWithAggregatesInput[]
    NOT?: StyleScalarWhereWithAggregatesInput | StyleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Style"> | string
    size?: FloatWithAggregatesFilter<"Style"> | number
    posX?: FloatWithAggregatesFilter<"Style"> | number
    posY?: FloatWithAggregatesFilter<"Style"> | number
    rotation?: FloatWithAggregatesFilter<"Style"> | number
    css?: JsonWithAggregatesFilter<"Style">
  }

  export type PlaylistWhereInput = {
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    id?: StringFilter<"Playlist"> | string
    name?: StringFilter<"Playlist"> | string
    description?: StringNullableFilter<"Playlist"> | string | null
    userId?: StringFilter<"Playlist"> | string
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
    displayId?: StringNullableFilter<"Playlist"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    playlistItem?: PlaylistItemListRelationFilter
    display?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
  }

  export type PlaylistOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    playlistItem?: PlaylistItemOrderByRelationAggregateInput
    display?: DisplayOrderByWithRelationInput
  }

  export type PlaylistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name_userId?: PlaylistNameUserIdCompoundUniqueInput
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    name?: StringFilter<"Playlist"> | string
    description?: StringNullableFilter<"Playlist"> | string | null
    userId?: StringFilter<"Playlist"> | string
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
    displayId?: StringNullableFilter<"Playlist"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    playlistItem?: PlaylistItemListRelationFilter
    display?: XOR<DisplayNullableRelationFilter, DisplayWhereInput> | null
  }, "id" | "name_userId">

  export type PlaylistOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayId?: SortOrderInput | SortOrder
    _count?: PlaylistCountOrderByAggregateInput
    _max?: PlaylistMaxOrderByAggregateInput
    _min?: PlaylistMinOrderByAggregateInput
  }

  export type PlaylistScalarWhereWithAggregatesInput = {
    AND?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    OR?: PlaylistScalarWhereWithAggregatesInput[]
    NOT?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Playlist"> | string
    name?: StringWithAggregatesFilter<"Playlist"> | string
    description?: StringNullableWithAggregatesFilter<"Playlist"> | string | null
    userId?: StringWithAggregatesFilter<"Playlist"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Playlist"> | Date | string
    displayId?: StringNullableWithAggregatesFilter<"Playlist"> | string | null
  }

  export type PlaylistItemWhereInput = {
    AND?: PlaylistItemWhereInput | PlaylistItemWhereInput[]
    OR?: PlaylistItemWhereInput[]
    NOT?: PlaylistItemWhereInput | PlaylistItemWhereInput[]
    id?: StringFilter<"PlaylistItem"> | string
    playlistId?: StringFilter<"PlaylistItem"> | string
    contentId?: StringFilter<"PlaylistItem"> | string
    displayContentPairId?: StringFilter<"PlaylistItem"> | string
    order?: IntFilter<"PlaylistItem"> | number
    duration?: IntFilter<"PlaylistItem"> | number
    createdAt?: DateTimeFilter<"PlaylistItem"> | Date | string
    updatedAt?: DateTimeFilter<"PlaylistItem"> | Date | string
    playlist?: XOR<PlaylistRelationFilter, PlaylistWhereInput>
    content?: XOR<ContentRelationFilter, ContentWhereInput>
    displayContentPair?: XOR<DisplayContentPairRelationFilter, DisplayContentPairWhereInput>
  }

  export type PlaylistItemOrderByWithRelationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    contentId?: SortOrder
    displayContentPairId?: SortOrder
    order?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playlist?: PlaylistOrderByWithRelationInput
    content?: ContentOrderByWithRelationInput
    displayContentPair?: DisplayContentPairOrderByWithRelationInput
  }

  export type PlaylistItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlaylistItemWhereInput | PlaylistItemWhereInput[]
    OR?: PlaylistItemWhereInput[]
    NOT?: PlaylistItemWhereInput | PlaylistItemWhereInput[]
    playlistId?: StringFilter<"PlaylistItem"> | string
    contentId?: StringFilter<"PlaylistItem"> | string
    displayContentPairId?: StringFilter<"PlaylistItem"> | string
    order?: IntFilter<"PlaylistItem"> | number
    duration?: IntFilter<"PlaylistItem"> | number
    createdAt?: DateTimeFilter<"PlaylistItem"> | Date | string
    updatedAt?: DateTimeFilter<"PlaylistItem"> | Date | string
    playlist?: XOR<PlaylistRelationFilter, PlaylistWhereInput>
    content?: XOR<ContentRelationFilter, ContentWhereInput>
    displayContentPair?: XOR<DisplayContentPairRelationFilter, DisplayContentPairWhereInput>
  }, "id">

  export type PlaylistItemOrderByWithAggregationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    contentId?: SortOrder
    displayContentPairId?: SortOrder
    order?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlaylistItemCountOrderByAggregateInput
    _avg?: PlaylistItemAvgOrderByAggregateInput
    _max?: PlaylistItemMaxOrderByAggregateInput
    _min?: PlaylistItemMinOrderByAggregateInput
    _sum?: PlaylistItemSumOrderByAggregateInput
  }

  export type PlaylistItemScalarWhereWithAggregatesInput = {
    AND?: PlaylistItemScalarWhereWithAggregatesInput | PlaylistItemScalarWhereWithAggregatesInput[]
    OR?: PlaylistItemScalarWhereWithAggregatesInput[]
    NOT?: PlaylistItemScalarWhereWithAggregatesInput | PlaylistItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlaylistItem"> | string
    playlistId?: StringWithAggregatesFilter<"PlaylistItem"> | string
    contentId?: StringWithAggregatesFilter<"PlaylistItem"> | string
    displayContentPairId?: StringWithAggregatesFilter<"PlaylistItem"> | string
    order?: IntWithAggregatesFilter<"PlaylistItem"> | number
    duration?: IntWithAggregatesFilter<"PlaylistItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PlaylistItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PlaylistItem"> | Date | string
  }

  export type HostedFileWhereInput = {
    AND?: HostedFileWhereInput | HostedFileWhereInput[]
    OR?: HostedFileWhereInput[]
    NOT?: HostedFileWhereInput | HostedFileWhereInput[]
    id?: StringFilter<"HostedFile"> | string
    objectKey?: StringFilter<"HostedFile"> | string
    userId?: StringFilter<"HostedFile"> | string
    organizationId?: StringFilter<"HostedFile"> | string
    bucketName?: StringFilter<"HostedFile"> | string
    mimetype?: StringFilter<"HostedFile"> | string
    bytes?: StringFilter<"HostedFile"> | string
    region?: StringFilter<"HostedFile"> | string
    status?: EnumHostedFileUploadStatusFilter<"HostedFile"> | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFilter<"HostedFile"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    content?: ContentListRelationFilter
  }

  export type HostedFileOrderByWithRelationInput = {
    id?: SortOrder
    objectKey?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    bucketName?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    region?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    content?: ContentOrderByRelationAggregateInput
  }

  export type HostedFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    objectKey?: string
    AND?: HostedFileWhereInput | HostedFileWhereInput[]
    OR?: HostedFileWhereInput[]
    NOT?: HostedFileWhereInput | HostedFileWhereInput[]
    userId?: StringFilter<"HostedFile"> | string
    organizationId?: StringFilter<"HostedFile"> | string
    bucketName?: StringFilter<"HostedFile"> | string
    mimetype?: StringFilter<"HostedFile"> | string
    bytes?: StringFilter<"HostedFile"> | string
    region?: StringFilter<"HostedFile"> | string
    status?: EnumHostedFileUploadStatusFilter<"HostedFile"> | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFilter<"HostedFile"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    content?: ContentListRelationFilter
  }, "id" | "objectKey">

  export type HostedFileOrderByWithAggregationInput = {
    id?: SortOrder
    objectKey?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    bucketName?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    region?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: HostedFileCountOrderByAggregateInput
    _max?: HostedFileMaxOrderByAggregateInput
    _min?: HostedFileMinOrderByAggregateInput
  }

  export type HostedFileScalarWhereWithAggregatesInput = {
    AND?: HostedFileScalarWhereWithAggregatesInput | HostedFileScalarWhereWithAggregatesInput[]
    OR?: HostedFileScalarWhereWithAggregatesInput[]
    NOT?: HostedFileScalarWhereWithAggregatesInput | HostedFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HostedFile"> | string
    objectKey?: StringWithAggregatesFilter<"HostedFile"> | string
    userId?: StringWithAggregatesFilter<"HostedFile"> | string
    organizationId?: StringWithAggregatesFilter<"HostedFile"> | string
    bucketName?: StringWithAggregatesFilter<"HostedFile"> | string
    mimetype?: StringWithAggregatesFilter<"HostedFile"> | string
    bytes?: StringWithAggregatesFilter<"HostedFile"> | string
    region?: StringWithAggregatesFilter<"HostedFile"> | string
    status?: EnumHostedFileUploadStatusWithAggregatesFilter<"HostedFile"> | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeWithAggregatesFilter<"HostedFile"> | Date | string
  }

  export type ExhibitWhereInput = {
    AND?: ExhibitWhereInput | ExhibitWhereInput[]
    OR?: ExhibitWhereInput[]
    NOT?: ExhibitWhereInput | ExhibitWhereInput[]
    id?: StringFilter<"Exhibit"> | string
    name?: StringFilter<"Exhibit"> | string
    description?: StringNullableFilter<"Exhibit"> | string | null
    createdAt?: DateTimeFilter<"Exhibit"> | Date | string
    updatedAt?: DateTimeFilter<"Exhibit"> | Date | string
    content?: ContentListRelationFilter
  }

  export type ExhibitOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    content?: ContentOrderByRelationAggregateInput
  }

  export type ExhibitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExhibitWhereInput | ExhibitWhereInput[]
    OR?: ExhibitWhereInput[]
    NOT?: ExhibitWhereInput | ExhibitWhereInput[]
    name?: StringFilter<"Exhibit"> | string
    description?: StringNullableFilter<"Exhibit"> | string | null
    createdAt?: DateTimeFilter<"Exhibit"> | Date | string
    updatedAt?: DateTimeFilter<"Exhibit"> | Date | string
    content?: ContentListRelationFilter
  }, "id">

  export type ExhibitOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExhibitCountOrderByAggregateInput
    _max?: ExhibitMaxOrderByAggregateInput
    _min?: ExhibitMinOrderByAggregateInput
  }

  export type ExhibitScalarWhereWithAggregatesInput = {
    AND?: ExhibitScalarWhereWithAggregatesInput | ExhibitScalarWhereWithAggregatesInput[]
    OR?: ExhibitScalarWhereWithAggregatesInput[]
    NOT?: ExhibitScalarWhereWithAggregatesInput | ExhibitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exhibit"> | string
    name?: StringWithAggregatesFilter<"Exhibit"> | string
    description?: StringNullableWithAggregatesFilter<"Exhibit"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Exhibit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Exhibit"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    users?: UserListRelationFilter
    userInvites?: UserInviteListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    users?: UserOrderByRelationAggregateInput
    userInvites?: UserInviteOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringNullableFilter<"Role"> | string | null
    users?: UserListRelationFilter
    userInvites?: UserInviteListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
  }

  export type DisplayRenewalWhereInput = {
    AND?: DisplayRenewalWhereInput | DisplayRenewalWhereInput[]
    OR?: DisplayRenewalWhereInput[]
    NOT?: DisplayRenewalWhereInput | DisplayRenewalWhereInput[]
    id?: StringFilter<"DisplayRenewal"> | string
    secret?: StringFilter<"DisplayRenewal"> | string
    displayId?: StringFilter<"DisplayRenewal"> | string
    createdAt?: DateTimeFilter<"DisplayRenewal"> | Date | string
    validAfter?: DateTimeFilter<"DisplayRenewal"> | Date | string
    display?: XOR<DisplayRelationFilter, DisplayWhereInput>
  }

  export type DisplayRenewalOrderByWithRelationInput = {
    id?: SortOrder
    secret?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
    validAfter?: SortOrder
    display?: DisplayOrderByWithRelationInput
  }

  export type DisplayRenewalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    displayId?: string
    AND?: DisplayRenewalWhereInput | DisplayRenewalWhereInput[]
    OR?: DisplayRenewalWhereInput[]
    NOT?: DisplayRenewalWhereInput | DisplayRenewalWhereInput[]
    secret?: StringFilter<"DisplayRenewal"> | string
    createdAt?: DateTimeFilter<"DisplayRenewal"> | Date | string
    validAfter?: DateTimeFilter<"DisplayRenewal"> | Date | string
    display?: XOR<DisplayRelationFilter, DisplayWhereInput>
  }, "id" | "displayId">

  export type DisplayRenewalOrderByWithAggregationInput = {
    id?: SortOrder
    secret?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
    validAfter?: SortOrder
    _count?: DisplayRenewalCountOrderByAggregateInput
    _max?: DisplayRenewalMaxOrderByAggregateInput
    _min?: DisplayRenewalMinOrderByAggregateInput
  }

  export type DisplayRenewalScalarWhereWithAggregatesInput = {
    AND?: DisplayRenewalScalarWhereWithAggregatesInput | DisplayRenewalScalarWhereWithAggregatesInput[]
    OR?: DisplayRenewalScalarWhereWithAggregatesInput[]
    NOT?: DisplayRenewalScalarWhereWithAggregatesInput | DisplayRenewalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DisplayRenewal"> | string
    secret?: StringWithAggregatesFilter<"DisplayRenewal"> | string
    displayId?: StringWithAggregatesFilter<"DisplayRenewal"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DisplayRenewal"> | Date | string
    validAfter?: DateTimeWithAggregatesFilter<"DisplayRenewal"> | Date | string
  }

  export type LicenseWhereInput = {
    AND?: LicenseWhereInput | LicenseWhereInput[]
    OR?: LicenseWhereInput[]
    NOT?: LicenseWhereInput | LicenseWhereInput[]
    id?: StringFilter<"License"> | string
    type?: EnumLicenseTypeFilter<"License"> | $Enums.LicenseType
    purchasedAt?: DateTimeFilter<"License"> | Date | string
    updatedAt?: DateTimeFilter<"License"> | Date | string
    expiresAt?: DateTimeFilter<"License"> | Date | string
    priceMonthly?: IntFilter<"License"> | number
    maxUsers?: IntFilter<"License"> | number
    maxDisplays?: IntFilter<"License"> | number
    maxStorageBytes?: BigIntFilter<"License"> | bigint | number
    organization?: XOR<OrganizationNullableRelationFilter, OrganizationWhereInput> | null
  }

  export type LicenseOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    purchasedAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    priceMonthly?: SortOrder
    maxUsers?: SortOrder
    maxDisplays?: SortOrder
    maxStorageBytes?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type LicenseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LicenseWhereInput | LicenseWhereInput[]
    OR?: LicenseWhereInput[]
    NOT?: LicenseWhereInput | LicenseWhereInput[]
    type?: EnumLicenseTypeFilter<"License"> | $Enums.LicenseType
    purchasedAt?: DateTimeFilter<"License"> | Date | string
    updatedAt?: DateTimeFilter<"License"> | Date | string
    expiresAt?: DateTimeFilter<"License"> | Date | string
    priceMonthly?: IntFilter<"License"> | number
    maxUsers?: IntFilter<"License"> | number
    maxDisplays?: IntFilter<"License"> | number
    maxStorageBytes?: BigIntFilter<"License"> | bigint | number
    organization?: XOR<OrganizationNullableRelationFilter, OrganizationWhereInput> | null
  }, "id">

  export type LicenseOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    purchasedAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    priceMonthly?: SortOrder
    maxUsers?: SortOrder
    maxDisplays?: SortOrder
    maxStorageBytes?: SortOrder
    _count?: LicenseCountOrderByAggregateInput
    _avg?: LicenseAvgOrderByAggregateInput
    _max?: LicenseMaxOrderByAggregateInput
    _min?: LicenseMinOrderByAggregateInput
    _sum?: LicenseSumOrderByAggregateInput
  }

  export type LicenseScalarWhereWithAggregatesInput = {
    AND?: LicenseScalarWhereWithAggregatesInput | LicenseScalarWhereWithAggregatesInput[]
    OR?: LicenseScalarWhereWithAggregatesInput[]
    NOT?: LicenseScalarWhereWithAggregatesInput | LicenseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"License"> | string
    type?: EnumLicenseTypeWithAggregatesFilter<"License"> | $Enums.LicenseType
    purchasedAt?: DateTimeWithAggregatesFilter<"License"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"License"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"License"> | Date | string
    priceMonthly?: IntWithAggregatesFilter<"License"> | number
    maxUsers?: IntWithAggregatesFilter<"License"> | number
    maxDisplays?: IntWithAggregatesFilter<"License"> | number
    maxStorageBytes?: BigIntWithAggregatesFilter<"License"> | bigint | number
  }

  export type UserInviteWhereInput = {
    AND?: UserInviteWhereInput | UserInviteWhereInput[]
    OR?: UserInviteWhereInput[]
    NOT?: UserInviteWhereInput | UserInviteWhereInput[]
    id?: StringFilter<"UserInvite"> | string
    token?: StringFilter<"UserInvite"> | string
    email?: StringFilter<"UserInvite"> | string
    name?: StringNullableFilter<"UserInvite"> | string | null
    organizationId?: StringFilter<"UserInvite"> | string
    createdAt?: DateTimeFilter<"UserInvite"> | Date | string
    expiresAt?: DateTimeFilter<"UserInvite"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"UserInvite"> | Date | string | null
    inviterId?: StringFilter<"UserInvite"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    inviter?: XOR<UserRelationFilter, UserWhereInput>
    roles?: RoleListRelationFilter
  }

  export type UserInviteOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    inviterId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    inviter?: UserOrderByWithRelationInput
    roles?: RoleOrderByRelationAggregateInput
  }

  export type UserInviteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: UserInviteWhereInput | UserInviteWhereInput[]
    OR?: UserInviteWhereInput[]
    NOT?: UserInviteWhereInput | UserInviteWhereInput[]
    email?: StringFilter<"UserInvite"> | string
    name?: StringNullableFilter<"UserInvite"> | string | null
    organizationId?: StringFilter<"UserInvite"> | string
    createdAt?: DateTimeFilter<"UserInvite"> | Date | string
    expiresAt?: DateTimeFilter<"UserInvite"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"UserInvite"> | Date | string | null
    inviterId?: StringFilter<"UserInvite"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    inviter?: XOR<UserRelationFilter, UserWhereInput>
    roles?: RoleListRelationFilter
  }, "id" | "token">

  export type UserInviteOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    inviterId?: SortOrder
    _count?: UserInviteCountOrderByAggregateInput
    _max?: UserInviteMaxOrderByAggregateInput
    _min?: UserInviteMinOrderByAggregateInput
  }

  export type UserInviteScalarWhereWithAggregatesInput = {
    AND?: UserInviteScalarWhereWithAggregatesInput | UserInviteScalarWhereWithAggregatesInput[]
    OR?: UserInviteScalarWhereWithAggregatesInput[]
    NOT?: UserInviteScalarWhereWithAggregatesInput | UserInviteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserInvite"> | string
    token?: StringWithAggregatesFilter<"UserInvite"> | string
    email?: StringWithAggregatesFilter<"UserInvite"> | string
    name?: StringNullableWithAggregatesFilter<"UserInvite"> | string | null
    organizationId?: StringWithAggregatesFilter<"UserInvite"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserInvite"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"UserInvite"> | Date | string
    acceptedAt?: DateTimeNullableWithAggregatesFilter<"UserInvite"> | Date | string | null
    inviterId?: StringWithAggregatesFilter<"UserInvite"> | string
  }

  export type WebsocketConnectionTokenWhereInput = {
    AND?: WebsocketConnectionTokenWhereInput | WebsocketConnectionTokenWhereInput[]
    OR?: WebsocketConnectionTokenWhereInput[]
    NOT?: WebsocketConnectionTokenWhereInput | WebsocketConnectionTokenWhereInput[]
    id?: StringFilter<"WebsocketConnectionToken"> | string
    token?: StringFilter<"WebsocketConnectionToken"> | string
    displayId?: StringFilter<"WebsocketConnectionToken"> | string
    createdAt?: DateTimeFilter<"WebsocketConnectionToken"> | Date | string
    display?: XOR<DisplayRelationFilter, DisplayWhereInput>
  }

  export type WebsocketConnectionTokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
    display?: DisplayOrderByWithRelationInput
  }

  export type WebsocketConnectionTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    displayId?: string
    AND?: WebsocketConnectionTokenWhereInput | WebsocketConnectionTokenWhereInput[]
    OR?: WebsocketConnectionTokenWhereInput[]
    NOT?: WebsocketConnectionTokenWhereInput | WebsocketConnectionTokenWhereInput[]
    createdAt?: DateTimeFilter<"WebsocketConnectionToken"> | Date | string
    display?: XOR<DisplayRelationFilter, DisplayWhereInput>
  }, "id" | "token" | "displayId">

  export type WebsocketConnectionTokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
    _count?: WebsocketConnectionTokenCountOrderByAggregateInput
    _max?: WebsocketConnectionTokenMaxOrderByAggregateInput
    _min?: WebsocketConnectionTokenMinOrderByAggregateInput
  }

  export type WebsocketConnectionTokenScalarWhereWithAggregatesInput = {
    AND?: WebsocketConnectionTokenScalarWhereWithAggregatesInput | WebsocketConnectionTokenScalarWhereWithAggregatesInput[]
    OR?: WebsocketConnectionTokenScalarWhereWithAggregatesInput[]
    NOT?: WebsocketConnectionTokenScalarWhereWithAggregatesInput | WebsocketConnectionTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebsocketConnectionToken"> | string
    token?: StringWithAggregatesFilter<"WebsocketConnectionToken"> | string
    displayId?: StringWithAggregatesFilter<"WebsocketConnectionToken"> | string
    createdAt?: DateTimeWithAggregatesFilter<"WebsocketConnectionToken"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    content?: ContentCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileCreateNestedManyWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteCreateNestedManyWithoutInviterInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutInviterInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    content?: ContentUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    content?: ContentCreateNestedManyWithoutOrganizationInput
    displays?: DisplayCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileCreateNestedManyWithoutOrganizationInput
    license: LicenseCreateNestedOneWithoutOrganizationInput
    userInvites?: UserInviteCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    licenseId: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    content?: ContentUncheckedCreateNestedManyWithoutOrganizationInput
    displays?: DisplayUncheckedCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutOrganizationInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    content?: ContentUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutOrganizationNestedInput
    license?: LicenseUpdateOneRequiredWithoutOrganizationNestedInput
    userInvites?: UserInviteUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licenseId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    content?: ContentUncheckedUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUncheckedUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutOrganizationNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    licenseId: string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licenseId?: StringFieldUpdateOperationsInput | string
  }

  export type ContentCreateInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    user: UserCreateNestedOneWithoutContentInput
    organization: OrganizationCreateNestedOneWithoutContentInput
    hostedFile?: HostedFileCreateNestedOneWithoutContentInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutContentInput
    style?: StyleCreateNestedOneWithoutContentInput
    exhibits?: ExhibitCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutContentInput
    exhibits?: ExhibitUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContentNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutContentNestedInput
    hostedFile?: HostedFileUpdateOneWithoutContentNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutContentNestedInput
    style?: StyleUpdateOneWithoutContentNestedInput
    exhibits?: ExhibitUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentCreateManyInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
  }

  export type ContentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisplayCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    style?: StyleCreateNestedOneWithoutDisplayInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    style?: StyleUpdateOneWithoutDisplayNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayCreateManyInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
  }

  export type DisplayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type DisplayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type PairingCodeCreateInput = {
    code: string
    secret?: string
    createdAt?: Date | string
    claimedAt?: Date | string | null
    deviceType: $Enums.DeviceType
    display?: DisplayCreateNestedOneWithoutPairingCodesInput
  }

  export type PairingCodeUncheckedCreateInput = {
    code: string
    secret?: string
    createdAt?: Date | string
    claimedAt?: Date | string | null
    deviceType: $Enums.DeviceType
    displayId?: string | null
  }

  export type PairingCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    display?: DisplayUpdateOneWithoutPairingCodesNestedInput
  }

  export type PairingCodeUncheckedUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    displayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PairingCodeCreateManyInput = {
    code: string
    secret?: string
    createdAt?: Date | string
    claimedAt?: Date | string | null
    deviceType: $Enums.DeviceType
    displayId?: string | null
  }

  export type PairingCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  }

  export type PairingCodeUncheckedUpdateManyInput = {
    code?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    displayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisplayContentPairCreateInput = {
    id?: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    display: DisplayCreateNestedOneWithoutDisplayContentPairsInput
    currentDisplay?: DisplayCreateNestedOneWithoutCurrentDisplayContentPairInput
    content: ContentCreateNestedOneWithoutDisplayContentPairsInput
    style?: StyleCreateNestedOneWithoutDisplayContentPairsInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairUncheckedCreateInput = {
    id?: string
    displayId: string
    contentId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDisplay?: DisplayUncheckedCreateNestedOneWithoutCurrentDisplayContentPairInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    display?: DisplayUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    currentDisplay?: DisplayUpdateOneWithoutCurrentDisplayContentPairNestedInput
    content?: ContentUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    style?: StyleUpdateOneWithoutDisplayContentPairsNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDisplay?: DisplayUncheckedUpdateOneWithoutCurrentDisplayContentPairNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairCreateManyInput = {
    id?: string
    displayId: string
    contentId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DisplayContentPairUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisplayContentPairUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleCreateInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    content?: ContentCreateNestedManyWithoutStyleInput
    display?: DisplayCreateNestedOneWithoutStyleInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    content?: ContentUncheckedCreateNestedManyWithoutStyleInput
    display?: DisplayUncheckedCreateNestedOneWithoutStyleInput
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    content?: ContentUpdateManyWithoutStyleNestedInput
    display?: DisplayUpdateOneWithoutStyleNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    content?: ContentUncheckedUpdateManyWithoutStyleNestedInput
    display?: DisplayUncheckedUpdateOneWithoutStyleNestedInput
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type StyleCreateManyInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
  }

  export type StyleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
  }

  export type StyleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
  }

  export type PlaylistCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlaylistsInput
    playlistItem?: PlaylistItemCreateNestedManyWithoutPlaylistInput
    display?: DisplayCreateNestedOneWithoutPlaylistsInput
  }

  export type PlaylistUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayId?: string | null
    playlistItem?: PlaylistItemUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
    playlistItem?: PlaylistItemUpdateManyWithoutPlaylistNestedInput
    display?: DisplayUpdateOneWithoutPlaylistsNestedInput
  }

  export type PlaylistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayId?: NullableStringFieldUpdateOperationsInput | string | null
    playlistItem?: PlaylistItemUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayId?: string | null
  }

  export type PlaylistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlaylistItemCreateInput = {
    id?: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    playlist: PlaylistCreateNestedOneWithoutPlaylistItemInput
    content: ContentCreateNestedOneWithoutPlaylistItemsInput
    displayContentPair: DisplayContentPairCreateNestedOneWithoutPlaylistItemsInput
  }

  export type PlaylistItemUncheckedCreateInput = {
    id?: string
    playlistId: string
    contentId: string
    displayContentPairId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlist?: PlaylistUpdateOneRequiredWithoutPlaylistItemNestedInput
    content?: ContentUpdateOneRequiredWithoutPlaylistItemsNestedInput
    displayContentPair?: DisplayContentPairUpdateOneRequiredWithoutPlaylistItemsNestedInput
  }

  export type PlaylistItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    displayContentPairId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistItemCreateManyInput = {
    id?: string
    playlistId: string
    contentId: string
    displayContentPairId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    displayContentPairId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostedFileCreateInput = {
    id?: string
    objectKey: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutHostedFilesInput
    user: UserCreateNestedOneWithoutHostedFilesInput
    content?: ContentCreateNestedManyWithoutHostedFileInput
  }

  export type HostedFileUncheckedCreateInput = {
    id?: string
    objectKey: string
    userId: string
    organizationId: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutHostedFileInput
  }

  export type HostedFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutHostedFilesNestedInput
    user?: UserUpdateOneRequiredWithoutHostedFilesNestedInput
    content?: ContentUpdateManyWithoutHostedFileNestedInput
  }

  export type HostedFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutHostedFileNestedInput
  }

  export type HostedFileCreateManyInput = {
    id?: string
    objectKey: string
    userId: string
    organizationId: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
  }

  export type HostedFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostedFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExhibitCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentCreateNestedManyWithoutExhibitsInput
  }

  export type ExhibitUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutExhibitsInput
  }

  export type ExhibitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUpdateManyWithoutExhibitsNestedInput
  }

  export type ExhibitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutExhibitsNestedInput
  }

  export type ExhibitCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExhibitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExhibitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    description?: string | null
    users?: UserCreateNestedManyWithoutRolesInput
    userInvites?: UserInviteCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutRolesNestedInput
    userInvites?: UserInviteUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutRolesNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisplayRenewalCreateInput = {
    id?: string
    secret: string
    createdAt?: Date | string
    validAfter: Date | string
    display: DisplayCreateNestedOneWithoutDisplayRenewalInput
  }

  export type DisplayRenewalUncheckedCreateInput = {
    id?: string
    secret: string
    displayId: string
    createdAt?: Date | string
    validAfter: Date | string
  }

  export type DisplayRenewalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validAfter?: DateTimeFieldUpdateOperationsInput | Date | string
    display?: DisplayUpdateOneRequiredWithoutDisplayRenewalNestedInput
  }

  export type DisplayRenewalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validAfter?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisplayRenewalCreateManyInput = {
    id?: string
    secret: string
    displayId: string
    createdAt?: Date | string
    validAfter: Date | string
  }

  export type DisplayRenewalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validAfter?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisplayRenewalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validAfter?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LicenseCreateInput = {
    id?: string
    type?: $Enums.LicenseType
    purchasedAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    priceMonthly?: number
    maxUsers?: number
    maxDisplays?: number
    maxStorageBytes?: bigint | number
    organization?: OrganizationCreateNestedOneWithoutLicenseInput
  }

  export type LicenseUncheckedCreateInput = {
    id?: string
    type?: $Enums.LicenseType
    purchasedAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    priceMonthly?: number
    maxUsers?: number
    maxDisplays?: number
    maxStorageBytes?: bigint | number
    organization?: OrganizationUncheckedCreateNestedOneWithoutLicenseInput
  }

  export type LicenseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLicenseTypeFieldUpdateOperationsInput | $Enums.LicenseType
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxDisplays?: IntFieldUpdateOperationsInput | number
    maxStorageBytes?: BigIntFieldUpdateOperationsInput | bigint | number
    organization?: OrganizationUpdateOneWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLicenseTypeFieldUpdateOperationsInput | $Enums.LicenseType
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxDisplays?: IntFieldUpdateOperationsInput | number
    maxStorageBytes?: BigIntFieldUpdateOperationsInput | bigint | number
    organization?: OrganizationUncheckedUpdateOneWithoutLicenseNestedInput
  }

  export type LicenseCreateManyInput = {
    id?: string
    type?: $Enums.LicenseType
    purchasedAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    priceMonthly?: number
    maxUsers?: number
    maxDisplays?: number
    maxStorageBytes?: bigint | number
  }

  export type LicenseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLicenseTypeFieldUpdateOperationsInput | $Enums.LicenseType
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxDisplays?: IntFieldUpdateOperationsInput | number
    maxStorageBytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LicenseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLicenseTypeFieldUpdateOperationsInput | $Enums.LicenseType
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxDisplays?: IntFieldUpdateOperationsInput | number
    maxStorageBytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserInviteCreateInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutUserInvitesInput
    inviter: UserCreateNestedOneWithoutUserInvitesInput
    roles?: RoleCreateNestedManyWithoutUserInvitesInput
  }

  export type UserInviteUncheckedCreateInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    organizationId: string
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    inviterId: string
    roles?: RoleUncheckedCreateNestedManyWithoutUserInvitesInput
  }

  export type UserInviteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutUserInvitesNestedInput
    inviter?: UserUpdateOneRequiredWithoutUserInvitesNestedInput
    roles?: RoleUpdateManyWithoutUserInvitesNestedInput
  }

  export type UserInviteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inviterId?: StringFieldUpdateOperationsInput | string
    roles?: RoleUncheckedUpdateManyWithoutUserInvitesNestedInput
  }

  export type UserInviteCreateManyInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    organizationId: string
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    inviterId: string
  }

  export type UserInviteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserInviteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type WebsocketConnectionTokenCreateInput = {
    id?: string
    token: string
    createdAt?: Date | string
    display: DisplayCreateNestedOneWithoutWebsocketConnectionTokenInput
  }

  export type WebsocketConnectionTokenUncheckedCreateInput = {
    id?: string
    token: string
    displayId: string
    createdAt?: Date | string
  }

  export type WebsocketConnectionTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    display?: DisplayUpdateOneRequiredWithoutWebsocketConnectionTokenNestedInput
  }

  export type WebsocketConnectionTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsocketConnectionTokenCreateManyInput = {
    id?: string
    token: string
    displayId: string
    createdAt?: Date | string
  }

  export type WebsocketConnectionTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsocketConnectionTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type ContentListRelationFilter = {
    every?: ContentWhereInput
    some?: ContentWhereInput
    none?: ContentWhereInput
  }

  export type PlaylistListRelationFilter = {
    every?: PlaylistWhereInput
    some?: PlaylistWhereInput
    none?: PlaylistWhereInput
  }

  export type HostedFileListRelationFilter = {
    every?: HostedFileWhereInput
    some?: HostedFileWhereInput
    none?: HostedFileWhereInput
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type UserInviteListRelationFilter = {
    every?: UserInviteWhereInput
    some?: UserInviteWhereInput
    none?: UserInviteWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ContentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaylistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HostedFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserInviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DisplayListRelationFilter = {
    every?: DisplayWhereInput
    some?: DisplayWhereInput
    none?: DisplayWhereInput
  }

  export type LicenseRelationFilter = {
    is?: LicenseWhereInput
    isNot?: LicenseWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisplayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    licenseId?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    licenseId?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    licenseId?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HostedFileNullableRelationFilter = {
    is?: HostedFileWhereInput | null
    isNot?: HostedFileWhereInput | null
  }

  export type DisplayContentPairListRelationFilter = {
    every?: DisplayContentPairWhereInput
    some?: DisplayContentPairWhereInput
    none?: DisplayContentPairWhereInput
  }

  export type PlaylistItemListRelationFilter = {
    every?: PlaylistItemWhereInput
    some?: PlaylistItemWhereInput
    none?: PlaylistItemWhereInput
  }

  export type StyleNullableRelationFilter = {
    is?: StyleWhereInput | null
    isNot?: StyleWhereInput | null
  }

  export type ExhibitListRelationFilter = {
    every?: ExhibitWhereInput
    some?: ExhibitWhereInput
    none?: ExhibitWhereInput
  }

  export type DisplayContentPairOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaylistItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExhibitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentCountOrderByAggregateInput = {
    id?: SortOrder
    uri?: SortOrder
    name?: SortOrder
    description?: SortOrder
    thumbnailUri?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    styleId?: SortOrder
    directoryId?: SortOrder
    hostedFileId?: SortOrder
  }

  export type ContentMaxOrderByAggregateInput = {
    id?: SortOrder
    uri?: SortOrder
    name?: SortOrder
    description?: SortOrder
    thumbnailUri?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    styleId?: SortOrder
    directoryId?: SortOrder
    hostedFileId?: SortOrder
  }

  export type ContentMinOrderByAggregateInput = {
    id?: SortOrder
    uri?: SortOrder
    name?: SortOrder
    description?: SortOrder
    thumbnailUri?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    styleId?: SortOrder
    directoryId?: SortOrder
    hostedFileId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumDeviceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeFilter<$PrismaModel> | $Enums.DeviceType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DisplayContentPairNullableRelationFilter = {
    is?: DisplayContentPairWhereInput | null
    isNot?: DisplayContentPairWhereInput | null
  }

  export type PairingCodeListRelationFilter = {
    every?: PairingCodeWhereInput
    some?: PairingCodeWhereInput
    none?: PairingCodeWhereInput
  }

  export type DisplayRenewalNullableRelationFilter = {
    is?: DisplayRenewalWhereInput | null
    isNot?: DisplayRenewalWhereInput | null
  }

  export type WebsocketConnectionTokenNullableRelationFilter = {
    is?: WebsocketConnectionTokenWhereInput | null
    isNot?: WebsocketConnectionTokenWhereInput | null
  }

  export type PairingCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisplayCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    styleId?: SortOrder
    settings?: SortOrder
    deviceType?: SortOrder
    currentDisplayContentPairId?: SortOrder
    lastSeenAt?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type DisplayAvgOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type DisplayMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    styleId?: SortOrder
    deviceType?: SortOrder
    currentDisplayContentPairId?: SortOrder
    lastSeenAt?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type DisplayMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    styleId?: SortOrder
    deviceType?: SortOrder
    currentDisplayContentPairId?: SortOrder
    lastSeenAt?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type DisplaySumOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumDeviceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DisplayNullableRelationFilter = {
    is?: DisplayWhereInput | null
    isNot?: DisplayWhereInput | null
  }

  export type PairingCodeCountOrderByAggregateInput = {
    code?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    claimedAt?: SortOrder
    deviceType?: SortOrder
    displayId?: SortOrder
  }

  export type PairingCodeMaxOrderByAggregateInput = {
    code?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    claimedAt?: SortOrder
    deviceType?: SortOrder
    displayId?: SortOrder
  }

  export type PairingCodeMinOrderByAggregateInput = {
    code?: SortOrder
    secret?: SortOrder
    createdAt?: SortOrder
    claimedAt?: SortOrder
    deviceType?: SortOrder
    displayId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DisplayRelationFilter = {
    is?: DisplayWhereInput
    isNot?: DisplayWhereInput
  }

  export type ContentRelationFilter = {
    is?: ContentWhereInput
    isNot?: ContentWhereInput
  }

  export type DisplayContentPairCountOrderByAggregateInput = {
    id?: SortOrder
    displayId?: SortOrder
    contentId?: SortOrder
    collectionId?: SortOrder
    styleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DisplayContentPairMaxOrderByAggregateInput = {
    id?: SortOrder
    displayId?: SortOrder
    contentId?: SortOrder
    collectionId?: SortOrder
    styleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DisplayContentPairMinOrderByAggregateInput = {
    id?: SortOrder
    displayId?: SortOrder
    contentId?: SortOrder
    collectionId?: SortOrder
    styleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StyleCountOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    posX?: SortOrder
    posY?: SortOrder
    rotation?: SortOrder
    css?: SortOrder
  }

  export type StyleAvgOrderByAggregateInput = {
    size?: SortOrder
    posX?: SortOrder
    posY?: SortOrder
    rotation?: SortOrder
  }

  export type StyleMaxOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    posX?: SortOrder
    posY?: SortOrder
    rotation?: SortOrder
  }

  export type StyleMinOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
    posX?: SortOrder
    posY?: SortOrder
    rotation?: SortOrder
  }

  export type StyleSumOrderByAggregateInput = {
    size?: SortOrder
    posX?: SortOrder
    posY?: SortOrder
    rotation?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PlaylistNameUserIdCompoundUniqueInput = {
    name: string
    userId: string
  }

  export type PlaylistCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayId?: SortOrder
  }

  export type PlaylistMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayId?: SortOrder
  }

  export type PlaylistMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    displayId?: SortOrder
  }

  export type PlaylistRelationFilter = {
    is?: PlaylistWhereInput
    isNot?: PlaylistWhereInput
  }

  export type DisplayContentPairRelationFilter = {
    is?: DisplayContentPairWhereInput
    isNot?: DisplayContentPairWhereInput
  }

  export type PlaylistItemCountOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    contentId?: SortOrder
    displayContentPairId?: SortOrder
    order?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistItemAvgOrderByAggregateInput = {
    order?: SortOrder
    duration?: SortOrder
  }

  export type PlaylistItemMaxOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    contentId?: SortOrder
    displayContentPairId?: SortOrder
    order?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistItemMinOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    contentId?: SortOrder
    displayContentPairId?: SortOrder
    order?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistItemSumOrderByAggregateInput = {
    order?: SortOrder
    duration?: SortOrder
  }

  export type EnumHostedFileUploadStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HostedFileUploadStatus | EnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostedFileUploadStatusFilter<$PrismaModel> | $Enums.HostedFileUploadStatus
  }

  export type HostedFileCountOrderByAggregateInput = {
    id?: SortOrder
    objectKey?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    bucketName?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    region?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type HostedFileMaxOrderByAggregateInput = {
    id?: SortOrder
    objectKey?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    bucketName?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    region?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type HostedFileMinOrderByAggregateInput = {
    id?: SortOrder
    objectKey?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    bucketName?: SortOrder
    mimetype?: SortOrder
    bytes?: SortOrder
    region?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumHostedFileUploadStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HostedFileUploadStatus | EnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostedFileUploadStatusWithAggregatesFilter<$PrismaModel> | $Enums.HostedFileUploadStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostedFileUploadStatusFilter<$PrismaModel>
    _max?: NestedEnumHostedFileUploadStatusFilter<$PrismaModel>
  }

  export type ExhibitCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExhibitMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExhibitMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DisplayRenewalCountOrderByAggregateInput = {
    id?: SortOrder
    secret?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
    validAfter?: SortOrder
  }

  export type DisplayRenewalMaxOrderByAggregateInput = {
    id?: SortOrder
    secret?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
    validAfter?: SortOrder
  }

  export type DisplayRenewalMinOrderByAggregateInput = {
    id?: SortOrder
    secret?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
    validAfter?: SortOrder
  }

  export type EnumLicenseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LicenseType | EnumLicenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicenseTypeFilter<$PrismaModel> | $Enums.LicenseType
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type OrganizationNullableRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type LicenseCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    purchasedAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    priceMonthly?: SortOrder
    maxUsers?: SortOrder
    maxDisplays?: SortOrder
    maxStorageBytes?: SortOrder
  }

  export type LicenseAvgOrderByAggregateInput = {
    priceMonthly?: SortOrder
    maxUsers?: SortOrder
    maxDisplays?: SortOrder
    maxStorageBytes?: SortOrder
  }

  export type LicenseMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    purchasedAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    priceMonthly?: SortOrder
    maxUsers?: SortOrder
    maxDisplays?: SortOrder
    maxStorageBytes?: SortOrder
  }

  export type LicenseMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    purchasedAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
    priceMonthly?: SortOrder
    maxUsers?: SortOrder
    maxDisplays?: SortOrder
    maxStorageBytes?: SortOrder
  }

  export type LicenseSumOrderByAggregateInput = {
    priceMonthly?: SortOrder
    maxUsers?: SortOrder
    maxDisplays?: SortOrder
    maxStorageBytes?: SortOrder
  }

  export type EnumLicenseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicenseType | EnumLicenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicenseTypeWithAggregatesFilter<$PrismaModel> | $Enums.LicenseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLicenseTypeFilter<$PrismaModel>
    _max?: NestedEnumLicenseTypeFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type UserInviteCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    inviterId?: SortOrder
  }

  export type UserInviteMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    inviterId?: SortOrder
  }

  export type UserInviteMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    name?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    acceptedAt?: SortOrder
    inviterId?: SortOrder
  }

  export type WebsocketConnectionTokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
  }

  export type WebsocketConnectionTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
  }

  export type WebsocketConnectionTokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    displayId?: SortOrder
    createdAt?: SortOrder
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ContentCreateNestedManyWithoutUserInput = {
    create?: XOR<ContentCreateWithoutUserInput, ContentUncheckedCreateWithoutUserInput> | ContentCreateWithoutUserInput[] | ContentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutUserInput | ContentCreateOrConnectWithoutUserInput[]
    createMany?: ContentCreateManyUserInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type PlaylistCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type HostedFileCreateNestedManyWithoutUserInput = {
    create?: XOR<HostedFileCreateWithoutUserInput, HostedFileUncheckedCreateWithoutUserInput> | HostedFileCreateWithoutUserInput[] | HostedFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutUserInput | HostedFileCreateOrConnectWithoutUserInput[]
    createMany?: HostedFileCreateManyUserInputEnvelope
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
  }

  export type RoleCreateNestedManyWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type UserInviteCreateNestedManyWithoutInviterInput = {
    create?: XOR<UserInviteCreateWithoutInviterInput, UserInviteUncheckedCreateWithoutInviterInput> | UserInviteCreateWithoutInviterInput[] | UserInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutInviterInput | UserInviteCreateOrConnectWithoutInviterInput[]
    createMany?: UserInviteCreateManyInviterInputEnvelope
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
  }

  export type ContentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ContentCreateWithoutUserInput, ContentUncheckedCreateWithoutUserInput> | ContentCreateWithoutUserInput[] | ContentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutUserInput | ContentCreateOrConnectWithoutUserInput[]
    createMany?: ContentCreateManyUserInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type PlaylistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type HostedFileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HostedFileCreateWithoutUserInput, HostedFileUncheckedCreateWithoutUserInput> | HostedFileCreateWithoutUserInput[] | HostedFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutUserInput | HostedFileCreateOrConnectWithoutUserInput[]
    createMany?: HostedFileCreateManyUserInputEnvelope
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type UserInviteUncheckedCreateNestedManyWithoutInviterInput = {
    create?: XOR<UserInviteCreateWithoutInviterInput, UserInviteUncheckedCreateWithoutInviterInput> | UserInviteCreateWithoutInviterInput[] | UserInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutInviterInput | UserInviteCreateOrConnectWithoutInviterInput[]
    createMany?: UserInviteCreateManyInviterInputEnvelope
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OrganizationUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type ContentUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContentCreateWithoutUserInput, ContentUncheckedCreateWithoutUserInput> | ContentCreateWithoutUserInput[] | ContentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutUserInput | ContentCreateOrConnectWithoutUserInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutUserInput | ContentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContentCreateManyUserInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutUserInput | ContentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutUserInput | ContentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type PlaylistUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type HostedFileUpdateManyWithoutUserNestedInput = {
    create?: XOR<HostedFileCreateWithoutUserInput, HostedFileUncheckedCreateWithoutUserInput> | HostedFileCreateWithoutUserInput[] | HostedFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutUserInput | HostedFileCreateOrConnectWithoutUserInput[]
    upsert?: HostedFileUpsertWithWhereUniqueWithoutUserInput | HostedFileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HostedFileCreateManyUserInputEnvelope
    set?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    disconnect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    delete?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    update?: HostedFileUpdateWithWhereUniqueWithoutUserInput | HostedFileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HostedFileUpdateManyWithWhereWithoutUserInput | HostedFileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HostedFileScalarWhereInput | HostedFileScalarWhereInput[]
  }

  export type RoleUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUsersInput | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUsersInput | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUsersInput | RoleUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserInviteUpdateManyWithoutInviterNestedInput = {
    create?: XOR<UserInviteCreateWithoutInviterInput, UserInviteUncheckedCreateWithoutInviterInput> | UserInviteCreateWithoutInviterInput[] | UserInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutInviterInput | UserInviteCreateOrConnectWithoutInviterInput[]
    upsert?: UserInviteUpsertWithWhereUniqueWithoutInviterInput | UserInviteUpsertWithWhereUniqueWithoutInviterInput[]
    createMany?: UserInviteCreateManyInviterInputEnvelope
    set?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    disconnect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    delete?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    update?: UserInviteUpdateWithWhereUniqueWithoutInviterInput | UserInviteUpdateWithWhereUniqueWithoutInviterInput[]
    updateMany?: UserInviteUpdateManyWithWhereWithoutInviterInput | UserInviteUpdateManyWithWhereWithoutInviterInput[]
    deleteMany?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
  }

  export type ContentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ContentCreateWithoutUserInput, ContentUncheckedCreateWithoutUserInput> | ContentCreateWithoutUserInput[] | ContentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutUserInput | ContentCreateOrConnectWithoutUserInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutUserInput | ContentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ContentCreateManyUserInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutUserInput | ContentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutUserInput | ContentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type PlaylistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type HostedFileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HostedFileCreateWithoutUserInput, HostedFileUncheckedCreateWithoutUserInput> | HostedFileCreateWithoutUserInput[] | HostedFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutUserInput | HostedFileCreateOrConnectWithoutUserInput[]
    upsert?: HostedFileUpsertWithWhereUniqueWithoutUserInput | HostedFileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HostedFileCreateManyUserInputEnvelope
    set?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    disconnect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    delete?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    update?: HostedFileUpdateWithWhereUniqueWithoutUserInput | HostedFileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HostedFileUpdateManyWithWhereWithoutUserInput | HostedFileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HostedFileScalarWhereInput | HostedFileScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput> | RoleCreateWithoutUsersInput[] | RoleUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput | RoleCreateOrConnectWithoutUsersInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUsersInput | RoleUpsertWithWhereUniqueWithoutUsersInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUsersInput | RoleUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUsersInput | RoleUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserInviteUncheckedUpdateManyWithoutInviterNestedInput = {
    create?: XOR<UserInviteCreateWithoutInviterInput, UserInviteUncheckedCreateWithoutInviterInput> | UserInviteCreateWithoutInviterInput[] | UserInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutInviterInput | UserInviteCreateOrConnectWithoutInviterInput[]
    upsert?: UserInviteUpsertWithWhereUniqueWithoutInviterInput | UserInviteUpsertWithWhereUniqueWithoutInviterInput[]
    createMany?: UserInviteCreateManyInviterInputEnvelope
    set?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    disconnect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    delete?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    update?: UserInviteUpdateWithWhereUniqueWithoutInviterInput | UserInviteUpdateWithWhereUniqueWithoutInviterInput[]
    updateMany?: UserInviteUpdateManyWithWhereWithoutInviterInput | UserInviteUpdateManyWithWhereWithoutInviterInput[]
    deleteMany?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ContentCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ContentCreateWithoutOrganizationInput, ContentUncheckedCreateWithoutOrganizationInput> | ContentCreateWithoutOrganizationInput[] | ContentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOrganizationInput | ContentCreateOrConnectWithoutOrganizationInput[]
    createMany?: ContentCreateManyOrganizationInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type DisplayCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<DisplayCreateWithoutOrganizationInput, DisplayUncheckedCreateWithoutOrganizationInput> | DisplayCreateWithoutOrganizationInput[] | DisplayUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DisplayCreateOrConnectWithoutOrganizationInput | DisplayCreateOrConnectWithoutOrganizationInput[]
    createMany?: DisplayCreateManyOrganizationInputEnvelope
    connect?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
  }

  export type HostedFileCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<HostedFileCreateWithoutOrganizationInput, HostedFileUncheckedCreateWithoutOrganizationInput> | HostedFileCreateWithoutOrganizationInput[] | HostedFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutOrganizationInput | HostedFileCreateOrConnectWithoutOrganizationInput[]
    createMany?: HostedFileCreateManyOrganizationInputEnvelope
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
  }

  export type LicenseCreateNestedOneWithoutOrganizationInput = {
    create?: XOR<LicenseCreateWithoutOrganizationInput, LicenseUncheckedCreateWithoutOrganizationInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutOrganizationInput
    connect?: LicenseWhereUniqueInput
  }

  export type UserInviteCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserInviteCreateWithoutOrganizationInput, UserInviteUncheckedCreateWithoutOrganizationInput> | UserInviteCreateWithoutOrganizationInput[] | UserInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutOrganizationInput | UserInviteCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserInviteCreateManyOrganizationInputEnvelope
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ContentUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ContentCreateWithoutOrganizationInput, ContentUncheckedCreateWithoutOrganizationInput> | ContentCreateWithoutOrganizationInput[] | ContentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOrganizationInput | ContentCreateOrConnectWithoutOrganizationInput[]
    createMany?: ContentCreateManyOrganizationInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type DisplayUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<DisplayCreateWithoutOrganizationInput, DisplayUncheckedCreateWithoutOrganizationInput> | DisplayCreateWithoutOrganizationInput[] | DisplayUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DisplayCreateOrConnectWithoutOrganizationInput | DisplayCreateOrConnectWithoutOrganizationInput[]
    createMany?: DisplayCreateManyOrganizationInputEnvelope
    connect?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
  }

  export type HostedFileUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<HostedFileCreateWithoutOrganizationInput, HostedFileUncheckedCreateWithoutOrganizationInput> | HostedFileCreateWithoutOrganizationInput[] | HostedFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutOrganizationInput | HostedFileCreateOrConnectWithoutOrganizationInput[]
    createMany?: HostedFileCreateManyOrganizationInputEnvelope
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
  }

  export type UserInviteUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserInviteCreateWithoutOrganizationInput, UserInviteUncheckedCreateWithoutOrganizationInput> | UserInviteCreateWithoutOrganizationInput[] | UserInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutOrganizationInput | UserInviteCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserInviteCreateManyOrganizationInputEnvelope
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ContentUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ContentCreateWithoutOrganizationInput, ContentUncheckedCreateWithoutOrganizationInput> | ContentCreateWithoutOrganizationInput[] | ContentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOrganizationInput | ContentCreateOrConnectWithoutOrganizationInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutOrganizationInput | ContentUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ContentCreateManyOrganizationInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutOrganizationInput | ContentUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutOrganizationInput | ContentUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type DisplayUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<DisplayCreateWithoutOrganizationInput, DisplayUncheckedCreateWithoutOrganizationInput> | DisplayCreateWithoutOrganizationInput[] | DisplayUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DisplayCreateOrConnectWithoutOrganizationInput | DisplayCreateOrConnectWithoutOrganizationInput[]
    upsert?: DisplayUpsertWithWhereUniqueWithoutOrganizationInput | DisplayUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: DisplayCreateManyOrganizationInputEnvelope
    set?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    disconnect?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    delete?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    connect?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    update?: DisplayUpdateWithWhereUniqueWithoutOrganizationInput | DisplayUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: DisplayUpdateManyWithWhereWithoutOrganizationInput | DisplayUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: DisplayScalarWhereInput | DisplayScalarWhereInput[]
  }

  export type HostedFileUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<HostedFileCreateWithoutOrganizationInput, HostedFileUncheckedCreateWithoutOrganizationInput> | HostedFileCreateWithoutOrganizationInput[] | HostedFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutOrganizationInput | HostedFileCreateOrConnectWithoutOrganizationInput[]
    upsert?: HostedFileUpsertWithWhereUniqueWithoutOrganizationInput | HostedFileUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: HostedFileCreateManyOrganizationInputEnvelope
    set?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    disconnect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    delete?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    update?: HostedFileUpdateWithWhereUniqueWithoutOrganizationInput | HostedFileUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: HostedFileUpdateManyWithWhereWithoutOrganizationInput | HostedFileUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: HostedFileScalarWhereInput | HostedFileScalarWhereInput[]
  }

  export type LicenseUpdateOneRequiredWithoutOrganizationNestedInput = {
    create?: XOR<LicenseCreateWithoutOrganizationInput, LicenseUncheckedCreateWithoutOrganizationInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutOrganizationInput
    upsert?: LicenseUpsertWithoutOrganizationInput
    connect?: LicenseWhereUniqueInput
    update?: XOR<XOR<LicenseUpdateToOneWithWhereWithoutOrganizationInput, LicenseUpdateWithoutOrganizationInput>, LicenseUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserInviteUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserInviteCreateWithoutOrganizationInput, UserInviteUncheckedCreateWithoutOrganizationInput> | UserInviteCreateWithoutOrganizationInput[] | UserInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutOrganizationInput | UserInviteCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserInviteUpsertWithWhereUniqueWithoutOrganizationInput | UserInviteUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserInviteCreateManyOrganizationInputEnvelope
    set?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    disconnect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    delete?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    update?: UserInviteUpdateWithWhereUniqueWithoutOrganizationInput | UserInviteUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserInviteUpdateManyWithWhereWithoutOrganizationInput | UserInviteUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ContentUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ContentCreateWithoutOrganizationInput, ContentUncheckedCreateWithoutOrganizationInput> | ContentCreateWithoutOrganizationInput[] | ContentUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutOrganizationInput | ContentCreateOrConnectWithoutOrganizationInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutOrganizationInput | ContentUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ContentCreateManyOrganizationInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutOrganizationInput | ContentUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutOrganizationInput | ContentUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type DisplayUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<DisplayCreateWithoutOrganizationInput, DisplayUncheckedCreateWithoutOrganizationInput> | DisplayCreateWithoutOrganizationInput[] | DisplayUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: DisplayCreateOrConnectWithoutOrganizationInput | DisplayCreateOrConnectWithoutOrganizationInput[]
    upsert?: DisplayUpsertWithWhereUniqueWithoutOrganizationInput | DisplayUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: DisplayCreateManyOrganizationInputEnvelope
    set?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    disconnect?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    delete?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    connect?: DisplayWhereUniqueInput | DisplayWhereUniqueInput[]
    update?: DisplayUpdateWithWhereUniqueWithoutOrganizationInput | DisplayUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: DisplayUpdateManyWithWhereWithoutOrganizationInput | DisplayUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: DisplayScalarWhereInput | DisplayScalarWhereInput[]
  }

  export type HostedFileUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<HostedFileCreateWithoutOrganizationInput, HostedFileUncheckedCreateWithoutOrganizationInput> | HostedFileCreateWithoutOrganizationInput[] | HostedFileUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: HostedFileCreateOrConnectWithoutOrganizationInput | HostedFileCreateOrConnectWithoutOrganizationInput[]
    upsert?: HostedFileUpsertWithWhereUniqueWithoutOrganizationInput | HostedFileUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: HostedFileCreateManyOrganizationInputEnvelope
    set?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    disconnect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    delete?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    connect?: HostedFileWhereUniqueInput | HostedFileWhereUniqueInput[]
    update?: HostedFileUpdateWithWhereUniqueWithoutOrganizationInput | HostedFileUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: HostedFileUpdateManyWithWhereWithoutOrganizationInput | HostedFileUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: HostedFileScalarWhereInput | HostedFileScalarWhereInput[]
  }

  export type UserInviteUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserInviteCreateWithoutOrganizationInput, UserInviteUncheckedCreateWithoutOrganizationInput> | UserInviteCreateWithoutOrganizationInput[] | UserInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutOrganizationInput | UserInviteCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserInviteUpsertWithWhereUniqueWithoutOrganizationInput | UserInviteUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserInviteCreateManyOrganizationInputEnvelope
    set?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    disconnect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    delete?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    update?: UserInviteUpdateWithWhereUniqueWithoutOrganizationInput | UserInviteUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserInviteUpdateManyWithWhereWithoutOrganizationInput | UserInviteUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutContentInput = {
    create?: XOR<UserCreateWithoutContentInput, UserUncheckedCreateWithoutContentInput>
    connectOrCreate?: UserCreateOrConnectWithoutContentInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutContentInput = {
    create?: XOR<OrganizationCreateWithoutContentInput, OrganizationUncheckedCreateWithoutContentInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutContentInput
    connect?: OrganizationWhereUniqueInput
  }

  export type HostedFileCreateNestedOneWithoutContentInput = {
    create?: XOR<HostedFileCreateWithoutContentInput, HostedFileUncheckedCreateWithoutContentInput>
    connectOrCreate?: HostedFileCreateOrConnectWithoutContentInput
    connect?: HostedFileWhereUniqueInput
  }

  export type DisplayContentPairCreateNestedManyWithoutContentInput = {
    create?: XOR<DisplayContentPairCreateWithoutContentInput, DisplayContentPairUncheckedCreateWithoutContentInput> | DisplayContentPairCreateWithoutContentInput[] | DisplayContentPairUncheckedCreateWithoutContentInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutContentInput | DisplayContentPairCreateOrConnectWithoutContentInput[]
    createMany?: DisplayContentPairCreateManyContentInputEnvelope
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
  }

  export type PlaylistItemCreateNestedManyWithoutContentInput = {
    create?: XOR<PlaylistItemCreateWithoutContentInput, PlaylistItemUncheckedCreateWithoutContentInput> | PlaylistItemCreateWithoutContentInput[] | PlaylistItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutContentInput | PlaylistItemCreateOrConnectWithoutContentInput[]
    createMany?: PlaylistItemCreateManyContentInputEnvelope
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
  }

  export type StyleCreateNestedOneWithoutContentInput = {
    create?: XOR<StyleCreateWithoutContentInput, StyleUncheckedCreateWithoutContentInput>
    connectOrCreate?: StyleCreateOrConnectWithoutContentInput
    connect?: StyleWhereUniqueInput
  }

  export type ExhibitCreateNestedManyWithoutContentInput = {
    create?: XOR<ExhibitCreateWithoutContentInput, ExhibitUncheckedCreateWithoutContentInput> | ExhibitCreateWithoutContentInput[] | ExhibitUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ExhibitCreateOrConnectWithoutContentInput | ExhibitCreateOrConnectWithoutContentInput[]
    connect?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
  }

  export type DisplayContentPairUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<DisplayContentPairCreateWithoutContentInput, DisplayContentPairUncheckedCreateWithoutContentInput> | DisplayContentPairCreateWithoutContentInput[] | DisplayContentPairUncheckedCreateWithoutContentInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutContentInput | DisplayContentPairCreateOrConnectWithoutContentInput[]
    createMany?: DisplayContentPairCreateManyContentInputEnvelope
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
  }

  export type PlaylistItemUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<PlaylistItemCreateWithoutContentInput, PlaylistItemUncheckedCreateWithoutContentInput> | PlaylistItemCreateWithoutContentInput[] | PlaylistItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutContentInput | PlaylistItemCreateOrConnectWithoutContentInput[]
    createMany?: PlaylistItemCreateManyContentInputEnvelope
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
  }

  export type ExhibitUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<ExhibitCreateWithoutContentInput, ExhibitUncheckedCreateWithoutContentInput> | ExhibitCreateWithoutContentInput[] | ExhibitUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ExhibitCreateOrConnectWithoutContentInput | ExhibitCreateOrConnectWithoutContentInput[]
    connect?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutContentNestedInput = {
    create?: XOR<UserCreateWithoutContentInput, UserUncheckedCreateWithoutContentInput>
    connectOrCreate?: UserCreateOrConnectWithoutContentInput
    upsert?: UserUpsertWithoutContentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutContentInput, UserUpdateWithoutContentInput>, UserUncheckedUpdateWithoutContentInput>
  }

  export type OrganizationUpdateOneRequiredWithoutContentNestedInput = {
    create?: XOR<OrganizationCreateWithoutContentInput, OrganizationUncheckedCreateWithoutContentInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutContentInput
    upsert?: OrganizationUpsertWithoutContentInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutContentInput, OrganizationUpdateWithoutContentInput>, OrganizationUncheckedUpdateWithoutContentInput>
  }

  export type HostedFileUpdateOneWithoutContentNestedInput = {
    create?: XOR<HostedFileCreateWithoutContentInput, HostedFileUncheckedCreateWithoutContentInput>
    connectOrCreate?: HostedFileCreateOrConnectWithoutContentInput
    upsert?: HostedFileUpsertWithoutContentInput
    disconnect?: HostedFileWhereInput | boolean
    delete?: HostedFileWhereInput | boolean
    connect?: HostedFileWhereUniqueInput
    update?: XOR<XOR<HostedFileUpdateToOneWithWhereWithoutContentInput, HostedFileUpdateWithoutContentInput>, HostedFileUncheckedUpdateWithoutContentInput>
  }

  export type DisplayContentPairUpdateManyWithoutContentNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutContentInput, DisplayContentPairUncheckedCreateWithoutContentInput> | DisplayContentPairCreateWithoutContentInput[] | DisplayContentPairUncheckedCreateWithoutContentInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutContentInput | DisplayContentPairCreateOrConnectWithoutContentInput[]
    upsert?: DisplayContentPairUpsertWithWhereUniqueWithoutContentInput | DisplayContentPairUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: DisplayContentPairCreateManyContentInputEnvelope
    set?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    disconnect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    delete?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    update?: DisplayContentPairUpdateWithWhereUniqueWithoutContentInput | DisplayContentPairUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: DisplayContentPairUpdateManyWithWhereWithoutContentInput | DisplayContentPairUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
  }

  export type PlaylistItemUpdateManyWithoutContentNestedInput = {
    create?: XOR<PlaylistItemCreateWithoutContentInput, PlaylistItemUncheckedCreateWithoutContentInput> | PlaylistItemCreateWithoutContentInput[] | PlaylistItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutContentInput | PlaylistItemCreateOrConnectWithoutContentInput[]
    upsert?: PlaylistItemUpsertWithWhereUniqueWithoutContentInput | PlaylistItemUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: PlaylistItemCreateManyContentInputEnvelope
    set?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    disconnect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    delete?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    update?: PlaylistItemUpdateWithWhereUniqueWithoutContentInput | PlaylistItemUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: PlaylistItemUpdateManyWithWhereWithoutContentInput | PlaylistItemUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
  }

  export type StyleUpdateOneWithoutContentNestedInput = {
    create?: XOR<StyleCreateWithoutContentInput, StyleUncheckedCreateWithoutContentInput>
    connectOrCreate?: StyleCreateOrConnectWithoutContentInput
    upsert?: StyleUpsertWithoutContentInput
    disconnect?: StyleWhereInput | boolean
    delete?: StyleWhereInput | boolean
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutContentInput, StyleUpdateWithoutContentInput>, StyleUncheckedUpdateWithoutContentInput>
  }

  export type ExhibitUpdateManyWithoutContentNestedInput = {
    create?: XOR<ExhibitCreateWithoutContentInput, ExhibitUncheckedCreateWithoutContentInput> | ExhibitCreateWithoutContentInput[] | ExhibitUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ExhibitCreateOrConnectWithoutContentInput | ExhibitCreateOrConnectWithoutContentInput[]
    upsert?: ExhibitUpsertWithWhereUniqueWithoutContentInput | ExhibitUpsertWithWhereUniqueWithoutContentInput[]
    set?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    disconnect?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    delete?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    connect?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    update?: ExhibitUpdateWithWhereUniqueWithoutContentInput | ExhibitUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ExhibitUpdateManyWithWhereWithoutContentInput | ExhibitUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ExhibitScalarWhereInput | ExhibitScalarWhereInput[]
  }

  export type DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutContentInput, DisplayContentPairUncheckedCreateWithoutContentInput> | DisplayContentPairCreateWithoutContentInput[] | DisplayContentPairUncheckedCreateWithoutContentInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutContentInput | DisplayContentPairCreateOrConnectWithoutContentInput[]
    upsert?: DisplayContentPairUpsertWithWhereUniqueWithoutContentInput | DisplayContentPairUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: DisplayContentPairCreateManyContentInputEnvelope
    set?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    disconnect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    delete?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    update?: DisplayContentPairUpdateWithWhereUniqueWithoutContentInput | DisplayContentPairUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: DisplayContentPairUpdateManyWithWhereWithoutContentInput | DisplayContentPairUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
  }

  export type PlaylistItemUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<PlaylistItemCreateWithoutContentInput, PlaylistItemUncheckedCreateWithoutContentInput> | PlaylistItemCreateWithoutContentInput[] | PlaylistItemUncheckedCreateWithoutContentInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutContentInput | PlaylistItemCreateOrConnectWithoutContentInput[]
    upsert?: PlaylistItemUpsertWithWhereUniqueWithoutContentInput | PlaylistItemUpsertWithWhereUniqueWithoutContentInput[]
    createMany?: PlaylistItemCreateManyContentInputEnvelope
    set?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    disconnect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    delete?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    update?: PlaylistItemUpdateWithWhereUniqueWithoutContentInput | PlaylistItemUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: PlaylistItemUpdateManyWithWhereWithoutContentInput | PlaylistItemUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
  }

  export type ExhibitUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<ExhibitCreateWithoutContentInput, ExhibitUncheckedCreateWithoutContentInput> | ExhibitCreateWithoutContentInput[] | ExhibitUncheckedCreateWithoutContentInput[]
    connectOrCreate?: ExhibitCreateOrConnectWithoutContentInput | ExhibitCreateOrConnectWithoutContentInput[]
    upsert?: ExhibitUpsertWithWhereUniqueWithoutContentInput | ExhibitUpsertWithWhereUniqueWithoutContentInput[]
    set?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    disconnect?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    delete?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    connect?: ExhibitWhereUniqueInput | ExhibitWhereUniqueInput[]
    update?: ExhibitUpdateWithWhereUniqueWithoutContentInput | ExhibitUpdateWithWhereUniqueWithoutContentInput[]
    updateMany?: ExhibitUpdateManyWithWhereWithoutContentInput | ExhibitUpdateManyWithWhereWithoutContentInput[]
    deleteMany?: ExhibitScalarWhereInput | ExhibitScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutDisplaysInput = {
    create?: XOR<OrganizationCreateWithoutDisplaysInput, OrganizationUncheckedCreateWithoutDisplaysInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutDisplaysInput
    connect?: OrganizationWhereUniqueInput
  }

  export type StyleCreateNestedOneWithoutDisplayInput = {
    create?: XOR<StyleCreateWithoutDisplayInput, StyleUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: StyleCreateOrConnectWithoutDisplayInput
    connect?: StyleWhereUniqueInput
  }

  export type DisplayContentPairCreateNestedManyWithoutDisplayInput = {
    create?: XOR<DisplayContentPairCreateWithoutDisplayInput, DisplayContentPairUncheckedCreateWithoutDisplayInput> | DisplayContentPairCreateWithoutDisplayInput[] | DisplayContentPairUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutDisplayInput | DisplayContentPairCreateOrConnectWithoutDisplayInput[]
    createMany?: DisplayContentPairCreateManyDisplayInputEnvelope
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
  }

  export type DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput = {
    create?: XOR<DisplayContentPairCreateWithoutCurrentDisplayInput, DisplayContentPairUncheckedCreateWithoutCurrentDisplayInput>
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutCurrentDisplayInput
    connect?: DisplayContentPairWhereUniqueInput
  }

  export type PlaylistCreateNestedManyWithoutDisplayInput = {
    create?: XOR<PlaylistCreateWithoutDisplayInput, PlaylistUncheckedCreateWithoutDisplayInput> | PlaylistCreateWithoutDisplayInput[] | PlaylistUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutDisplayInput | PlaylistCreateOrConnectWithoutDisplayInput[]
    createMany?: PlaylistCreateManyDisplayInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type PairingCodeCreateNestedManyWithoutDisplayInput = {
    create?: XOR<PairingCodeCreateWithoutDisplayInput, PairingCodeUncheckedCreateWithoutDisplayInput> | PairingCodeCreateWithoutDisplayInput[] | PairingCodeUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PairingCodeCreateOrConnectWithoutDisplayInput | PairingCodeCreateOrConnectWithoutDisplayInput[]
    createMany?: PairingCodeCreateManyDisplayInputEnvelope
    connect?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
  }

  export type DisplayRenewalCreateNestedOneWithoutDisplayInput = {
    create?: XOR<DisplayRenewalCreateWithoutDisplayInput, DisplayRenewalUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: DisplayRenewalCreateOrConnectWithoutDisplayInput
    connect?: DisplayRenewalWhereUniqueInput
  }

  export type WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput = {
    create?: XOR<WebsocketConnectionTokenCreateWithoutDisplayInput, WebsocketConnectionTokenUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: WebsocketConnectionTokenCreateOrConnectWithoutDisplayInput
    connect?: WebsocketConnectionTokenWhereUniqueInput
  }

  export type DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput = {
    create?: XOR<DisplayContentPairCreateWithoutDisplayInput, DisplayContentPairUncheckedCreateWithoutDisplayInput> | DisplayContentPairCreateWithoutDisplayInput[] | DisplayContentPairUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutDisplayInput | DisplayContentPairCreateOrConnectWithoutDisplayInput[]
    createMany?: DisplayContentPairCreateManyDisplayInputEnvelope
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
  }

  export type PlaylistUncheckedCreateNestedManyWithoutDisplayInput = {
    create?: XOR<PlaylistCreateWithoutDisplayInput, PlaylistUncheckedCreateWithoutDisplayInput> | PlaylistCreateWithoutDisplayInput[] | PlaylistUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutDisplayInput | PlaylistCreateOrConnectWithoutDisplayInput[]
    createMany?: PlaylistCreateManyDisplayInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type PairingCodeUncheckedCreateNestedManyWithoutDisplayInput = {
    create?: XOR<PairingCodeCreateWithoutDisplayInput, PairingCodeUncheckedCreateWithoutDisplayInput> | PairingCodeCreateWithoutDisplayInput[] | PairingCodeUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PairingCodeCreateOrConnectWithoutDisplayInput | PairingCodeCreateOrConnectWithoutDisplayInput[]
    createMany?: PairingCodeCreateManyDisplayInputEnvelope
    connect?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
  }

  export type DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput = {
    create?: XOR<DisplayRenewalCreateWithoutDisplayInput, DisplayRenewalUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: DisplayRenewalCreateOrConnectWithoutDisplayInput
    connect?: DisplayRenewalWhereUniqueInput
  }

  export type WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput = {
    create?: XOR<WebsocketConnectionTokenCreateWithoutDisplayInput, WebsocketConnectionTokenUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: WebsocketConnectionTokenCreateOrConnectWithoutDisplayInput
    connect?: WebsocketConnectionTokenWhereUniqueInput
  }

  export type EnumDeviceTypeFieldUpdateOperationsInput = {
    set?: $Enums.DeviceType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrganizationUpdateOneRequiredWithoutDisplaysNestedInput = {
    create?: XOR<OrganizationCreateWithoutDisplaysInput, OrganizationUncheckedCreateWithoutDisplaysInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutDisplaysInput
    upsert?: OrganizationUpsertWithoutDisplaysInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutDisplaysInput, OrganizationUpdateWithoutDisplaysInput>, OrganizationUncheckedUpdateWithoutDisplaysInput>
  }

  export type StyleUpdateOneWithoutDisplayNestedInput = {
    create?: XOR<StyleCreateWithoutDisplayInput, StyleUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: StyleCreateOrConnectWithoutDisplayInput
    upsert?: StyleUpsertWithoutDisplayInput
    disconnect?: StyleWhereInput | boolean
    delete?: StyleWhereInput | boolean
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutDisplayInput, StyleUpdateWithoutDisplayInput>, StyleUncheckedUpdateWithoutDisplayInput>
  }

  export type DisplayContentPairUpdateManyWithoutDisplayNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutDisplayInput, DisplayContentPairUncheckedCreateWithoutDisplayInput> | DisplayContentPairCreateWithoutDisplayInput[] | DisplayContentPairUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutDisplayInput | DisplayContentPairCreateOrConnectWithoutDisplayInput[]
    upsert?: DisplayContentPairUpsertWithWhereUniqueWithoutDisplayInput | DisplayContentPairUpsertWithWhereUniqueWithoutDisplayInput[]
    createMany?: DisplayContentPairCreateManyDisplayInputEnvelope
    set?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    disconnect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    delete?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    update?: DisplayContentPairUpdateWithWhereUniqueWithoutDisplayInput | DisplayContentPairUpdateWithWhereUniqueWithoutDisplayInput[]
    updateMany?: DisplayContentPairUpdateManyWithWhereWithoutDisplayInput | DisplayContentPairUpdateManyWithWhereWithoutDisplayInput[]
    deleteMany?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
  }

  export type DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutCurrentDisplayInput, DisplayContentPairUncheckedCreateWithoutCurrentDisplayInput>
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutCurrentDisplayInput
    upsert?: DisplayContentPairUpsertWithoutCurrentDisplayInput
    disconnect?: DisplayContentPairWhereInput | boolean
    delete?: DisplayContentPairWhereInput | boolean
    connect?: DisplayContentPairWhereUniqueInput
    update?: XOR<XOR<DisplayContentPairUpdateToOneWithWhereWithoutCurrentDisplayInput, DisplayContentPairUpdateWithoutCurrentDisplayInput>, DisplayContentPairUncheckedUpdateWithoutCurrentDisplayInput>
  }

  export type PlaylistUpdateManyWithoutDisplayNestedInput = {
    create?: XOR<PlaylistCreateWithoutDisplayInput, PlaylistUncheckedCreateWithoutDisplayInput> | PlaylistCreateWithoutDisplayInput[] | PlaylistUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutDisplayInput | PlaylistCreateOrConnectWithoutDisplayInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutDisplayInput | PlaylistUpsertWithWhereUniqueWithoutDisplayInput[]
    createMany?: PlaylistCreateManyDisplayInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutDisplayInput | PlaylistUpdateWithWhereUniqueWithoutDisplayInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutDisplayInput | PlaylistUpdateManyWithWhereWithoutDisplayInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type PairingCodeUpdateManyWithoutDisplayNestedInput = {
    create?: XOR<PairingCodeCreateWithoutDisplayInput, PairingCodeUncheckedCreateWithoutDisplayInput> | PairingCodeCreateWithoutDisplayInput[] | PairingCodeUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PairingCodeCreateOrConnectWithoutDisplayInput | PairingCodeCreateOrConnectWithoutDisplayInput[]
    upsert?: PairingCodeUpsertWithWhereUniqueWithoutDisplayInput | PairingCodeUpsertWithWhereUniqueWithoutDisplayInput[]
    createMany?: PairingCodeCreateManyDisplayInputEnvelope
    set?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    disconnect?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    delete?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    connect?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    update?: PairingCodeUpdateWithWhereUniqueWithoutDisplayInput | PairingCodeUpdateWithWhereUniqueWithoutDisplayInput[]
    updateMany?: PairingCodeUpdateManyWithWhereWithoutDisplayInput | PairingCodeUpdateManyWithWhereWithoutDisplayInput[]
    deleteMany?: PairingCodeScalarWhereInput | PairingCodeScalarWhereInput[]
  }

  export type DisplayRenewalUpdateOneWithoutDisplayNestedInput = {
    create?: XOR<DisplayRenewalCreateWithoutDisplayInput, DisplayRenewalUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: DisplayRenewalCreateOrConnectWithoutDisplayInput
    upsert?: DisplayRenewalUpsertWithoutDisplayInput
    disconnect?: DisplayRenewalWhereInput | boolean
    delete?: DisplayRenewalWhereInput | boolean
    connect?: DisplayRenewalWhereUniqueInput
    update?: XOR<XOR<DisplayRenewalUpdateToOneWithWhereWithoutDisplayInput, DisplayRenewalUpdateWithoutDisplayInput>, DisplayRenewalUncheckedUpdateWithoutDisplayInput>
  }

  export type WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput = {
    create?: XOR<WebsocketConnectionTokenCreateWithoutDisplayInput, WebsocketConnectionTokenUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: WebsocketConnectionTokenCreateOrConnectWithoutDisplayInput
    upsert?: WebsocketConnectionTokenUpsertWithoutDisplayInput
    disconnect?: WebsocketConnectionTokenWhereInput | boolean
    delete?: WebsocketConnectionTokenWhereInput | boolean
    connect?: WebsocketConnectionTokenWhereUniqueInput
    update?: XOR<XOR<WebsocketConnectionTokenUpdateToOneWithWhereWithoutDisplayInput, WebsocketConnectionTokenUpdateWithoutDisplayInput>, WebsocketConnectionTokenUncheckedUpdateWithoutDisplayInput>
  }

  export type DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutDisplayInput, DisplayContentPairUncheckedCreateWithoutDisplayInput> | DisplayContentPairCreateWithoutDisplayInput[] | DisplayContentPairUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutDisplayInput | DisplayContentPairCreateOrConnectWithoutDisplayInput[]
    upsert?: DisplayContentPairUpsertWithWhereUniqueWithoutDisplayInput | DisplayContentPairUpsertWithWhereUniqueWithoutDisplayInput[]
    createMany?: DisplayContentPairCreateManyDisplayInputEnvelope
    set?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    disconnect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    delete?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    update?: DisplayContentPairUpdateWithWhereUniqueWithoutDisplayInput | DisplayContentPairUpdateWithWhereUniqueWithoutDisplayInput[]
    updateMany?: DisplayContentPairUpdateManyWithWhereWithoutDisplayInput | DisplayContentPairUpdateManyWithWhereWithoutDisplayInput[]
    deleteMany?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
  }

  export type PlaylistUncheckedUpdateManyWithoutDisplayNestedInput = {
    create?: XOR<PlaylistCreateWithoutDisplayInput, PlaylistUncheckedCreateWithoutDisplayInput> | PlaylistCreateWithoutDisplayInput[] | PlaylistUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutDisplayInput | PlaylistCreateOrConnectWithoutDisplayInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutDisplayInput | PlaylistUpsertWithWhereUniqueWithoutDisplayInput[]
    createMany?: PlaylistCreateManyDisplayInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutDisplayInput | PlaylistUpdateWithWhereUniqueWithoutDisplayInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutDisplayInput | PlaylistUpdateManyWithWhereWithoutDisplayInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput = {
    create?: XOR<PairingCodeCreateWithoutDisplayInput, PairingCodeUncheckedCreateWithoutDisplayInput> | PairingCodeCreateWithoutDisplayInput[] | PairingCodeUncheckedCreateWithoutDisplayInput[]
    connectOrCreate?: PairingCodeCreateOrConnectWithoutDisplayInput | PairingCodeCreateOrConnectWithoutDisplayInput[]
    upsert?: PairingCodeUpsertWithWhereUniqueWithoutDisplayInput | PairingCodeUpsertWithWhereUniqueWithoutDisplayInput[]
    createMany?: PairingCodeCreateManyDisplayInputEnvelope
    set?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    disconnect?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    delete?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    connect?: PairingCodeWhereUniqueInput | PairingCodeWhereUniqueInput[]
    update?: PairingCodeUpdateWithWhereUniqueWithoutDisplayInput | PairingCodeUpdateWithWhereUniqueWithoutDisplayInput[]
    updateMany?: PairingCodeUpdateManyWithWhereWithoutDisplayInput | PairingCodeUpdateManyWithWhereWithoutDisplayInput[]
    deleteMany?: PairingCodeScalarWhereInput | PairingCodeScalarWhereInput[]
  }

  export type DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput = {
    create?: XOR<DisplayRenewalCreateWithoutDisplayInput, DisplayRenewalUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: DisplayRenewalCreateOrConnectWithoutDisplayInput
    upsert?: DisplayRenewalUpsertWithoutDisplayInput
    disconnect?: DisplayRenewalWhereInput | boolean
    delete?: DisplayRenewalWhereInput | boolean
    connect?: DisplayRenewalWhereUniqueInput
    update?: XOR<XOR<DisplayRenewalUpdateToOneWithWhereWithoutDisplayInput, DisplayRenewalUpdateWithoutDisplayInput>, DisplayRenewalUncheckedUpdateWithoutDisplayInput>
  }

  export type WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput = {
    create?: XOR<WebsocketConnectionTokenCreateWithoutDisplayInput, WebsocketConnectionTokenUncheckedCreateWithoutDisplayInput>
    connectOrCreate?: WebsocketConnectionTokenCreateOrConnectWithoutDisplayInput
    upsert?: WebsocketConnectionTokenUpsertWithoutDisplayInput
    disconnect?: WebsocketConnectionTokenWhereInput | boolean
    delete?: WebsocketConnectionTokenWhereInput | boolean
    connect?: WebsocketConnectionTokenWhereUniqueInput
    update?: XOR<XOR<WebsocketConnectionTokenUpdateToOneWithWhereWithoutDisplayInput, WebsocketConnectionTokenUpdateWithoutDisplayInput>, WebsocketConnectionTokenUncheckedUpdateWithoutDisplayInput>
  }

  export type DisplayCreateNestedOneWithoutPairingCodesInput = {
    create?: XOR<DisplayCreateWithoutPairingCodesInput, DisplayUncheckedCreateWithoutPairingCodesInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutPairingCodesInput
    connect?: DisplayWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DisplayUpdateOneWithoutPairingCodesNestedInput = {
    create?: XOR<DisplayCreateWithoutPairingCodesInput, DisplayUncheckedCreateWithoutPairingCodesInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutPairingCodesInput
    upsert?: DisplayUpsertWithoutPairingCodesInput
    disconnect?: DisplayWhereInput | boolean
    delete?: DisplayWhereInput | boolean
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutPairingCodesInput, DisplayUpdateWithoutPairingCodesInput>, DisplayUncheckedUpdateWithoutPairingCodesInput>
  }

  export type DisplayCreateNestedOneWithoutDisplayContentPairsInput = {
    create?: XOR<DisplayCreateWithoutDisplayContentPairsInput, DisplayUncheckedCreateWithoutDisplayContentPairsInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutDisplayContentPairsInput
    connect?: DisplayWhereUniqueInput
  }

  export type DisplayCreateNestedOneWithoutCurrentDisplayContentPairInput = {
    create?: XOR<DisplayCreateWithoutCurrentDisplayContentPairInput, DisplayUncheckedCreateWithoutCurrentDisplayContentPairInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutCurrentDisplayContentPairInput
    connect?: DisplayWhereUniqueInput
  }

  export type ContentCreateNestedOneWithoutDisplayContentPairsInput = {
    create?: XOR<ContentCreateWithoutDisplayContentPairsInput, ContentUncheckedCreateWithoutDisplayContentPairsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutDisplayContentPairsInput
    connect?: ContentWhereUniqueInput
  }

  export type StyleCreateNestedOneWithoutDisplayContentPairsInput = {
    create?: XOR<StyleCreateWithoutDisplayContentPairsInput, StyleUncheckedCreateWithoutDisplayContentPairsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutDisplayContentPairsInput
    connect?: StyleWhereUniqueInput
  }

  export type PlaylistItemCreateNestedManyWithoutDisplayContentPairInput = {
    create?: XOR<PlaylistItemCreateWithoutDisplayContentPairInput, PlaylistItemUncheckedCreateWithoutDisplayContentPairInput> | PlaylistItemCreateWithoutDisplayContentPairInput[] | PlaylistItemUncheckedCreateWithoutDisplayContentPairInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutDisplayContentPairInput | PlaylistItemCreateOrConnectWithoutDisplayContentPairInput[]
    createMany?: PlaylistItemCreateManyDisplayContentPairInputEnvelope
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
  }

  export type DisplayUncheckedCreateNestedOneWithoutCurrentDisplayContentPairInput = {
    create?: XOR<DisplayCreateWithoutCurrentDisplayContentPairInput, DisplayUncheckedCreateWithoutCurrentDisplayContentPairInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutCurrentDisplayContentPairInput
    connect?: DisplayWhereUniqueInput
  }

  export type PlaylistItemUncheckedCreateNestedManyWithoutDisplayContentPairInput = {
    create?: XOR<PlaylistItemCreateWithoutDisplayContentPairInput, PlaylistItemUncheckedCreateWithoutDisplayContentPairInput> | PlaylistItemCreateWithoutDisplayContentPairInput[] | PlaylistItemUncheckedCreateWithoutDisplayContentPairInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutDisplayContentPairInput | PlaylistItemCreateOrConnectWithoutDisplayContentPairInput[]
    createMany?: PlaylistItemCreateManyDisplayContentPairInputEnvelope
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
  }

  export type DisplayUpdateOneRequiredWithoutDisplayContentPairsNestedInput = {
    create?: XOR<DisplayCreateWithoutDisplayContentPairsInput, DisplayUncheckedCreateWithoutDisplayContentPairsInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutDisplayContentPairsInput
    upsert?: DisplayUpsertWithoutDisplayContentPairsInput
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutDisplayContentPairsInput, DisplayUpdateWithoutDisplayContentPairsInput>, DisplayUncheckedUpdateWithoutDisplayContentPairsInput>
  }

  export type DisplayUpdateOneWithoutCurrentDisplayContentPairNestedInput = {
    create?: XOR<DisplayCreateWithoutCurrentDisplayContentPairInput, DisplayUncheckedCreateWithoutCurrentDisplayContentPairInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutCurrentDisplayContentPairInput
    upsert?: DisplayUpsertWithoutCurrentDisplayContentPairInput
    disconnect?: DisplayWhereInput | boolean
    delete?: DisplayWhereInput | boolean
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutCurrentDisplayContentPairInput, DisplayUpdateWithoutCurrentDisplayContentPairInput>, DisplayUncheckedUpdateWithoutCurrentDisplayContentPairInput>
  }

  export type ContentUpdateOneRequiredWithoutDisplayContentPairsNestedInput = {
    create?: XOR<ContentCreateWithoutDisplayContentPairsInput, ContentUncheckedCreateWithoutDisplayContentPairsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutDisplayContentPairsInput
    upsert?: ContentUpsertWithoutDisplayContentPairsInput
    connect?: ContentWhereUniqueInput
    update?: XOR<XOR<ContentUpdateToOneWithWhereWithoutDisplayContentPairsInput, ContentUpdateWithoutDisplayContentPairsInput>, ContentUncheckedUpdateWithoutDisplayContentPairsInput>
  }

  export type StyleUpdateOneWithoutDisplayContentPairsNestedInput = {
    create?: XOR<StyleCreateWithoutDisplayContentPairsInput, StyleUncheckedCreateWithoutDisplayContentPairsInput>
    connectOrCreate?: StyleCreateOrConnectWithoutDisplayContentPairsInput
    upsert?: StyleUpsertWithoutDisplayContentPairsInput
    disconnect?: StyleWhereInput | boolean
    delete?: StyleWhereInput | boolean
    connect?: StyleWhereUniqueInput
    update?: XOR<XOR<StyleUpdateToOneWithWhereWithoutDisplayContentPairsInput, StyleUpdateWithoutDisplayContentPairsInput>, StyleUncheckedUpdateWithoutDisplayContentPairsInput>
  }

  export type PlaylistItemUpdateManyWithoutDisplayContentPairNestedInput = {
    create?: XOR<PlaylistItemCreateWithoutDisplayContentPairInput, PlaylistItemUncheckedCreateWithoutDisplayContentPairInput> | PlaylistItemCreateWithoutDisplayContentPairInput[] | PlaylistItemUncheckedCreateWithoutDisplayContentPairInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutDisplayContentPairInput | PlaylistItemCreateOrConnectWithoutDisplayContentPairInput[]
    upsert?: PlaylistItemUpsertWithWhereUniqueWithoutDisplayContentPairInput | PlaylistItemUpsertWithWhereUniqueWithoutDisplayContentPairInput[]
    createMany?: PlaylistItemCreateManyDisplayContentPairInputEnvelope
    set?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    disconnect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    delete?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    update?: PlaylistItemUpdateWithWhereUniqueWithoutDisplayContentPairInput | PlaylistItemUpdateWithWhereUniqueWithoutDisplayContentPairInput[]
    updateMany?: PlaylistItemUpdateManyWithWhereWithoutDisplayContentPairInput | PlaylistItemUpdateManyWithWhereWithoutDisplayContentPairInput[]
    deleteMany?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
  }

  export type DisplayUncheckedUpdateOneWithoutCurrentDisplayContentPairNestedInput = {
    create?: XOR<DisplayCreateWithoutCurrentDisplayContentPairInput, DisplayUncheckedCreateWithoutCurrentDisplayContentPairInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutCurrentDisplayContentPairInput
    upsert?: DisplayUpsertWithoutCurrentDisplayContentPairInput
    disconnect?: DisplayWhereInput | boolean
    delete?: DisplayWhereInput | boolean
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutCurrentDisplayContentPairInput, DisplayUpdateWithoutCurrentDisplayContentPairInput>, DisplayUncheckedUpdateWithoutCurrentDisplayContentPairInput>
  }

  export type PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairNestedInput = {
    create?: XOR<PlaylistItemCreateWithoutDisplayContentPairInput, PlaylistItemUncheckedCreateWithoutDisplayContentPairInput> | PlaylistItemCreateWithoutDisplayContentPairInput[] | PlaylistItemUncheckedCreateWithoutDisplayContentPairInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutDisplayContentPairInput | PlaylistItemCreateOrConnectWithoutDisplayContentPairInput[]
    upsert?: PlaylistItemUpsertWithWhereUniqueWithoutDisplayContentPairInput | PlaylistItemUpsertWithWhereUniqueWithoutDisplayContentPairInput[]
    createMany?: PlaylistItemCreateManyDisplayContentPairInputEnvelope
    set?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    disconnect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    delete?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    update?: PlaylistItemUpdateWithWhereUniqueWithoutDisplayContentPairInput | PlaylistItemUpdateWithWhereUniqueWithoutDisplayContentPairInput[]
    updateMany?: PlaylistItemUpdateManyWithWhereWithoutDisplayContentPairInput | PlaylistItemUpdateManyWithWhereWithoutDisplayContentPairInput[]
    deleteMany?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
  }

  export type ContentCreateNestedManyWithoutStyleInput = {
    create?: XOR<ContentCreateWithoutStyleInput, ContentUncheckedCreateWithoutStyleInput> | ContentCreateWithoutStyleInput[] | ContentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutStyleInput | ContentCreateOrConnectWithoutStyleInput[]
    createMany?: ContentCreateManyStyleInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type DisplayCreateNestedOneWithoutStyleInput = {
    create?: XOR<DisplayCreateWithoutStyleInput, DisplayUncheckedCreateWithoutStyleInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutStyleInput
    connect?: DisplayWhereUniqueInput
  }

  export type DisplayContentPairCreateNestedManyWithoutStyleInput = {
    create?: XOR<DisplayContentPairCreateWithoutStyleInput, DisplayContentPairUncheckedCreateWithoutStyleInput> | DisplayContentPairCreateWithoutStyleInput[] | DisplayContentPairUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutStyleInput | DisplayContentPairCreateOrConnectWithoutStyleInput[]
    createMany?: DisplayContentPairCreateManyStyleInputEnvelope
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
  }

  export type ContentUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<ContentCreateWithoutStyleInput, ContentUncheckedCreateWithoutStyleInput> | ContentCreateWithoutStyleInput[] | ContentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutStyleInput | ContentCreateOrConnectWithoutStyleInput[]
    createMany?: ContentCreateManyStyleInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type DisplayUncheckedCreateNestedOneWithoutStyleInput = {
    create?: XOR<DisplayCreateWithoutStyleInput, DisplayUncheckedCreateWithoutStyleInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutStyleInput
    connect?: DisplayWhereUniqueInput
  }

  export type DisplayContentPairUncheckedCreateNestedManyWithoutStyleInput = {
    create?: XOR<DisplayContentPairCreateWithoutStyleInput, DisplayContentPairUncheckedCreateWithoutStyleInput> | DisplayContentPairCreateWithoutStyleInput[] | DisplayContentPairUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutStyleInput | DisplayContentPairCreateOrConnectWithoutStyleInput[]
    createMany?: DisplayContentPairCreateManyStyleInputEnvelope
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ContentUpdateManyWithoutStyleNestedInput = {
    create?: XOR<ContentCreateWithoutStyleInput, ContentUncheckedCreateWithoutStyleInput> | ContentCreateWithoutStyleInput[] | ContentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutStyleInput | ContentCreateOrConnectWithoutStyleInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutStyleInput | ContentUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: ContentCreateManyStyleInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutStyleInput | ContentUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutStyleInput | ContentUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type DisplayUpdateOneWithoutStyleNestedInput = {
    create?: XOR<DisplayCreateWithoutStyleInput, DisplayUncheckedCreateWithoutStyleInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutStyleInput
    upsert?: DisplayUpsertWithoutStyleInput
    disconnect?: DisplayWhereInput | boolean
    delete?: DisplayWhereInput | boolean
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutStyleInput, DisplayUpdateWithoutStyleInput>, DisplayUncheckedUpdateWithoutStyleInput>
  }

  export type DisplayContentPairUpdateManyWithoutStyleNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutStyleInput, DisplayContentPairUncheckedCreateWithoutStyleInput> | DisplayContentPairCreateWithoutStyleInput[] | DisplayContentPairUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutStyleInput | DisplayContentPairCreateOrConnectWithoutStyleInput[]
    upsert?: DisplayContentPairUpsertWithWhereUniqueWithoutStyleInput | DisplayContentPairUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: DisplayContentPairCreateManyStyleInputEnvelope
    set?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    disconnect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    delete?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    update?: DisplayContentPairUpdateWithWhereUniqueWithoutStyleInput | DisplayContentPairUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: DisplayContentPairUpdateManyWithWhereWithoutStyleInput | DisplayContentPairUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
  }

  export type ContentUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<ContentCreateWithoutStyleInput, ContentUncheckedCreateWithoutStyleInput> | ContentCreateWithoutStyleInput[] | ContentUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutStyleInput | ContentCreateOrConnectWithoutStyleInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutStyleInput | ContentUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: ContentCreateManyStyleInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutStyleInput | ContentUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutStyleInput | ContentUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type DisplayUncheckedUpdateOneWithoutStyleNestedInput = {
    create?: XOR<DisplayCreateWithoutStyleInput, DisplayUncheckedCreateWithoutStyleInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutStyleInput
    upsert?: DisplayUpsertWithoutStyleInput
    disconnect?: DisplayWhereInput | boolean
    delete?: DisplayWhereInput | boolean
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutStyleInput, DisplayUpdateWithoutStyleInput>, DisplayUncheckedUpdateWithoutStyleInput>
  }

  export type DisplayContentPairUncheckedUpdateManyWithoutStyleNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutStyleInput, DisplayContentPairUncheckedCreateWithoutStyleInput> | DisplayContentPairCreateWithoutStyleInput[] | DisplayContentPairUncheckedCreateWithoutStyleInput[]
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutStyleInput | DisplayContentPairCreateOrConnectWithoutStyleInput[]
    upsert?: DisplayContentPairUpsertWithWhereUniqueWithoutStyleInput | DisplayContentPairUpsertWithWhereUniqueWithoutStyleInput[]
    createMany?: DisplayContentPairCreateManyStyleInputEnvelope
    set?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    disconnect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    delete?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    connect?: DisplayContentPairWhereUniqueInput | DisplayContentPairWhereUniqueInput[]
    update?: DisplayContentPairUpdateWithWhereUniqueWithoutStyleInput | DisplayContentPairUpdateWithWhereUniqueWithoutStyleInput[]
    updateMany?: DisplayContentPairUpdateManyWithWhereWithoutStyleInput | DisplayContentPairUpdateManyWithWhereWithoutStyleInput[]
    deleteMany?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPlaylistsInput = {
    create?: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistsInput
    connect?: UserWhereUniqueInput
  }

  export type PlaylistItemCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<PlaylistItemCreateWithoutPlaylistInput, PlaylistItemUncheckedCreateWithoutPlaylistInput> | PlaylistItemCreateWithoutPlaylistInput[] | PlaylistItemUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutPlaylistInput | PlaylistItemCreateOrConnectWithoutPlaylistInput[]
    createMany?: PlaylistItemCreateManyPlaylistInputEnvelope
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
  }

  export type DisplayCreateNestedOneWithoutPlaylistsInput = {
    create?: XOR<DisplayCreateWithoutPlaylistsInput, DisplayUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutPlaylistsInput
    connect?: DisplayWhereUniqueInput
  }

  export type PlaylistItemUncheckedCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<PlaylistItemCreateWithoutPlaylistInput, PlaylistItemUncheckedCreateWithoutPlaylistInput> | PlaylistItemCreateWithoutPlaylistInput[] | PlaylistItemUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutPlaylistInput | PlaylistItemCreateOrConnectWithoutPlaylistInput[]
    createMany?: PlaylistItemCreateManyPlaylistInputEnvelope
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPlaylistsNestedInput = {
    create?: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistsInput
    upsert?: UserUpsertWithoutPlaylistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlaylistsInput, UserUpdateWithoutPlaylistsInput>, UserUncheckedUpdateWithoutPlaylistsInput>
  }

  export type PlaylistItemUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<PlaylistItemCreateWithoutPlaylistInput, PlaylistItemUncheckedCreateWithoutPlaylistInput> | PlaylistItemCreateWithoutPlaylistInput[] | PlaylistItemUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutPlaylistInput | PlaylistItemCreateOrConnectWithoutPlaylistInput[]
    upsert?: PlaylistItemUpsertWithWhereUniqueWithoutPlaylistInput | PlaylistItemUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: PlaylistItemCreateManyPlaylistInputEnvelope
    set?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    disconnect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    delete?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    update?: PlaylistItemUpdateWithWhereUniqueWithoutPlaylistInput | PlaylistItemUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: PlaylistItemUpdateManyWithWhereWithoutPlaylistInput | PlaylistItemUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
  }

  export type DisplayUpdateOneWithoutPlaylistsNestedInput = {
    create?: XOR<DisplayCreateWithoutPlaylistsInput, DisplayUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutPlaylistsInput
    upsert?: DisplayUpsertWithoutPlaylistsInput
    disconnect?: DisplayWhereInput | boolean
    delete?: DisplayWhereInput | boolean
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutPlaylistsInput, DisplayUpdateWithoutPlaylistsInput>, DisplayUncheckedUpdateWithoutPlaylistsInput>
  }

  export type PlaylistItemUncheckedUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<PlaylistItemCreateWithoutPlaylistInput, PlaylistItemUncheckedCreateWithoutPlaylistInput> | PlaylistItemCreateWithoutPlaylistInput[] | PlaylistItemUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: PlaylistItemCreateOrConnectWithoutPlaylistInput | PlaylistItemCreateOrConnectWithoutPlaylistInput[]
    upsert?: PlaylistItemUpsertWithWhereUniqueWithoutPlaylistInput | PlaylistItemUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: PlaylistItemCreateManyPlaylistInputEnvelope
    set?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    disconnect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    delete?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    connect?: PlaylistItemWhereUniqueInput | PlaylistItemWhereUniqueInput[]
    update?: PlaylistItemUpdateWithWhereUniqueWithoutPlaylistInput | PlaylistItemUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: PlaylistItemUpdateManyWithWhereWithoutPlaylistInput | PlaylistItemUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
  }

  export type PlaylistCreateNestedOneWithoutPlaylistItemInput = {
    create?: XOR<PlaylistCreateWithoutPlaylistItemInput, PlaylistUncheckedCreateWithoutPlaylistItemInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutPlaylistItemInput
    connect?: PlaylistWhereUniqueInput
  }

  export type ContentCreateNestedOneWithoutPlaylistItemsInput = {
    create?: XOR<ContentCreateWithoutPlaylistItemsInput, ContentUncheckedCreateWithoutPlaylistItemsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutPlaylistItemsInput
    connect?: ContentWhereUniqueInput
  }

  export type DisplayContentPairCreateNestedOneWithoutPlaylistItemsInput = {
    create?: XOR<DisplayContentPairCreateWithoutPlaylistItemsInput, DisplayContentPairUncheckedCreateWithoutPlaylistItemsInput>
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutPlaylistItemsInput
    connect?: DisplayContentPairWhereUniqueInput
  }

  export type PlaylistUpdateOneRequiredWithoutPlaylistItemNestedInput = {
    create?: XOR<PlaylistCreateWithoutPlaylistItemInput, PlaylistUncheckedCreateWithoutPlaylistItemInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutPlaylistItemInput
    upsert?: PlaylistUpsertWithoutPlaylistItemInput
    connect?: PlaylistWhereUniqueInput
    update?: XOR<XOR<PlaylistUpdateToOneWithWhereWithoutPlaylistItemInput, PlaylistUpdateWithoutPlaylistItemInput>, PlaylistUncheckedUpdateWithoutPlaylistItemInput>
  }

  export type ContentUpdateOneRequiredWithoutPlaylistItemsNestedInput = {
    create?: XOR<ContentCreateWithoutPlaylistItemsInput, ContentUncheckedCreateWithoutPlaylistItemsInput>
    connectOrCreate?: ContentCreateOrConnectWithoutPlaylistItemsInput
    upsert?: ContentUpsertWithoutPlaylistItemsInput
    connect?: ContentWhereUniqueInput
    update?: XOR<XOR<ContentUpdateToOneWithWhereWithoutPlaylistItemsInput, ContentUpdateWithoutPlaylistItemsInput>, ContentUncheckedUpdateWithoutPlaylistItemsInput>
  }

  export type DisplayContentPairUpdateOneRequiredWithoutPlaylistItemsNestedInput = {
    create?: XOR<DisplayContentPairCreateWithoutPlaylistItemsInput, DisplayContentPairUncheckedCreateWithoutPlaylistItemsInput>
    connectOrCreate?: DisplayContentPairCreateOrConnectWithoutPlaylistItemsInput
    upsert?: DisplayContentPairUpsertWithoutPlaylistItemsInput
    connect?: DisplayContentPairWhereUniqueInput
    update?: XOR<XOR<DisplayContentPairUpdateToOneWithWhereWithoutPlaylistItemsInput, DisplayContentPairUpdateWithoutPlaylistItemsInput>, DisplayContentPairUncheckedUpdateWithoutPlaylistItemsInput>
  }

  export type OrganizationCreateNestedOneWithoutHostedFilesInput = {
    create?: XOR<OrganizationCreateWithoutHostedFilesInput, OrganizationUncheckedCreateWithoutHostedFilesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutHostedFilesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutHostedFilesInput = {
    create?: XOR<UserCreateWithoutHostedFilesInput, UserUncheckedCreateWithoutHostedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostedFilesInput
    connect?: UserWhereUniqueInput
  }

  export type ContentCreateNestedManyWithoutHostedFileInput = {
    create?: XOR<ContentCreateWithoutHostedFileInput, ContentUncheckedCreateWithoutHostedFileInput> | ContentCreateWithoutHostedFileInput[] | ContentUncheckedCreateWithoutHostedFileInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutHostedFileInput | ContentCreateOrConnectWithoutHostedFileInput[]
    createMany?: ContentCreateManyHostedFileInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type ContentUncheckedCreateNestedManyWithoutHostedFileInput = {
    create?: XOR<ContentCreateWithoutHostedFileInput, ContentUncheckedCreateWithoutHostedFileInput> | ContentCreateWithoutHostedFileInput[] | ContentUncheckedCreateWithoutHostedFileInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutHostedFileInput | ContentCreateOrConnectWithoutHostedFileInput[]
    createMany?: ContentCreateManyHostedFileInputEnvelope
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type EnumHostedFileUploadStatusFieldUpdateOperationsInput = {
    set?: $Enums.HostedFileUploadStatus
  }

  export type OrganizationUpdateOneRequiredWithoutHostedFilesNestedInput = {
    create?: XOR<OrganizationCreateWithoutHostedFilesInput, OrganizationUncheckedCreateWithoutHostedFilesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutHostedFilesInput
    upsert?: OrganizationUpsertWithoutHostedFilesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutHostedFilesInput, OrganizationUpdateWithoutHostedFilesInput>, OrganizationUncheckedUpdateWithoutHostedFilesInput>
  }

  export type UserUpdateOneRequiredWithoutHostedFilesNestedInput = {
    create?: XOR<UserCreateWithoutHostedFilesInput, UserUncheckedCreateWithoutHostedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostedFilesInput
    upsert?: UserUpsertWithoutHostedFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHostedFilesInput, UserUpdateWithoutHostedFilesInput>, UserUncheckedUpdateWithoutHostedFilesInput>
  }

  export type ContentUpdateManyWithoutHostedFileNestedInput = {
    create?: XOR<ContentCreateWithoutHostedFileInput, ContentUncheckedCreateWithoutHostedFileInput> | ContentCreateWithoutHostedFileInput[] | ContentUncheckedCreateWithoutHostedFileInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutHostedFileInput | ContentCreateOrConnectWithoutHostedFileInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutHostedFileInput | ContentUpsertWithWhereUniqueWithoutHostedFileInput[]
    createMany?: ContentCreateManyHostedFileInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutHostedFileInput | ContentUpdateWithWhereUniqueWithoutHostedFileInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutHostedFileInput | ContentUpdateManyWithWhereWithoutHostedFileInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type ContentUncheckedUpdateManyWithoutHostedFileNestedInput = {
    create?: XOR<ContentCreateWithoutHostedFileInput, ContentUncheckedCreateWithoutHostedFileInput> | ContentCreateWithoutHostedFileInput[] | ContentUncheckedCreateWithoutHostedFileInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutHostedFileInput | ContentCreateOrConnectWithoutHostedFileInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutHostedFileInput | ContentUpsertWithWhereUniqueWithoutHostedFileInput[]
    createMany?: ContentCreateManyHostedFileInputEnvelope
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutHostedFileInput | ContentUpdateWithWhereUniqueWithoutHostedFileInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutHostedFileInput | ContentUpdateManyWithWhereWithoutHostedFileInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type ContentCreateNestedManyWithoutExhibitsInput = {
    create?: XOR<ContentCreateWithoutExhibitsInput, ContentUncheckedCreateWithoutExhibitsInput> | ContentCreateWithoutExhibitsInput[] | ContentUncheckedCreateWithoutExhibitsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutExhibitsInput | ContentCreateOrConnectWithoutExhibitsInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type ContentUncheckedCreateNestedManyWithoutExhibitsInput = {
    create?: XOR<ContentCreateWithoutExhibitsInput, ContentUncheckedCreateWithoutExhibitsInput> | ContentCreateWithoutExhibitsInput[] | ContentUncheckedCreateWithoutExhibitsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutExhibitsInput | ContentCreateOrConnectWithoutExhibitsInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
  }

  export type ContentUpdateManyWithoutExhibitsNestedInput = {
    create?: XOR<ContentCreateWithoutExhibitsInput, ContentUncheckedCreateWithoutExhibitsInput> | ContentCreateWithoutExhibitsInput[] | ContentUncheckedCreateWithoutExhibitsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutExhibitsInput | ContentCreateOrConnectWithoutExhibitsInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutExhibitsInput | ContentUpsertWithWhereUniqueWithoutExhibitsInput[]
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutExhibitsInput | ContentUpdateWithWhereUniqueWithoutExhibitsInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutExhibitsInput | ContentUpdateManyWithWhereWithoutExhibitsInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type ContentUncheckedUpdateManyWithoutExhibitsNestedInput = {
    create?: XOR<ContentCreateWithoutExhibitsInput, ContentUncheckedCreateWithoutExhibitsInput> | ContentCreateWithoutExhibitsInput[] | ContentUncheckedCreateWithoutExhibitsInput[]
    connectOrCreate?: ContentCreateOrConnectWithoutExhibitsInput | ContentCreateOrConnectWithoutExhibitsInput[]
    upsert?: ContentUpsertWithWhereUniqueWithoutExhibitsInput | ContentUpsertWithWhereUniqueWithoutExhibitsInput[]
    set?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    disconnect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    delete?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    connect?: ContentWhereUniqueInput | ContentWhereUniqueInput[]
    update?: ContentUpdateWithWhereUniqueWithoutExhibitsInput | ContentUpdateWithWhereUniqueWithoutExhibitsInput[]
    updateMany?: ContentUpdateManyWithWhereWithoutExhibitsInput | ContentUpdateManyWithWhereWithoutExhibitsInput[]
    deleteMany?: ContentScalarWhereInput | ContentScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserInviteCreateNestedManyWithoutRolesInput = {
    create?: XOR<UserInviteCreateWithoutRolesInput, UserInviteUncheckedCreateWithoutRolesInput> | UserInviteCreateWithoutRolesInput[] | UserInviteUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutRolesInput | UserInviteCreateOrConnectWithoutRolesInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserInviteUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<UserInviteCreateWithoutRolesInput, UserInviteUncheckedCreateWithoutRolesInput> | UserInviteCreateWithoutRolesInput[] | UserInviteUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutRolesInput | UserInviteCreateOrConnectWithoutRolesInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRolesInput | UserUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRolesInput | UserUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRolesInput | UserUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserInviteUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UserInviteCreateWithoutRolesInput, UserInviteUncheckedCreateWithoutRolesInput> | UserInviteCreateWithoutRolesInput[] | UserInviteUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutRolesInput | UserInviteCreateOrConnectWithoutRolesInput[]
    upsert?: UserInviteUpsertWithWhereUniqueWithoutRolesInput | UserInviteUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    disconnect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    delete?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    update?: UserInviteUpdateWithWhereUniqueWithoutRolesInput | UserInviteUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UserInviteUpdateManyWithWhereWithoutRolesInput | UserInviteUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput> | UserCreateWithoutRolesInput[] | UserUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput | UserCreateOrConnectWithoutRolesInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRolesInput | UserUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRolesInput | UserUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRolesInput | UserUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserInviteUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<UserInviteCreateWithoutRolesInput, UserInviteUncheckedCreateWithoutRolesInput> | UserInviteCreateWithoutRolesInput[] | UserInviteUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: UserInviteCreateOrConnectWithoutRolesInput | UserInviteCreateOrConnectWithoutRolesInput[]
    upsert?: UserInviteUpsertWithWhereUniqueWithoutRolesInput | UserInviteUpsertWithWhereUniqueWithoutRolesInput[]
    set?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    disconnect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    delete?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    connect?: UserInviteWhereUniqueInput | UserInviteWhereUniqueInput[]
    update?: UserInviteUpdateWithWhereUniqueWithoutRolesInput | UserInviteUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: UserInviteUpdateManyWithWhereWithoutRolesInput | UserInviteUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
  }

  export type DisplayCreateNestedOneWithoutDisplayRenewalInput = {
    create?: XOR<DisplayCreateWithoutDisplayRenewalInput, DisplayUncheckedCreateWithoutDisplayRenewalInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutDisplayRenewalInput
    connect?: DisplayWhereUniqueInput
  }

  export type DisplayUpdateOneRequiredWithoutDisplayRenewalNestedInput = {
    create?: XOR<DisplayCreateWithoutDisplayRenewalInput, DisplayUncheckedCreateWithoutDisplayRenewalInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutDisplayRenewalInput
    upsert?: DisplayUpsertWithoutDisplayRenewalInput
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutDisplayRenewalInput, DisplayUpdateWithoutDisplayRenewalInput>, DisplayUncheckedUpdateWithoutDisplayRenewalInput>
  }

  export type OrganizationCreateNestedOneWithoutLicenseInput = {
    create?: XOR<OrganizationCreateWithoutLicenseInput, OrganizationUncheckedCreateWithoutLicenseInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLicenseInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUncheckedCreateNestedOneWithoutLicenseInput = {
    create?: XOR<OrganizationCreateWithoutLicenseInput, OrganizationUncheckedCreateWithoutLicenseInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLicenseInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumLicenseTypeFieldUpdateOperationsInput = {
    set?: $Enums.LicenseType
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type OrganizationUpdateOneWithoutLicenseNestedInput = {
    create?: XOR<OrganizationCreateWithoutLicenseInput, OrganizationUncheckedCreateWithoutLicenseInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLicenseInput
    upsert?: OrganizationUpsertWithoutLicenseInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutLicenseInput, OrganizationUpdateWithoutLicenseInput>, OrganizationUncheckedUpdateWithoutLicenseInput>
  }

  export type OrganizationUncheckedUpdateOneWithoutLicenseNestedInput = {
    create?: XOR<OrganizationCreateWithoutLicenseInput, OrganizationUncheckedCreateWithoutLicenseInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLicenseInput
    upsert?: OrganizationUpsertWithoutLicenseInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutLicenseInput, OrganizationUpdateWithoutLicenseInput>, OrganizationUncheckedUpdateWithoutLicenseInput>
  }

  export type OrganizationCreateNestedOneWithoutUserInvitesInput = {
    create?: XOR<OrganizationCreateWithoutUserInvitesInput, OrganizationUncheckedCreateWithoutUserInvitesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUserInvitesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserInvitesInput = {
    create?: XOR<UserCreateWithoutUserInvitesInput, UserUncheckedCreateWithoutUserInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedManyWithoutUserInvitesInput = {
    create?: XOR<RoleCreateWithoutUserInvitesInput, RoleUncheckedCreateWithoutUserInvitesInput> | RoleCreateWithoutUserInvitesInput[] | RoleUncheckedCreateWithoutUserInvitesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInvitesInput | RoleCreateOrConnectWithoutUserInvitesInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutUserInvitesInput = {
    create?: XOR<RoleCreateWithoutUserInvitesInput, RoleUncheckedCreateWithoutUserInvitesInput> | RoleCreateWithoutUserInvitesInput[] | RoleUncheckedCreateWithoutUserInvitesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInvitesInput | RoleCreateOrConnectWithoutUserInvitesInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutUserInvitesNestedInput = {
    create?: XOR<OrganizationCreateWithoutUserInvitesInput, OrganizationUncheckedCreateWithoutUserInvitesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUserInvitesInput
    upsert?: OrganizationUpsertWithoutUserInvitesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUserInvitesInput, OrganizationUpdateWithoutUserInvitesInput>, OrganizationUncheckedUpdateWithoutUserInvitesInput>
  }

  export type UserUpdateOneRequiredWithoutUserInvitesNestedInput = {
    create?: XOR<UserCreateWithoutUserInvitesInput, UserUncheckedCreateWithoutUserInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserInvitesInput
    upsert?: UserUpsertWithoutUserInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserInvitesInput, UserUpdateWithoutUserInvitesInput>, UserUncheckedUpdateWithoutUserInvitesInput>
  }

  export type RoleUpdateManyWithoutUserInvitesNestedInput = {
    create?: XOR<RoleCreateWithoutUserInvitesInput, RoleUncheckedCreateWithoutUserInvitesInput> | RoleCreateWithoutUserInvitesInput[] | RoleUncheckedCreateWithoutUserInvitesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInvitesInput | RoleCreateOrConnectWithoutUserInvitesInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUserInvitesInput | RoleUpsertWithWhereUniqueWithoutUserInvitesInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUserInvitesInput | RoleUpdateWithWhereUniqueWithoutUserInvitesInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUserInvitesInput | RoleUpdateManyWithWhereWithoutUserInvitesInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutUserInvitesNestedInput = {
    create?: XOR<RoleCreateWithoutUserInvitesInput, RoleUncheckedCreateWithoutUserInvitesInput> | RoleCreateWithoutUserInvitesInput[] | RoleUncheckedCreateWithoutUserInvitesInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUserInvitesInput | RoleCreateOrConnectWithoutUserInvitesInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUserInvitesInput | RoleUpsertWithWhereUniqueWithoutUserInvitesInput[]
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUserInvitesInput | RoleUpdateWithWhereUniqueWithoutUserInvitesInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUserInvitesInput | RoleUpdateManyWithWhereWithoutUserInvitesInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type DisplayCreateNestedOneWithoutWebsocketConnectionTokenInput = {
    create?: XOR<DisplayCreateWithoutWebsocketConnectionTokenInput, DisplayUncheckedCreateWithoutWebsocketConnectionTokenInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutWebsocketConnectionTokenInput
    connect?: DisplayWhereUniqueInput
  }

  export type DisplayUpdateOneRequiredWithoutWebsocketConnectionTokenNestedInput = {
    create?: XOR<DisplayCreateWithoutWebsocketConnectionTokenInput, DisplayUncheckedCreateWithoutWebsocketConnectionTokenInput>
    connectOrCreate?: DisplayCreateOrConnectWithoutWebsocketConnectionTokenInput
    upsert?: DisplayUpsertWithoutWebsocketConnectionTokenInput
    connect?: DisplayWhereUniqueInput
    update?: XOR<XOR<DisplayUpdateToOneWithWhereWithoutWebsocketConnectionTokenInput, DisplayUpdateWithoutWebsocketConnectionTokenInput>, DisplayUncheckedUpdateWithoutWebsocketConnectionTokenInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDeviceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeFilter<$PrismaModel> | $Enums.DeviceType
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumDeviceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DeviceType | EnumDeviceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DeviceType[] | ListEnumDeviceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDeviceTypeWithAggregatesFilter<$PrismaModel> | $Enums.DeviceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDeviceTypeFilter<$PrismaModel>
    _max?: NestedEnumDeviceTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumHostedFileUploadStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HostedFileUploadStatus | EnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostedFileUploadStatusFilter<$PrismaModel> | $Enums.HostedFileUploadStatus
  }

  export type NestedEnumHostedFileUploadStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HostedFileUploadStatus | EnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostedFileUploadStatus[] | ListEnumHostedFileUploadStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostedFileUploadStatusWithAggregatesFilter<$PrismaModel> | $Enums.HostedFileUploadStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostedFileUploadStatusFilter<$PrismaModel>
    _max?: NestedEnumHostedFileUploadStatusFilter<$PrismaModel>
  }

  export type NestedEnumLicenseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LicenseType | EnumLicenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicenseTypeFilter<$PrismaModel> | $Enums.LicenseType
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedEnumLicenseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LicenseType | EnumLicenseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LicenseType[] | ListEnumLicenseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLicenseTypeWithAggregatesFilter<$PrismaModel> | $Enums.LicenseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLicenseTypeFilter<$PrismaModel>
    _max?: NestedEnumLicenseTypeFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type OrganizationCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    content?: ContentCreateNestedManyWithoutOrganizationInput
    displays?: DisplayCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileCreateNestedManyWithoutOrganizationInput
    license: LicenseCreateNestedOneWithoutOrganizationInput
    userInvites?: UserInviteCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    licenseId: string
    content?: ContentUncheckedCreateNestedManyWithoutOrganizationInput
    displays?: DisplayUncheckedCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutOrganizationInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type ContentCreateWithoutUserInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    organization: OrganizationCreateNestedOneWithoutContentInput
    hostedFile?: HostedFileCreateNestedOneWithoutContentInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutContentInput
    style?: StyleCreateNestedOneWithoutContentInput
    exhibits?: ExhibitCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutUserInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutContentInput
    exhibits?: ExhibitUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutUserInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutUserInput, ContentUncheckedCreateWithoutUserInput>
  }

  export type ContentCreateManyUserInputEnvelope = {
    data: ContentCreateManyUserInput | ContentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playlistItem?: PlaylistItemCreateNestedManyWithoutPlaylistInput
    display?: DisplayCreateNestedOneWithoutPlaylistsInput
  }

  export type PlaylistUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayId?: string | null
    playlistItem?: PlaylistItemUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistCreateOrConnectWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistCreateManyUserInputEnvelope = {
    data: PlaylistCreateManyUserInput | PlaylistCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HostedFileCreateWithoutUserInput = {
    id?: string
    objectKey: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutHostedFilesInput
    content?: ContentCreateNestedManyWithoutHostedFileInput
  }

  export type HostedFileUncheckedCreateWithoutUserInput = {
    id?: string
    objectKey: string
    organizationId: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutHostedFileInput
  }

  export type HostedFileCreateOrConnectWithoutUserInput = {
    where: HostedFileWhereUniqueInput
    create: XOR<HostedFileCreateWithoutUserInput, HostedFileUncheckedCreateWithoutUserInput>
  }

  export type HostedFileCreateManyUserInputEnvelope = {
    data: HostedFileCreateManyUserInput | HostedFileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    userInvites?: UserInviteCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type UserInviteCreateWithoutInviterInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutUserInvitesInput
    roles?: RoleCreateNestedManyWithoutUserInvitesInput
  }

  export type UserInviteUncheckedCreateWithoutInviterInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    organizationId: string
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    roles?: RoleUncheckedCreateNestedManyWithoutUserInvitesInput
  }

  export type UserInviteCreateOrConnectWithoutInviterInput = {
    where: UserInviteWhereUniqueInput
    create: XOR<UserInviteCreateWithoutInviterInput, UserInviteUncheckedCreateWithoutInviterInput>
  }

  export type UserInviteCreateManyInviterInputEnvelope = {
    data: UserInviteCreateManyInviterInput | UserInviteCreateManyInviterInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutOrganizationNestedInput
    license?: LicenseUpdateOneRequiredWithoutOrganizationNestedInput
    userInvites?: UserInviteUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licenseId?: StringFieldUpdateOperationsInput | string
    content?: ContentUncheckedUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUncheckedUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutOrganizationNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ContentUpsertWithWhereUniqueWithoutUserInput = {
    where: ContentWhereUniqueInput
    update: XOR<ContentUpdateWithoutUserInput, ContentUncheckedUpdateWithoutUserInput>
    create: XOR<ContentCreateWithoutUserInput, ContentUncheckedCreateWithoutUserInput>
  }

  export type ContentUpdateWithWhereUniqueWithoutUserInput = {
    where: ContentWhereUniqueInput
    data: XOR<ContentUpdateWithoutUserInput, ContentUncheckedUpdateWithoutUserInput>
  }

  export type ContentUpdateManyWithWhereWithoutUserInput = {
    where: ContentScalarWhereInput
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyWithoutUserInput>
  }

  export type ContentScalarWhereInput = {
    AND?: ContentScalarWhereInput | ContentScalarWhereInput[]
    OR?: ContentScalarWhereInput[]
    NOT?: ContentScalarWhereInput | ContentScalarWhereInput[]
    id?: StringFilter<"Content"> | string
    uri?: StringFilter<"Content"> | string
    name?: StringNullableFilter<"Content"> | string | null
    description?: StringNullableFilter<"Content"> | string | null
    thumbnailUri?: StringNullableFilter<"Content"> | string | null
    mimetype?: StringFilter<"Content"> | string
    bytes?: StringFilter<"Content"> | string
    createdAt?: DateTimeFilter<"Content"> | Date | string
    userId?: StringFilter<"Content"> | string
    organizationId?: StringFilter<"Content"> | string
    styleId?: StringNullableFilter<"Content"> | string | null
    directoryId?: StringNullableFilter<"Content"> | string | null
    hostedFileId?: StringNullableFilter<"Content"> | string | null
  }

  export type PlaylistUpsertWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    update: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistUpdateWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    data: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
  }

  export type PlaylistUpdateManyWithWhereWithoutUserInput = {
    where: PlaylistScalarWhereInput
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyWithoutUserInput>
  }

  export type PlaylistScalarWhereInput = {
    AND?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    OR?: PlaylistScalarWhereInput[]
    NOT?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    id?: StringFilter<"Playlist"> | string
    name?: StringFilter<"Playlist"> | string
    description?: StringNullableFilter<"Playlist"> | string | null
    userId?: StringFilter<"Playlist"> | string
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
    displayId?: StringNullableFilter<"Playlist"> | string | null
  }

  export type HostedFileUpsertWithWhereUniqueWithoutUserInput = {
    where: HostedFileWhereUniqueInput
    update: XOR<HostedFileUpdateWithoutUserInput, HostedFileUncheckedUpdateWithoutUserInput>
    create: XOR<HostedFileCreateWithoutUserInput, HostedFileUncheckedCreateWithoutUserInput>
  }

  export type HostedFileUpdateWithWhereUniqueWithoutUserInput = {
    where: HostedFileWhereUniqueInput
    data: XOR<HostedFileUpdateWithoutUserInput, HostedFileUncheckedUpdateWithoutUserInput>
  }

  export type HostedFileUpdateManyWithWhereWithoutUserInput = {
    where: HostedFileScalarWhereInput
    data: XOR<HostedFileUpdateManyMutationInput, HostedFileUncheckedUpdateManyWithoutUserInput>
  }

  export type HostedFileScalarWhereInput = {
    AND?: HostedFileScalarWhereInput | HostedFileScalarWhereInput[]
    OR?: HostedFileScalarWhereInput[]
    NOT?: HostedFileScalarWhereInput | HostedFileScalarWhereInput[]
    id?: StringFilter<"HostedFile"> | string
    objectKey?: StringFilter<"HostedFile"> | string
    userId?: StringFilter<"HostedFile"> | string
    organizationId?: StringFilter<"HostedFile"> | string
    bucketName?: StringFilter<"HostedFile"> | string
    mimetype?: StringFilter<"HostedFile"> | string
    bytes?: StringFilter<"HostedFile"> | string
    region?: StringFilter<"HostedFile"> | string
    status?: EnumHostedFileUploadStatusFilter<"HostedFile"> | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFilter<"HostedFile"> | Date | string
  }

  export type RoleUpsertWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUsersInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateManyWithWhereWithoutUsersInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutUsersInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
  }

  export type UserInviteUpsertWithWhereUniqueWithoutInviterInput = {
    where: UserInviteWhereUniqueInput
    update: XOR<UserInviteUpdateWithoutInviterInput, UserInviteUncheckedUpdateWithoutInviterInput>
    create: XOR<UserInviteCreateWithoutInviterInput, UserInviteUncheckedCreateWithoutInviterInput>
  }

  export type UserInviteUpdateWithWhereUniqueWithoutInviterInput = {
    where: UserInviteWhereUniqueInput
    data: XOR<UserInviteUpdateWithoutInviterInput, UserInviteUncheckedUpdateWithoutInviterInput>
  }

  export type UserInviteUpdateManyWithWhereWithoutInviterInput = {
    where: UserInviteScalarWhereInput
    data: XOR<UserInviteUpdateManyMutationInput, UserInviteUncheckedUpdateManyWithoutInviterInput>
  }

  export type UserInviteScalarWhereInput = {
    AND?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
    OR?: UserInviteScalarWhereInput[]
    NOT?: UserInviteScalarWhereInput | UserInviteScalarWhereInput[]
    id?: StringFilter<"UserInvite"> | string
    token?: StringFilter<"UserInvite"> | string
    email?: StringFilter<"UserInvite"> | string
    name?: StringNullableFilter<"UserInvite"> | string | null
    organizationId?: StringFilter<"UserInvite"> | string
    createdAt?: DateTimeFilter<"UserInvite"> | Date | string
    expiresAt?: DateTimeFilter<"UserInvite"> | Date | string
    acceptedAt?: DateTimeNullableFilter<"UserInvite"> | Date | string | null
    inviterId?: StringFilter<"UserInvite"> | string
  }

  export type UserCreateWithoutOrganizationInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileCreateNestedManyWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteCreateNestedManyWithoutInviterInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutInviterInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ContentCreateWithoutOrganizationInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    user: UserCreateNestedOneWithoutContentInput
    hostedFile?: HostedFileCreateNestedOneWithoutContentInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutContentInput
    style?: StyleCreateNestedOneWithoutContentInput
    exhibits?: ExhibitCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutOrganizationInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutContentInput
    exhibits?: ExhibitUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutOrganizationInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutOrganizationInput, ContentUncheckedCreateWithoutOrganizationInput>
  }

  export type ContentCreateManyOrganizationInputEnvelope = {
    data: ContentCreateManyOrganizationInput | ContentCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type DisplayCreateWithoutOrganizationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    style?: StyleCreateNestedOneWithoutDisplayInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutOrganizationInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutOrganizationInput, DisplayUncheckedCreateWithoutOrganizationInput>
  }

  export type DisplayCreateManyOrganizationInputEnvelope = {
    data: DisplayCreateManyOrganizationInput | DisplayCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type HostedFileCreateWithoutOrganizationInput = {
    id?: string
    objectKey: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutHostedFilesInput
    content?: ContentCreateNestedManyWithoutHostedFileInput
  }

  export type HostedFileUncheckedCreateWithoutOrganizationInput = {
    id?: string
    objectKey: string
    userId: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutHostedFileInput
  }

  export type HostedFileCreateOrConnectWithoutOrganizationInput = {
    where: HostedFileWhereUniqueInput
    create: XOR<HostedFileCreateWithoutOrganizationInput, HostedFileUncheckedCreateWithoutOrganizationInput>
  }

  export type HostedFileCreateManyOrganizationInputEnvelope = {
    data: HostedFileCreateManyOrganizationInput | HostedFileCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type LicenseCreateWithoutOrganizationInput = {
    id?: string
    type?: $Enums.LicenseType
    purchasedAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    priceMonthly?: number
    maxUsers?: number
    maxDisplays?: number
    maxStorageBytes?: bigint | number
  }

  export type LicenseUncheckedCreateWithoutOrganizationInput = {
    id?: string
    type?: $Enums.LicenseType
    purchasedAt?: Date | string
    updatedAt?: Date | string
    expiresAt: Date | string
    priceMonthly?: number
    maxUsers?: number
    maxDisplays?: number
    maxStorageBytes?: bigint | number
  }

  export type LicenseCreateOrConnectWithoutOrganizationInput = {
    where: LicenseWhereUniqueInput
    create: XOR<LicenseCreateWithoutOrganizationInput, LicenseUncheckedCreateWithoutOrganizationInput>
  }

  export type UserInviteCreateWithoutOrganizationInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    inviter: UserCreateNestedOneWithoutUserInvitesInput
    roles?: RoleCreateNestedManyWithoutUserInvitesInput
  }

  export type UserInviteUncheckedCreateWithoutOrganizationInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    inviterId: string
    roles?: RoleUncheckedCreateNestedManyWithoutUserInvitesInput
  }

  export type UserInviteCreateOrConnectWithoutOrganizationInput = {
    where: UserInviteWhereUniqueInput
    create: XOR<UserInviteCreateWithoutOrganizationInput, UserInviteUncheckedCreateWithoutOrganizationInput>
  }

  export type UserInviteCreateManyOrganizationInputEnvelope = {
    data: UserInviteCreateManyOrganizationInput | UserInviteCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    organizationId?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type ContentUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ContentWhereUniqueInput
    update: XOR<ContentUpdateWithoutOrganizationInput, ContentUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ContentCreateWithoutOrganizationInput, ContentUncheckedCreateWithoutOrganizationInput>
  }

  export type ContentUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ContentWhereUniqueInput
    data: XOR<ContentUpdateWithoutOrganizationInput, ContentUncheckedUpdateWithoutOrganizationInput>
  }

  export type ContentUpdateManyWithWhereWithoutOrganizationInput = {
    where: ContentScalarWhereInput
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type DisplayUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: DisplayWhereUniqueInput
    update: XOR<DisplayUpdateWithoutOrganizationInput, DisplayUncheckedUpdateWithoutOrganizationInput>
    create: XOR<DisplayCreateWithoutOrganizationInput, DisplayUncheckedCreateWithoutOrganizationInput>
  }

  export type DisplayUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: DisplayWhereUniqueInput
    data: XOR<DisplayUpdateWithoutOrganizationInput, DisplayUncheckedUpdateWithoutOrganizationInput>
  }

  export type DisplayUpdateManyWithWhereWithoutOrganizationInput = {
    where: DisplayScalarWhereInput
    data: XOR<DisplayUpdateManyMutationInput, DisplayUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type DisplayScalarWhereInput = {
    AND?: DisplayScalarWhereInput | DisplayScalarWhereInput[]
    OR?: DisplayScalarWhereInput[]
    NOT?: DisplayScalarWhereInput | DisplayScalarWhereInput[]
    id?: StringFilter<"Display"> | string
    name?: StringFilter<"Display"> | string
    organizationId?: StringFilter<"Display"> | string
    createdAt?: DateTimeFilter<"Display"> | Date | string
    styleId?: StringNullableFilter<"Display"> | string | null
    settings?: JsonFilter<"Display">
    deviceType?: EnumDeviceTypeFilter<"Display"> | $Enums.DeviceType
    currentDisplayContentPairId?: StringNullableFilter<"Display"> | string | null
    lastSeenAt?: DateTimeFilter<"Display"> | Date | string
    width?: IntFilter<"Display"> | number
    height?: IntFilter<"Display"> | number
  }

  export type HostedFileUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: HostedFileWhereUniqueInput
    update: XOR<HostedFileUpdateWithoutOrganizationInput, HostedFileUncheckedUpdateWithoutOrganizationInput>
    create: XOR<HostedFileCreateWithoutOrganizationInput, HostedFileUncheckedCreateWithoutOrganizationInput>
  }

  export type HostedFileUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: HostedFileWhereUniqueInput
    data: XOR<HostedFileUpdateWithoutOrganizationInput, HostedFileUncheckedUpdateWithoutOrganizationInput>
  }

  export type HostedFileUpdateManyWithWhereWithoutOrganizationInput = {
    where: HostedFileScalarWhereInput
    data: XOR<HostedFileUpdateManyMutationInput, HostedFileUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type LicenseUpsertWithoutOrganizationInput = {
    update: XOR<LicenseUpdateWithoutOrganizationInput, LicenseUncheckedUpdateWithoutOrganizationInput>
    create: XOR<LicenseCreateWithoutOrganizationInput, LicenseUncheckedCreateWithoutOrganizationInput>
    where?: LicenseWhereInput
  }

  export type LicenseUpdateToOneWithWhereWithoutOrganizationInput = {
    where?: LicenseWhereInput
    data: XOR<LicenseUpdateWithoutOrganizationInput, LicenseUncheckedUpdateWithoutOrganizationInput>
  }

  export type LicenseUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLicenseTypeFieldUpdateOperationsInput | $Enums.LicenseType
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxDisplays?: IntFieldUpdateOperationsInput | number
    maxStorageBytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LicenseUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumLicenseTypeFieldUpdateOperationsInput | $Enums.LicenseType
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    priceMonthly?: IntFieldUpdateOperationsInput | number
    maxUsers?: IntFieldUpdateOperationsInput | number
    maxDisplays?: IntFieldUpdateOperationsInput | number
    maxStorageBytes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserInviteUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserInviteWhereUniqueInput
    update: XOR<UserInviteUpdateWithoutOrganizationInput, UserInviteUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserInviteCreateWithoutOrganizationInput, UserInviteUncheckedCreateWithoutOrganizationInput>
  }

  export type UserInviteUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserInviteWhereUniqueInput
    data: XOR<UserInviteUpdateWithoutOrganizationInput, UserInviteUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserInviteUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserInviteScalarWhereInput
    data: XOR<UserInviteUpdateManyMutationInput, UserInviteUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserCreateWithoutContentInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileCreateNestedManyWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteCreateNestedManyWithoutInviterInput
  }

  export type UserUncheckedCreateWithoutContentInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutInviterInput
  }

  export type UserCreateOrConnectWithoutContentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutContentInput, UserUncheckedCreateWithoutContentInput>
  }

  export type OrganizationCreateWithoutContentInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    displays?: DisplayCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileCreateNestedManyWithoutOrganizationInput
    license: LicenseCreateNestedOneWithoutOrganizationInput
    userInvites?: UserInviteCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutContentInput = {
    id?: string
    name: string
    createdAt?: Date | string
    licenseId: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    displays?: DisplayUncheckedCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutOrganizationInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutContentInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutContentInput, OrganizationUncheckedCreateWithoutContentInput>
  }

  export type HostedFileCreateWithoutContentInput = {
    id?: string
    objectKey: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutHostedFilesInput
    user: UserCreateNestedOneWithoutHostedFilesInput
  }

  export type HostedFileUncheckedCreateWithoutContentInput = {
    id?: string
    objectKey: string
    userId: string
    organizationId: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
  }

  export type HostedFileCreateOrConnectWithoutContentInput = {
    where: HostedFileWhereUniqueInput
    create: XOR<HostedFileCreateWithoutContentInput, HostedFileUncheckedCreateWithoutContentInput>
  }

  export type DisplayContentPairCreateWithoutContentInput = {
    id?: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    display: DisplayCreateNestedOneWithoutDisplayContentPairsInput
    currentDisplay?: DisplayCreateNestedOneWithoutCurrentDisplayContentPairInput
    style?: StyleCreateNestedOneWithoutDisplayContentPairsInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairUncheckedCreateWithoutContentInput = {
    id?: string
    displayId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDisplay?: DisplayUncheckedCreateNestedOneWithoutCurrentDisplayContentPairInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairCreateOrConnectWithoutContentInput = {
    where: DisplayContentPairWhereUniqueInput
    create: XOR<DisplayContentPairCreateWithoutContentInput, DisplayContentPairUncheckedCreateWithoutContentInput>
  }

  export type DisplayContentPairCreateManyContentInputEnvelope = {
    data: DisplayContentPairCreateManyContentInput | DisplayContentPairCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistItemCreateWithoutContentInput = {
    id?: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    playlist: PlaylistCreateNestedOneWithoutPlaylistItemInput
    displayContentPair: DisplayContentPairCreateNestedOneWithoutPlaylistItemsInput
  }

  export type PlaylistItemUncheckedCreateWithoutContentInput = {
    id?: string
    playlistId: string
    displayContentPairId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemCreateOrConnectWithoutContentInput = {
    where: PlaylistItemWhereUniqueInput
    create: XOR<PlaylistItemCreateWithoutContentInput, PlaylistItemUncheckedCreateWithoutContentInput>
  }

  export type PlaylistItemCreateManyContentInputEnvelope = {
    data: PlaylistItemCreateManyContentInput | PlaylistItemCreateManyContentInput[]
    skipDuplicates?: boolean
  }

  export type StyleCreateWithoutContentInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    display?: DisplayCreateNestedOneWithoutStyleInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutContentInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    display?: DisplayUncheckedCreateNestedOneWithoutStyleInput
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutContentInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutContentInput, StyleUncheckedCreateWithoutContentInput>
  }

  export type ExhibitCreateWithoutContentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExhibitUncheckedCreateWithoutContentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExhibitCreateOrConnectWithoutContentInput = {
    where: ExhibitWhereUniqueInput
    create: XOR<ExhibitCreateWithoutContentInput, ExhibitUncheckedCreateWithoutContentInput>
  }

  export type UserUpsertWithoutContentInput = {
    update: XOR<UserUpdateWithoutContentInput, UserUncheckedUpdateWithoutContentInput>
    create: XOR<UserCreateWithoutContentInput, UserUncheckedCreateWithoutContentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutContentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutContentInput, UserUncheckedUpdateWithoutContentInput>
  }

  export type UserUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type OrganizationUpsertWithoutContentInput = {
    update: XOR<OrganizationUpdateWithoutContentInput, OrganizationUncheckedUpdateWithoutContentInput>
    create: XOR<OrganizationCreateWithoutContentInput, OrganizationUncheckedCreateWithoutContentInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutContentInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutContentInput, OrganizationUncheckedUpdateWithoutContentInput>
  }

  export type OrganizationUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutOrganizationNestedInput
    license?: LicenseUpdateOneRequiredWithoutOrganizationNestedInput
    userInvites?: UserInviteUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licenseId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUncheckedUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutOrganizationNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type HostedFileUpsertWithoutContentInput = {
    update: XOR<HostedFileUpdateWithoutContentInput, HostedFileUncheckedUpdateWithoutContentInput>
    create: XOR<HostedFileCreateWithoutContentInput, HostedFileUncheckedCreateWithoutContentInput>
    where?: HostedFileWhereInput
  }

  export type HostedFileUpdateToOneWithWhereWithoutContentInput = {
    where?: HostedFileWhereInput
    data: XOR<HostedFileUpdateWithoutContentInput, HostedFileUncheckedUpdateWithoutContentInput>
  }

  export type HostedFileUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutHostedFilesNestedInput
    user?: UserUpdateOneRequiredWithoutHostedFilesNestedInput
  }

  export type HostedFileUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisplayContentPairUpsertWithWhereUniqueWithoutContentInput = {
    where: DisplayContentPairWhereUniqueInput
    update: XOR<DisplayContentPairUpdateWithoutContentInput, DisplayContentPairUncheckedUpdateWithoutContentInput>
    create: XOR<DisplayContentPairCreateWithoutContentInput, DisplayContentPairUncheckedCreateWithoutContentInput>
  }

  export type DisplayContentPairUpdateWithWhereUniqueWithoutContentInput = {
    where: DisplayContentPairWhereUniqueInput
    data: XOR<DisplayContentPairUpdateWithoutContentInput, DisplayContentPairUncheckedUpdateWithoutContentInput>
  }

  export type DisplayContentPairUpdateManyWithWhereWithoutContentInput = {
    where: DisplayContentPairScalarWhereInput
    data: XOR<DisplayContentPairUpdateManyMutationInput, DisplayContentPairUncheckedUpdateManyWithoutContentInput>
  }

  export type DisplayContentPairScalarWhereInput = {
    AND?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
    OR?: DisplayContentPairScalarWhereInput[]
    NOT?: DisplayContentPairScalarWhereInput | DisplayContentPairScalarWhereInput[]
    id?: StringFilter<"DisplayContentPair"> | string
    displayId?: StringFilter<"DisplayContentPair"> | string
    contentId?: StringFilter<"DisplayContentPair"> | string
    collectionId?: StringNullableFilter<"DisplayContentPair"> | string | null
    styleId?: StringNullableFilter<"DisplayContentPair"> | string | null
    createdAt?: DateTimeFilter<"DisplayContentPair"> | Date | string
    updatedAt?: DateTimeFilter<"DisplayContentPair"> | Date | string
  }

  export type PlaylistItemUpsertWithWhereUniqueWithoutContentInput = {
    where: PlaylistItemWhereUniqueInput
    update: XOR<PlaylistItemUpdateWithoutContentInput, PlaylistItemUncheckedUpdateWithoutContentInput>
    create: XOR<PlaylistItemCreateWithoutContentInput, PlaylistItemUncheckedCreateWithoutContentInput>
  }

  export type PlaylistItemUpdateWithWhereUniqueWithoutContentInput = {
    where: PlaylistItemWhereUniqueInput
    data: XOR<PlaylistItemUpdateWithoutContentInput, PlaylistItemUncheckedUpdateWithoutContentInput>
  }

  export type PlaylistItemUpdateManyWithWhereWithoutContentInput = {
    where: PlaylistItemScalarWhereInput
    data: XOR<PlaylistItemUpdateManyMutationInput, PlaylistItemUncheckedUpdateManyWithoutContentInput>
  }

  export type PlaylistItemScalarWhereInput = {
    AND?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
    OR?: PlaylistItemScalarWhereInput[]
    NOT?: PlaylistItemScalarWhereInput | PlaylistItemScalarWhereInput[]
    id?: StringFilter<"PlaylistItem"> | string
    playlistId?: StringFilter<"PlaylistItem"> | string
    contentId?: StringFilter<"PlaylistItem"> | string
    displayContentPairId?: StringFilter<"PlaylistItem"> | string
    order?: IntFilter<"PlaylistItem"> | number
    duration?: IntFilter<"PlaylistItem"> | number
    createdAt?: DateTimeFilter<"PlaylistItem"> | Date | string
    updatedAt?: DateTimeFilter<"PlaylistItem"> | Date | string
  }

  export type StyleUpsertWithoutContentInput = {
    update: XOR<StyleUpdateWithoutContentInput, StyleUncheckedUpdateWithoutContentInput>
    create: XOR<StyleCreateWithoutContentInput, StyleUncheckedCreateWithoutContentInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutContentInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutContentInput, StyleUncheckedUpdateWithoutContentInput>
  }

  export type StyleUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    display?: DisplayUpdateOneWithoutStyleNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    display?: DisplayUncheckedUpdateOneWithoutStyleNestedInput
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type ExhibitUpsertWithWhereUniqueWithoutContentInput = {
    where: ExhibitWhereUniqueInput
    update: XOR<ExhibitUpdateWithoutContentInput, ExhibitUncheckedUpdateWithoutContentInput>
    create: XOR<ExhibitCreateWithoutContentInput, ExhibitUncheckedCreateWithoutContentInput>
  }

  export type ExhibitUpdateWithWhereUniqueWithoutContentInput = {
    where: ExhibitWhereUniqueInput
    data: XOR<ExhibitUpdateWithoutContentInput, ExhibitUncheckedUpdateWithoutContentInput>
  }

  export type ExhibitUpdateManyWithWhereWithoutContentInput = {
    where: ExhibitScalarWhereInput
    data: XOR<ExhibitUpdateManyMutationInput, ExhibitUncheckedUpdateManyWithoutContentInput>
  }

  export type ExhibitScalarWhereInput = {
    AND?: ExhibitScalarWhereInput | ExhibitScalarWhereInput[]
    OR?: ExhibitScalarWhereInput[]
    NOT?: ExhibitScalarWhereInput | ExhibitScalarWhereInput[]
    id?: StringFilter<"Exhibit"> | string
    name?: StringFilter<"Exhibit"> | string
    description?: StringNullableFilter<"Exhibit"> | string | null
    createdAt?: DateTimeFilter<"Exhibit"> | Date | string
    updatedAt?: DateTimeFilter<"Exhibit"> | Date | string
  }

  export type OrganizationCreateWithoutDisplaysInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    content?: ContentCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileCreateNestedManyWithoutOrganizationInput
    license: LicenseCreateNestedOneWithoutOrganizationInput
    userInvites?: UserInviteCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutDisplaysInput = {
    id?: string
    name: string
    createdAt?: Date | string
    licenseId: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    content?: ContentUncheckedCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutOrganizationInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutDisplaysInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutDisplaysInput, OrganizationUncheckedCreateWithoutDisplaysInput>
  }

  export type StyleCreateWithoutDisplayInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    content?: ContentCreateNestedManyWithoutStyleInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutDisplayInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    content?: ContentUncheckedCreateNestedManyWithoutStyleInput
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutDisplayInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutDisplayInput, StyleUncheckedCreateWithoutDisplayInput>
  }

  export type DisplayContentPairCreateWithoutDisplayInput = {
    id?: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDisplay?: DisplayCreateNestedOneWithoutCurrentDisplayContentPairInput
    content: ContentCreateNestedOneWithoutDisplayContentPairsInput
    style?: StyleCreateNestedOneWithoutDisplayContentPairsInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairUncheckedCreateWithoutDisplayInput = {
    id?: string
    contentId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDisplay?: DisplayUncheckedCreateNestedOneWithoutCurrentDisplayContentPairInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairCreateOrConnectWithoutDisplayInput = {
    where: DisplayContentPairWhereUniqueInput
    create: XOR<DisplayContentPairCreateWithoutDisplayInput, DisplayContentPairUncheckedCreateWithoutDisplayInput>
  }

  export type DisplayContentPairCreateManyDisplayInputEnvelope = {
    data: DisplayContentPairCreateManyDisplayInput | DisplayContentPairCreateManyDisplayInput[]
    skipDuplicates?: boolean
  }

  export type DisplayContentPairCreateWithoutCurrentDisplayInput = {
    id?: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    display: DisplayCreateNestedOneWithoutDisplayContentPairsInput
    content: ContentCreateNestedOneWithoutDisplayContentPairsInput
    style?: StyleCreateNestedOneWithoutDisplayContentPairsInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairUncheckedCreateWithoutCurrentDisplayInput = {
    id?: string
    displayId: string
    contentId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairCreateOrConnectWithoutCurrentDisplayInput = {
    where: DisplayContentPairWhereUniqueInput
    create: XOR<DisplayContentPairCreateWithoutCurrentDisplayInput, DisplayContentPairUncheckedCreateWithoutCurrentDisplayInput>
  }

  export type PlaylistCreateWithoutDisplayInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlaylistsInput
    playlistItem?: PlaylistItemCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateWithoutDisplayInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlistItem?: PlaylistItemUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistCreateOrConnectWithoutDisplayInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutDisplayInput, PlaylistUncheckedCreateWithoutDisplayInput>
  }

  export type PlaylistCreateManyDisplayInputEnvelope = {
    data: PlaylistCreateManyDisplayInput | PlaylistCreateManyDisplayInput[]
    skipDuplicates?: boolean
  }

  export type PairingCodeCreateWithoutDisplayInput = {
    code: string
    secret?: string
    createdAt?: Date | string
    claimedAt?: Date | string | null
    deviceType: $Enums.DeviceType
  }

  export type PairingCodeUncheckedCreateWithoutDisplayInput = {
    code: string
    secret?: string
    createdAt?: Date | string
    claimedAt?: Date | string | null
    deviceType: $Enums.DeviceType
  }

  export type PairingCodeCreateOrConnectWithoutDisplayInput = {
    where: PairingCodeWhereUniqueInput
    create: XOR<PairingCodeCreateWithoutDisplayInput, PairingCodeUncheckedCreateWithoutDisplayInput>
  }

  export type PairingCodeCreateManyDisplayInputEnvelope = {
    data: PairingCodeCreateManyDisplayInput | PairingCodeCreateManyDisplayInput[]
    skipDuplicates?: boolean
  }

  export type DisplayRenewalCreateWithoutDisplayInput = {
    id?: string
    secret: string
    createdAt?: Date | string
    validAfter: Date | string
  }

  export type DisplayRenewalUncheckedCreateWithoutDisplayInput = {
    id?: string
    secret: string
    createdAt?: Date | string
    validAfter: Date | string
  }

  export type DisplayRenewalCreateOrConnectWithoutDisplayInput = {
    where: DisplayRenewalWhereUniqueInput
    create: XOR<DisplayRenewalCreateWithoutDisplayInput, DisplayRenewalUncheckedCreateWithoutDisplayInput>
  }

  export type WebsocketConnectionTokenCreateWithoutDisplayInput = {
    id?: string
    token: string
    createdAt?: Date | string
  }

  export type WebsocketConnectionTokenUncheckedCreateWithoutDisplayInput = {
    id?: string
    token: string
    createdAt?: Date | string
  }

  export type WebsocketConnectionTokenCreateOrConnectWithoutDisplayInput = {
    where: WebsocketConnectionTokenWhereUniqueInput
    create: XOR<WebsocketConnectionTokenCreateWithoutDisplayInput, WebsocketConnectionTokenUncheckedCreateWithoutDisplayInput>
  }

  export type OrganizationUpsertWithoutDisplaysInput = {
    update: XOR<OrganizationUpdateWithoutDisplaysInput, OrganizationUncheckedUpdateWithoutDisplaysInput>
    create: XOR<OrganizationCreateWithoutDisplaysInput, OrganizationUncheckedCreateWithoutDisplaysInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutDisplaysInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutDisplaysInput, OrganizationUncheckedUpdateWithoutDisplaysInput>
  }

  export type OrganizationUpdateWithoutDisplaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    content?: ContentUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutOrganizationNestedInput
    license?: LicenseUpdateOneRequiredWithoutOrganizationNestedInput
    userInvites?: UserInviteUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutDisplaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licenseId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    content?: ContentUncheckedUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutOrganizationNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type StyleUpsertWithoutDisplayInput = {
    update: XOR<StyleUpdateWithoutDisplayInput, StyleUncheckedUpdateWithoutDisplayInput>
    create: XOR<StyleCreateWithoutDisplayInput, StyleUncheckedCreateWithoutDisplayInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutDisplayInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutDisplayInput, StyleUncheckedUpdateWithoutDisplayInput>
  }

  export type StyleUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    content?: ContentUpdateManyWithoutStyleNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    content?: ContentUncheckedUpdateManyWithoutStyleNestedInput
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutStyleNestedInput
  }

  export type DisplayContentPairUpsertWithWhereUniqueWithoutDisplayInput = {
    where: DisplayContentPairWhereUniqueInput
    update: XOR<DisplayContentPairUpdateWithoutDisplayInput, DisplayContentPairUncheckedUpdateWithoutDisplayInput>
    create: XOR<DisplayContentPairCreateWithoutDisplayInput, DisplayContentPairUncheckedCreateWithoutDisplayInput>
  }

  export type DisplayContentPairUpdateWithWhereUniqueWithoutDisplayInput = {
    where: DisplayContentPairWhereUniqueInput
    data: XOR<DisplayContentPairUpdateWithoutDisplayInput, DisplayContentPairUncheckedUpdateWithoutDisplayInput>
  }

  export type DisplayContentPairUpdateManyWithWhereWithoutDisplayInput = {
    where: DisplayContentPairScalarWhereInput
    data: XOR<DisplayContentPairUpdateManyMutationInput, DisplayContentPairUncheckedUpdateManyWithoutDisplayInput>
  }

  export type DisplayContentPairUpsertWithoutCurrentDisplayInput = {
    update: XOR<DisplayContentPairUpdateWithoutCurrentDisplayInput, DisplayContentPairUncheckedUpdateWithoutCurrentDisplayInput>
    create: XOR<DisplayContentPairCreateWithoutCurrentDisplayInput, DisplayContentPairUncheckedCreateWithoutCurrentDisplayInput>
    where?: DisplayContentPairWhereInput
  }

  export type DisplayContentPairUpdateToOneWithWhereWithoutCurrentDisplayInput = {
    where?: DisplayContentPairWhereInput
    data: XOR<DisplayContentPairUpdateWithoutCurrentDisplayInput, DisplayContentPairUncheckedUpdateWithoutCurrentDisplayInput>
  }

  export type DisplayContentPairUpdateWithoutCurrentDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    display?: DisplayUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    content?: ContentUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    style?: StyleUpdateOneWithoutDisplayContentPairsNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateWithoutCurrentDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type PlaylistUpsertWithWhereUniqueWithoutDisplayInput = {
    where: PlaylistWhereUniqueInput
    update: XOR<PlaylistUpdateWithoutDisplayInput, PlaylistUncheckedUpdateWithoutDisplayInput>
    create: XOR<PlaylistCreateWithoutDisplayInput, PlaylistUncheckedCreateWithoutDisplayInput>
  }

  export type PlaylistUpdateWithWhereUniqueWithoutDisplayInput = {
    where: PlaylistWhereUniqueInput
    data: XOR<PlaylistUpdateWithoutDisplayInput, PlaylistUncheckedUpdateWithoutDisplayInput>
  }

  export type PlaylistUpdateManyWithWhereWithoutDisplayInput = {
    where: PlaylistScalarWhereInput
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyWithoutDisplayInput>
  }

  export type PairingCodeUpsertWithWhereUniqueWithoutDisplayInput = {
    where: PairingCodeWhereUniqueInput
    update: XOR<PairingCodeUpdateWithoutDisplayInput, PairingCodeUncheckedUpdateWithoutDisplayInput>
    create: XOR<PairingCodeCreateWithoutDisplayInput, PairingCodeUncheckedCreateWithoutDisplayInput>
  }

  export type PairingCodeUpdateWithWhereUniqueWithoutDisplayInput = {
    where: PairingCodeWhereUniqueInput
    data: XOR<PairingCodeUpdateWithoutDisplayInput, PairingCodeUncheckedUpdateWithoutDisplayInput>
  }

  export type PairingCodeUpdateManyWithWhereWithoutDisplayInput = {
    where: PairingCodeScalarWhereInput
    data: XOR<PairingCodeUpdateManyMutationInput, PairingCodeUncheckedUpdateManyWithoutDisplayInput>
  }

  export type PairingCodeScalarWhereInput = {
    AND?: PairingCodeScalarWhereInput | PairingCodeScalarWhereInput[]
    OR?: PairingCodeScalarWhereInput[]
    NOT?: PairingCodeScalarWhereInput | PairingCodeScalarWhereInput[]
    code?: StringFilter<"PairingCode"> | string
    secret?: StringFilter<"PairingCode"> | string
    createdAt?: DateTimeFilter<"PairingCode"> | Date | string
    claimedAt?: DateTimeNullableFilter<"PairingCode"> | Date | string | null
    deviceType?: EnumDeviceTypeFilter<"PairingCode"> | $Enums.DeviceType
    displayId?: StringNullableFilter<"PairingCode"> | string | null
  }

  export type DisplayRenewalUpsertWithoutDisplayInput = {
    update: XOR<DisplayRenewalUpdateWithoutDisplayInput, DisplayRenewalUncheckedUpdateWithoutDisplayInput>
    create: XOR<DisplayRenewalCreateWithoutDisplayInput, DisplayRenewalUncheckedCreateWithoutDisplayInput>
    where?: DisplayRenewalWhereInput
  }

  export type DisplayRenewalUpdateToOneWithWhereWithoutDisplayInput = {
    where?: DisplayRenewalWhereInput
    data: XOR<DisplayRenewalUpdateWithoutDisplayInput, DisplayRenewalUncheckedUpdateWithoutDisplayInput>
  }

  export type DisplayRenewalUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validAfter?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisplayRenewalUncheckedUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validAfter?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsocketConnectionTokenUpsertWithoutDisplayInput = {
    update: XOR<WebsocketConnectionTokenUpdateWithoutDisplayInput, WebsocketConnectionTokenUncheckedUpdateWithoutDisplayInput>
    create: XOR<WebsocketConnectionTokenCreateWithoutDisplayInput, WebsocketConnectionTokenUncheckedCreateWithoutDisplayInput>
    where?: WebsocketConnectionTokenWhereInput
  }

  export type WebsocketConnectionTokenUpdateToOneWithWhereWithoutDisplayInput = {
    where?: WebsocketConnectionTokenWhereInput
    data: XOR<WebsocketConnectionTokenUpdateWithoutDisplayInput, WebsocketConnectionTokenUncheckedUpdateWithoutDisplayInput>
  }

  export type WebsocketConnectionTokenUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebsocketConnectionTokenUncheckedUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisplayCreateWithoutPairingCodesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    style?: StyleCreateNestedOneWithoutDisplayInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutPairingCodesInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutPairingCodesInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutPairingCodesInput, DisplayUncheckedCreateWithoutPairingCodesInput>
  }

  export type DisplayUpsertWithoutPairingCodesInput = {
    update: XOR<DisplayUpdateWithoutPairingCodesInput, DisplayUncheckedUpdateWithoutPairingCodesInput>
    create: XOR<DisplayCreateWithoutPairingCodesInput, DisplayUncheckedCreateWithoutPairingCodesInput>
    where?: DisplayWhereInput
  }

  export type DisplayUpdateToOneWithWhereWithoutPairingCodesInput = {
    where?: DisplayWhereInput
    data: XOR<DisplayUpdateWithoutPairingCodesInput, DisplayUncheckedUpdateWithoutPairingCodesInput>
  }

  export type DisplayUpdateWithoutPairingCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    style?: StyleUpdateOneWithoutDisplayNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutPairingCodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayCreateWithoutDisplayContentPairsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    style?: StyleCreateNestedOneWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutDisplayContentPairsInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutDisplayContentPairsInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutDisplayContentPairsInput, DisplayUncheckedCreateWithoutDisplayContentPairsInput>
  }

  export type DisplayCreateWithoutCurrentDisplayContentPairInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    style?: StyleCreateNestedOneWithoutDisplayInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutCurrentDisplayContentPairInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutCurrentDisplayContentPairInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutCurrentDisplayContentPairInput, DisplayUncheckedCreateWithoutCurrentDisplayContentPairInput>
  }

  export type ContentCreateWithoutDisplayContentPairsInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    user: UserCreateNestedOneWithoutContentInput
    organization: OrganizationCreateNestedOneWithoutContentInput
    hostedFile?: HostedFileCreateNestedOneWithoutContentInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutContentInput
    style?: StyleCreateNestedOneWithoutContentInput
    exhibits?: ExhibitCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutDisplayContentPairsInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutContentInput
    exhibits?: ExhibitUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutDisplayContentPairsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutDisplayContentPairsInput, ContentUncheckedCreateWithoutDisplayContentPairsInput>
  }

  export type StyleCreateWithoutDisplayContentPairsInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    content?: ContentCreateNestedManyWithoutStyleInput
    display?: DisplayCreateNestedOneWithoutStyleInput
  }

  export type StyleUncheckedCreateWithoutDisplayContentPairsInput = {
    id?: string
    size?: number
    posX?: number
    posY?: number
    rotation?: number
    css: JsonNullValueInput | InputJsonValue
    content?: ContentUncheckedCreateNestedManyWithoutStyleInput
    display?: DisplayUncheckedCreateNestedOneWithoutStyleInput
  }

  export type StyleCreateOrConnectWithoutDisplayContentPairsInput = {
    where: StyleWhereUniqueInput
    create: XOR<StyleCreateWithoutDisplayContentPairsInput, StyleUncheckedCreateWithoutDisplayContentPairsInput>
  }

  export type PlaylistItemCreateWithoutDisplayContentPairInput = {
    id?: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    playlist: PlaylistCreateNestedOneWithoutPlaylistItemInput
    content: ContentCreateNestedOneWithoutPlaylistItemsInput
  }

  export type PlaylistItemUncheckedCreateWithoutDisplayContentPairInput = {
    id?: string
    playlistId: string
    contentId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemCreateOrConnectWithoutDisplayContentPairInput = {
    where: PlaylistItemWhereUniqueInput
    create: XOR<PlaylistItemCreateWithoutDisplayContentPairInput, PlaylistItemUncheckedCreateWithoutDisplayContentPairInput>
  }

  export type PlaylistItemCreateManyDisplayContentPairInputEnvelope = {
    data: PlaylistItemCreateManyDisplayContentPairInput | PlaylistItemCreateManyDisplayContentPairInput[]
    skipDuplicates?: boolean
  }

  export type DisplayUpsertWithoutDisplayContentPairsInput = {
    update: XOR<DisplayUpdateWithoutDisplayContentPairsInput, DisplayUncheckedUpdateWithoutDisplayContentPairsInput>
    create: XOR<DisplayCreateWithoutDisplayContentPairsInput, DisplayUncheckedCreateWithoutDisplayContentPairsInput>
    where?: DisplayWhereInput
  }

  export type DisplayUpdateToOneWithWhereWithoutDisplayContentPairsInput = {
    where?: DisplayWhereInput
    data: XOR<DisplayUpdateWithoutDisplayContentPairsInput, DisplayUncheckedUpdateWithoutDisplayContentPairsInput>
  }

  export type DisplayUpdateWithoutDisplayContentPairsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    style?: StyleUpdateOneWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutDisplayContentPairsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUpsertWithoutCurrentDisplayContentPairInput = {
    update: XOR<DisplayUpdateWithoutCurrentDisplayContentPairInput, DisplayUncheckedUpdateWithoutCurrentDisplayContentPairInput>
    create: XOR<DisplayCreateWithoutCurrentDisplayContentPairInput, DisplayUncheckedCreateWithoutCurrentDisplayContentPairInput>
    where?: DisplayWhereInput
  }

  export type DisplayUpdateToOneWithWhereWithoutCurrentDisplayContentPairInput = {
    where?: DisplayWhereInput
    data: XOR<DisplayUpdateWithoutCurrentDisplayContentPairInput, DisplayUncheckedUpdateWithoutCurrentDisplayContentPairInput>
  }

  export type DisplayUpdateWithoutCurrentDisplayContentPairInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    style?: StyleUpdateOneWithoutDisplayNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutCurrentDisplayContentPairInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type ContentUpsertWithoutDisplayContentPairsInput = {
    update: XOR<ContentUpdateWithoutDisplayContentPairsInput, ContentUncheckedUpdateWithoutDisplayContentPairsInput>
    create: XOR<ContentCreateWithoutDisplayContentPairsInput, ContentUncheckedCreateWithoutDisplayContentPairsInput>
    where?: ContentWhereInput
  }

  export type ContentUpdateToOneWithWhereWithoutDisplayContentPairsInput = {
    where?: ContentWhereInput
    data: XOR<ContentUpdateWithoutDisplayContentPairsInput, ContentUncheckedUpdateWithoutDisplayContentPairsInput>
  }

  export type ContentUpdateWithoutDisplayContentPairsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContentNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutContentNestedInput
    hostedFile?: HostedFileUpdateOneWithoutContentNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutContentNestedInput
    style?: StyleUpdateOneWithoutContentNestedInput
    exhibits?: ExhibitUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutDisplayContentPairsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUncheckedUpdateManyWithoutContentNestedInput
  }

  export type StyleUpsertWithoutDisplayContentPairsInput = {
    update: XOR<StyleUpdateWithoutDisplayContentPairsInput, StyleUncheckedUpdateWithoutDisplayContentPairsInput>
    create: XOR<StyleCreateWithoutDisplayContentPairsInput, StyleUncheckedCreateWithoutDisplayContentPairsInput>
    where?: StyleWhereInput
  }

  export type StyleUpdateToOneWithWhereWithoutDisplayContentPairsInput = {
    where?: StyleWhereInput
    data: XOR<StyleUpdateWithoutDisplayContentPairsInput, StyleUncheckedUpdateWithoutDisplayContentPairsInput>
  }

  export type StyleUpdateWithoutDisplayContentPairsInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    content?: ContentUpdateManyWithoutStyleNestedInput
    display?: DisplayUpdateOneWithoutStyleNestedInput
  }

  export type StyleUncheckedUpdateWithoutDisplayContentPairsInput = {
    id?: StringFieldUpdateOperationsInput | string
    size?: FloatFieldUpdateOperationsInput | number
    posX?: FloatFieldUpdateOperationsInput | number
    posY?: FloatFieldUpdateOperationsInput | number
    rotation?: FloatFieldUpdateOperationsInput | number
    css?: JsonNullValueInput | InputJsonValue
    content?: ContentUncheckedUpdateManyWithoutStyleNestedInput
    display?: DisplayUncheckedUpdateOneWithoutStyleNestedInput
  }

  export type PlaylistItemUpsertWithWhereUniqueWithoutDisplayContentPairInput = {
    where: PlaylistItemWhereUniqueInput
    update: XOR<PlaylistItemUpdateWithoutDisplayContentPairInput, PlaylistItemUncheckedUpdateWithoutDisplayContentPairInput>
    create: XOR<PlaylistItemCreateWithoutDisplayContentPairInput, PlaylistItemUncheckedCreateWithoutDisplayContentPairInput>
  }

  export type PlaylistItemUpdateWithWhereUniqueWithoutDisplayContentPairInput = {
    where: PlaylistItemWhereUniqueInput
    data: XOR<PlaylistItemUpdateWithoutDisplayContentPairInput, PlaylistItemUncheckedUpdateWithoutDisplayContentPairInput>
  }

  export type PlaylistItemUpdateManyWithWhereWithoutDisplayContentPairInput = {
    where: PlaylistItemScalarWhereInput
    data: XOR<PlaylistItemUpdateManyMutationInput, PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairInput>
  }

  export type ContentCreateWithoutStyleInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    user: UserCreateNestedOneWithoutContentInput
    organization: OrganizationCreateNestedOneWithoutContentInput
    hostedFile?: HostedFileCreateNestedOneWithoutContentInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutContentInput
    exhibits?: ExhibitCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutStyleInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    directoryId?: string | null
    hostedFileId?: string | null
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutContentInput
    exhibits?: ExhibitUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutStyleInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutStyleInput, ContentUncheckedCreateWithoutStyleInput>
  }

  export type ContentCreateManyStyleInputEnvelope = {
    data: ContentCreateManyStyleInput | ContentCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type DisplayCreateWithoutStyleInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutStyleInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutStyleInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutStyleInput, DisplayUncheckedCreateWithoutStyleInput>
  }

  export type DisplayContentPairCreateWithoutStyleInput = {
    id?: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    display: DisplayCreateNestedOneWithoutDisplayContentPairsInput
    currentDisplay?: DisplayCreateNestedOneWithoutCurrentDisplayContentPairInput
    content: ContentCreateNestedOneWithoutDisplayContentPairsInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairUncheckedCreateWithoutStyleInput = {
    id?: string
    displayId: string
    contentId: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDisplay?: DisplayUncheckedCreateNestedOneWithoutCurrentDisplayContentPairInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutDisplayContentPairInput
  }

  export type DisplayContentPairCreateOrConnectWithoutStyleInput = {
    where: DisplayContentPairWhereUniqueInput
    create: XOR<DisplayContentPairCreateWithoutStyleInput, DisplayContentPairUncheckedCreateWithoutStyleInput>
  }

  export type DisplayContentPairCreateManyStyleInputEnvelope = {
    data: DisplayContentPairCreateManyStyleInput | DisplayContentPairCreateManyStyleInput[]
    skipDuplicates?: boolean
  }

  export type ContentUpsertWithWhereUniqueWithoutStyleInput = {
    where: ContentWhereUniqueInput
    update: XOR<ContentUpdateWithoutStyleInput, ContentUncheckedUpdateWithoutStyleInput>
    create: XOR<ContentCreateWithoutStyleInput, ContentUncheckedCreateWithoutStyleInput>
  }

  export type ContentUpdateWithWhereUniqueWithoutStyleInput = {
    where: ContentWhereUniqueInput
    data: XOR<ContentUpdateWithoutStyleInput, ContentUncheckedUpdateWithoutStyleInput>
  }

  export type ContentUpdateManyWithWhereWithoutStyleInput = {
    where: ContentScalarWhereInput
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyWithoutStyleInput>
  }

  export type DisplayUpsertWithoutStyleInput = {
    update: XOR<DisplayUpdateWithoutStyleInput, DisplayUncheckedUpdateWithoutStyleInput>
    create: XOR<DisplayCreateWithoutStyleInput, DisplayUncheckedCreateWithoutStyleInput>
    where?: DisplayWhereInput
  }

  export type DisplayUpdateToOneWithWhereWithoutStyleInput = {
    where?: DisplayWhereInput
    data: XOR<DisplayUpdateWithoutStyleInput, DisplayUncheckedUpdateWithoutStyleInput>
  }

  export type DisplayUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayContentPairUpsertWithWhereUniqueWithoutStyleInput = {
    where: DisplayContentPairWhereUniqueInput
    update: XOR<DisplayContentPairUpdateWithoutStyleInput, DisplayContentPairUncheckedUpdateWithoutStyleInput>
    create: XOR<DisplayContentPairCreateWithoutStyleInput, DisplayContentPairUncheckedCreateWithoutStyleInput>
  }

  export type DisplayContentPairUpdateWithWhereUniqueWithoutStyleInput = {
    where: DisplayContentPairWhereUniqueInput
    data: XOR<DisplayContentPairUpdateWithoutStyleInput, DisplayContentPairUncheckedUpdateWithoutStyleInput>
  }

  export type DisplayContentPairUpdateManyWithWhereWithoutStyleInput = {
    where: DisplayContentPairScalarWhereInput
    data: XOR<DisplayContentPairUpdateManyMutationInput, DisplayContentPairUncheckedUpdateManyWithoutStyleInput>
  }

  export type UserCreateWithoutPlaylistsInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    content?: ContentCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileCreateNestedManyWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteCreateNestedManyWithoutInviterInput
  }

  export type UserUncheckedCreateWithoutPlaylistsInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutInviterInput
  }

  export type UserCreateOrConnectWithoutPlaylistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
  }

  export type PlaylistItemCreateWithoutPlaylistInput = {
    id?: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    content: ContentCreateNestedOneWithoutPlaylistItemsInput
    displayContentPair: DisplayContentPairCreateNestedOneWithoutPlaylistItemsInput
  }

  export type PlaylistItemUncheckedCreateWithoutPlaylistInput = {
    id?: string
    contentId: string
    displayContentPairId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemCreateOrConnectWithoutPlaylistInput = {
    where: PlaylistItemWhereUniqueInput
    create: XOR<PlaylistItemCreateWithoutPlaylistInput, PlaylistItemUncheckedCreateWithoutPlaylistInput>
  }

  export type PlaylistItemCreateManyPlaylistInputEnvelope = {
    data: PlaylistItemCreateManyPlaylistInput | PlaylistItemCreateManyPlaylistInput[]
    skipDuplicates?: boolean
  }

  export type DisplayCreateWithoutPlaylistsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    style?: StyleCreateNestedOneWithoutDisplayInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutPlaylistsInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutPlaylistsInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutPlaylistsInput, DisplayUncheckedCreateWithoutPlaylistsInput>
  }

  export type UserUpsertWithoutPlaylistsInput = {
    update: XOR<UserUpdateWithoutPlaylistsInput, UserUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<UserCreateWithoutPlaylistsInput, UserUncheckedCreateWithoutPlaylistsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlaylistsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlaylistsInput, UserUncheckedUpdateWithoutPlaylistsInput>
  }

  export type UserUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    content?: ContentUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type PlaylistItemUpsertWithWhereUniqueWithoutPlaylistInput = {
    where: PlaylistItemWhereUniqueInput
    update: XOR<PlaylistItemUpdateWithoutPlaylistInput, PlaylistItemUncheckedUpdateWithoutPlaylistInput>
    create: XOR<PlaylistItemCreateWithoutPlaylistInput, PlaylistItemUncheckedCreateWithoutPlaylistInput>
  }

  export type PlaylistItemUpdateWithWhereUniqueWithoutPlaylistInput = {
    where: PlaylistItemWhereUniqueInput
    data: XOR<PlaylistItemUpdateWithoutPlaylistInput, PlaylistItemUncheckedUpdateWithoutPlaylistInput>
  }

  export type PlaylistItemUpdateManyWithWhereWithoutPlaylistInput = {
    where: PlaylistItemScalarWhereInput
    data: XOR<PlaylistItemUpdateManyMutationInput, PlaylistItemUncheckedUpdateManyWithoutPlaylistInput>
  }

  export type DisplayUpsertWithoutPlaylistsInput = {
    update: XOR<DisplayUpdateWithoutPlaylistsInput, DisplayUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<DisplayCreateWithoutPlaylistsInput, DisplayUncheckedCreateWithoutPlaylistsInput>
    where?: DisplayWhereInput
  }

  export type DisplayUpdateToOneWithWhereWithoutPlaylistsInput = {
    where?: DisplayWhereInput
    data: XOR<DisplayUpdateWithoutPlaylistsInput, DisplayUncheckedUpdateWithoutPlaylistsInput>
  }

  export type DisplayUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    style?: StyleUpdateOneWithoutDisplayNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutPlaylistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type PlaylistCreateWithoutPlaylistItemInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlaylistsInput
    display?: DisplayCreateNestedOneWithoutPlaylistsInput
  }

  export type PlaylistUncheckedCreateWithoutPlaylistItemInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    displayId?: string | null
  }

  export type PlaylistCreateOrConnectWithoutPlaylistItemInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutPlaylistItemInput, PlaylistUncheckedCreateWithoutPlaylistItemInput>
  }

  export type ContentCreateWithoutPlaylistItemsInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    user: UserCreateNestedOneWithoutContentInput
    organization: OrganizationCreateNestedOneWithoutContentInput
    hostedFile?: HostedFileCreateNestedOneWithoutContentInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutContentInput
    style?: StyleCreateNestedOneWithoutContentInput
    exhibits?: ExhibitCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutPlaylistItemsInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutContentInput
    exhibits?: ExhibitUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutPlaylistItemsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutPlaylistItemsInput, ContentUncheckedCreateWithoutPlaylistItemsInput>
  }

  export type DisplayContentPairCreateWithoutPlaylistItemsInput = {
    id?: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    display: DisplayCreateNestedOneWithoutDisplayContentPairsInput
    currentDisplay?: DisplayCreateNestedOneWithoutCurrentDisplayContentPairInput
    content: ContentCreateNestedOneWithoutDisplayContentPairsInput
    style?: StyleCreateNestedOneWithoutDisplayContentPairsInput
  }

  export type DisplayContentPairUncheckedCreateWithoutPlaylistItemsInput = {
    id?: string
    displayId: string
    contentId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDisplay?: DisplayUncheckedCreateNestedOneWithoutCurrentDisplayContentPairInput
  }

  export type DisplayContentPairCreateOrConnectWithoutPlaylistItemsInput = {
    where: DisplayContentPairWhereUniqueInput
    create: XOR<DisplayContentPairCreateWithoutPlaylistItemsInput, DisplayContentPairUncheckedCreateWithoutPlaylistItemsInput>
  }

  export type PlaylistUpsertWithoutPlaylistItemInput = {
    update: XOR<PlaylistUpdateWithoutPlaylistItemInput, PlaylistUncheckedUpdateWithoutPlaylistItemInput>
    create: XOR<PlaylistCreateWithoutPlaylistItemInput, PlaylistUncheckedCreateWithoutPlaylistItemInput>
    where?: PlaylistWhereInput
  }

  export type PlaylistUpdateToOneWithWhereWithoutPlaylistItemInput = {
    where?: PlaylistWhereInput
    data: XOR<PlaylistUpdateWithoutPlaylistItemInput, PlaylistUncheckedUpdateWithoutPlaylistItemInput>
  }

  export type PlaylistUpdateWithoutPlaylistItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
    display?: DisplayUpdateOneWithoutPlaylistsNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutPlaylistItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContentUpsertWithoutPlaylistItemsInput = {
    update: XOR<ContentUpdateWithoutPlaylistItemsInput, ContentUncheckedUpdateWithoutPlaylistItemsInput>
    create: XOR<ContentCreateWithoutPlaylistItemsInput, ContentUncheckedCreateWithoutPlaylistItemsInput>
    where?: ContentWhereInput
  }

  export type ContentUpdateToOneWithWhereWithoutPlaylistItemsInput = {
    where?: ContentWhereInput
    data: XOR<ContentUpdateWithoutPlaylistItemsInput, ContentUncheckedUpdateWithoutPlaylistItemsInput>
  }

  export type ContentUpdateWithoutPlaylistItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContentNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutContentNestedInput
    hostedFile?: HostedFileUpdateOneWithoutContentNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutContentNestedInput
    style?: StyleUpdateOneWithoutContentNestedInput
    exhibits?: ExhibitUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutPlaylistItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUncheckedUpdateManyWithoutContentNestedInput
  }

  export type DisplayContentPairUpsertWithoutPlaylistItemsInput = {
    update: XOR<DisplayContentPairUpdateWithoutPlaylistItemsInput, DisplayContentPairUncheckedUpdateWithoutPlaylistItemsInput>
    create: XOR<DisplayContentPairCreateWithoutPlaylistItemsInput, DisplayContentPairUncheckedCreateWithoutPlaylistItemsInput>
    where?: DisplayContentPairWhereInput
  }

  export type DisplayContentPairUpdateToOneWithWhereWithoutPlaylistItemsInput = {
    where?: DisplayContentPairWhereInput
    data: XOR<DisplayContentPairUpdateWithoutPlaylistItemsInput, DisplayContentPairUncheckedUpdateWithoutPlaylistItemsInput>
  }

  export type DisplayContentPairUpdateWithoutPlaylistItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    display?: DisplayUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    currentDisplay?: DisplayUpdateOneWithoutCurrentDisplayContentPairNestedInput
    content?: ContentUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    style?: StyleUpdateOneWithoutDisplayContentPairsNestedInput
  }

  export type DisplayContentPairUncheckedUpdateWithoutPlaylistItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDisplay?: DisplayUncheckedUpdateOneWithoutCurrentDisplayContentPairNestedInput
  }

  export type OrganizationCreateWithoutHostedFilesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    content?: ContentCreateNestedManyWithoutOrganizationInput
    displays?: DisplayCreateNestedManyWithoutOrganizationInput
    license: LicenseCreateNestedOneWithoutOrganizationInput
    userInvites?: UserInviteCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutHostedFilesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    licenseId: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    content?: ContentUncheckedCreateNestedManyWithoutOrganizationInput
    displays?: DisplayUncheckedCreateNestedManyWithoutOrganizationInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutHostedFilesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutHostedFilesInput, OrganizationUncheckedCreateWithoutHostedFilesInput>
  }

  export type UserCreateWithoutHostedFilesInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    content?: ContentCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteCreateNestedManyWithoutInviterInput
  }

  export type UserUncheckedCreateWithoutHostedFilesInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutInviterInput
  }

  export type UserCreateOrConnectWithoutHostedFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHostedFilesInput, UserUncheckedCreateWithoutHostedFilesInput>
  }

  export type ContentCreateWithoutHostedFileInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    user: UserCreateNestedOneWithoutContentInput
    organization: OrganizationCreateNestedOneWithoutContentInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutContentInput
    style?: StyleCreateNestedOneWithoutContentInput
    exhibits?: ExhibitCreateNestedManyWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutHostedFileInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutContentInput
    exhibits?: ExhibitUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutHostedFileInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutHostedFileInput, ContentUncheckedCreateWithoutHostedFileInput>
  }

  export type ContentCreateManyHostedFileInputEnvelope = {
    data: ContentCreateManyHostedFileInput | ContentCreateManyHostedFileInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutHostedFilesInput = {
    update: XOR<OrganizationUpdateWithoutHostedFilesInput, OrganizationUncheckedUpdateWithoutHostedFilesInput>
    create: XOR<OrganizationCreateWithoutHostedFilesInput, OrganizationUncheckedCreateWithoutHostedFilesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutHostedFilesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutHostedFilesInput, OrganizationUncheckedUpdateWithoutHostedFilesInput>
  }

  export type OrganizationUpdateWithoutHostedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    content?: ContentUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUpdateManyWithoutOrganizationNestedInput
    license?: LicenseUpdateOneRequiredWithoutOrganizationNestedInput
    userInvites?: UserInviteUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutHostedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licenseId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    content?: ContentUncheckedUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUncheckedUpdateManyWithoutOrganizationNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutHostedFilesInput = {
    update: XOR<UserUpdateWithoutHostedFilesInput, UserUncheckedUpdateWithoutHostedFilesInput>
    create: XOR<UserCreateWithoutHostedFilesInput, UserUncheckedCreateWithoutHostedFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHostedFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHostedFilesInput, UserUncheckedUpdateWithoutHostedFilesInput>
  }

  export type UserUpdateWithoutHostedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    content?: ContentUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateWithoutHostedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type ContentUpsertWithWhereUniqueWithoutHostedFileInput = {
    where: ContentWhereUniqueInput
    update: XOR<ContentUpdateWithoutHostedFileInput, ContentUncheckedUpdateWithoutHostedFileInput>
    create: XOR<ContentCreateWithoutHostedFileInput, ContentUncheckedCreateWithoutHostedFileInput>
  }

  export type ContentUpdateWithWhereUniqueWithoutHostedFileInput = {
    where: ContentWhereUniqueInput
    data: XOR<ContentUpdateWithoutHostedFileInput, ContentUncheckedUpdateWithoutHostedFileInput>
  }

  export type ContentUpdateManyWithWhereWithoutHostedFileInput = {
    where: ContentScalarWhereInput
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyWithoutHostedFileInput>
  }

  export type ContentCreateWithoutExhibitsInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    directoryId?: string | null
    user: UserCreateNestedOneWithoutContentInput
    organization: OrganizationCreateNestedOneWithoutContentInput
    hostedFile?: HostedFileCreateNestedOneWithoutContentInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemCreateNestedManyWithoutContentInput
    style?: StyleCreateNestedOneWithoutContentInput
  }

  export type ContentUncheckedCreateWithoutExhibitsInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutContentInput
    playlistItems?: PlaylistItemUncheckedCreateNestedManyWithoutContentInput
  }

  export type ContentCreateOrConnectWithoutExhibitsInput = {
    where: ContentWhereUniqueInput
    create: XOR<ContentCreateWithoutExhibitsInput, ContentUncheckedCreateWithoutExhibitsInput>
  }

  export type ContentUpsertWithWhereUniqueWithoutExhibitsInput = {
    where: ContentWhereUniqueInput
    update: XOR<ContentUpdateWithoutExhibitsInput, ContentUncheckedUpdateWithoutExhibitsInput>
    create: XOR<ContentCreateWithoutExhibitsInput, ContentUncheckedCreateWithoutExhibitsInput>
  }

  export type ContentUpdateWithWhereUniqueWithoutExhibitsInput = {
    where: ContentWhereUniqueInput
    data: XOR<ContentUpdateWithoutExhibitsInput, ContentUncheckedUpdateWithoutExhibitsInput>
  }

  export type ContentUpdateManyWithWhereWithoutExhibitsInput = {
    where: ContentScalarWhereInput
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyWithoutExhibitsInput>
  }

  export type UserCreateWithoutRolesInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    content?: ContentCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileCreateNestedManyWithoutUserInput
    userInvites?: UserInviteCreateNestedManyWithoutInviterInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutUserInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutInviterInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserInviteCreateWithoutRolesInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutUserInvitesInput
    inviter: UserCreateNestedOneWithoutUserInvitesInput
  }

  export type UserInviteUncheckedCreateWithoutRolesInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    organizationId: string
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    inviterId: string
  }

  export type UserInviteCreateOrConnectWithoutRolesInput = {
    where: UserInviteWhereUniqueInput
    create: XOR<UserInviteCreateWithoutRolesInput, UserInviteUncheckedCreateWithoutRolesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRolesInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateManyWithWhereWithoutRolesInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRolesInput>
  }

  export type UserInviteUpsertWithWhereUniqueWithoutRolesInput = {
    where: UserInviteWhereUniqueInput
    update: XOR<UserInviteUpdateWithoutRolesInput, UserInviteUncheckedUpdateWithoutRolesInput>
    create: XOR<UserInviteCreateWithoutRolesInput, UserInviteUncheckedCreateWithoutRolesInput>
  }

  export type UserInviteUpdateWithWhereUniqueWithoutRolesInput = {
    where: UserInviteWhereUniqueInput
    data: XOR<UserInviteUpdateWithoutRolesInput, UserInviteUncheckedUpdateWithoutRolesInput>
  }

  export type UserInviteUpdateManyWithWhereWithoutRolesInput = {
    where: UserInviteScalarWhereInput
    data: XOR<UserInviteUpdateManyMutationInput, UserInviteUncheckedUpdateManyWithoutRolesInput>
  }

  export type DisplayCreateWithoutDisplayRenewalInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    style?: StyleCreateNestedOneWithoutDisplayInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutDisplayRenewalInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutDisplayRenewalInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutDisplayRenewalInput, DisplayUncheckedCreateWithoutDisplayRenewalInput>
  }

  export type DisplayUpsertWithoutDisplayRenewalInput = {
    update: XOR<DisplayUpdateWithoutDisplayRenewalInput, DisplayUncheckedUpdateWithoutDisplayRenewalInput>
    create: XOR<DisplayCreateWithoutDisplayRenewalInput, DisplayUncheckedCreateWithoutDisplayRenewalInput>
    where?: DisplayWhereInput
  }

  export type DisplayUpdateToOneWithWhereWithoutDisplayRenewalInput = {
    where?: DisplayWhereInput
    data: XOR<DisplayUpdateWithoutDisplayRenewalInput, DisplayUncheckedUpdateWithoutDisplayRenewalInput>
  }

  export type DisplayUpdateWithoutDisplayRenewalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    style?: StyleUpdateOneWithoutDisplayNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutDisplayRenewalInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type OrganizationCreateWithoutLicenseInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    content?: ContentCreateNestedManyWithoutOrganizationInput
    displays?: DisplayCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileCreateNestedManyWithoutOrganizationInput
    userInvites?: UserInviteCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutLicenseInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    content?: ContentUncheckedCreateNestedManyWithoutOrganizationInput
    displays?: DisplayUncheckedCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutOrganizationInput
    userInvites?: UserInviteUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutLicenseInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutLicenseInput, OrganizationUncheckedCreateWithoutLicenseInput>
  }

  export type OrganizationUpsertWithoutLicenseInput = {
    update: XOR<OrganizationUpdateWithoutLicenseInput, OrganizationUncheckedUpdateWithoutLicenseInput>
    create: XOR<OrganizationCreateWithoutLicenseInput, OrganizationUncheckedCreateWithoutLicenseInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutLicenseInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutLicenseInput, OrganizationUncheckedUpdateWithoutLicenseInput>
  }

  export type OrganizationUpdateWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    content?: ContentUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutOrganizationNestedInput
    userInvites?: UserInviteUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    content?: ContentUncheckedUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUncheckedUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutOrganizationNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutUserInvitesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    content?: ContentCreateNestedManyWithoutOrganizationInput
    displays?: DisplayCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileCreateNestedManyWithoutOrganizationInput
    license: LicenseCreateNestedOneWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUserInvitesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    licenseId: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    content?: ContentUncheckedCreateNestedManyWithoutOrganizationInput
    displays?: DisplayUncheckedCreateNestedManyWithoutOrganizationInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUserInvitesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUserInvitesInput, OrganizationUncheckedCreateWithoutUserInvitesInput>
  }

  export type UserCreateWithoutUserInvitesInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    content?: ContentCreateNestedManyWithoutUserInput
    playlists?: PlaylistCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileCreateNestedManyWithoutUserInput
    roles?: RoleCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutUserInvitesInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    organizationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    content?: ContentUncheckedCreateNestedManyWithoutUserInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    hostedFiles?: HostedFileUncheckedCreateNestedManyWithoutUserInput
    roles?: RoleUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutUserInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserInvitesInput, UserUncheckedCreateWithoutUserInvitesInput>
  }

  export type RoleCreateWithoutUserInvitesInput = {
    id?: string
    name: string
    description?: string | null
    users?: UserCreateNestedManyWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutUserInvitesInput = {
    id?: string
    name: string
    description?: string | null
    users?: UserUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RoleCreateOrConnectWithoutUserInvitesInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserInvitesInput, RoleUncheckedCreateWithoutUserInvitesInput>
  }

  export type OrganizationUpsertWithoutUserInvitesInput = {
    update: XOR<OrganizationUpdateWithoutUserInvitesInput, OrganizationUncheckedUpdateWithoutUserInvitesInput>
    create: XOR<OrganizationCreateWithoutUserInvitesInput, OrganizationUncheckedCreateWithoutUserInvitesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUserInvitesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUserInvitesInput, OrganizationUncheckedUpdateWithoutUserInvitesInput>
  }

  export type OrganizationUpdateWithoutUserInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    content?: ContentUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutOrganizationNestedInput
    license?: LicenseUpdateOneRequiredWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUserInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    licenseId?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    content?: ContentUncheckedUpdateManyWithoutOrganizationNestedInput
    displays?: DisplayUncheckedUpdateManyWithoutOrganizationNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutUserInvitesInput = {
    update: XOR<UserUpdateWithoutUserInvitesInput, UserUncheckedUpdateWithoutUserInvitesInput>
    create: XOR<UserCreateWithoutUserInvitesInput, UserUncheckedCreateWithoutUserInvitesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserInvitesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserInvitesInput, UserUncheckedUpdateWithoutUserInvitesInput>
  }

  export type UserUpdateWithoutUserInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    content?: ContentUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutUserInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type RoleUpsertWithWhereUniqueWithoutUserInvitesInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUserInvitesInput, RoleUncheckedUpdateWithoutUserInvitesInput>
    create: XOR<RoleCreateWithoutUserInvitesInput, RoleUncheckedCreateWithoutUserInvitesInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUserInvitesInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUserInvitesInput, RoleUncheckedUpdateWithoutUserInvitesInput>
  }

  export type RoleUpdateManyWithWhereWithoutUserInvitesInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutUserInvitesInput>
  }

  export type DisplayCreateWithoutWebsocketConnectionTokenInput = {
    id?: string
    name: string
    createdAt?: Date | string
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    lastSeenAt?: Date | string
    width?: number
    height?: number
    organization: OrganizationCreateNestedOneWithoutDisplaysInput
    style?: StyleCreateNestedOneWithoutDisplayInput
    displayContentPairs?: DisplayContentPairCreateNestedManyWithoutDisplayInput
    currentDisplayContentPair?: DisplayContentPairCreateNestedOneWithoutCurrentDisplayInput
    playlists?: PlaylistCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalCreateNestedOneWithoutDisplayInput
  }

  export type DisplayUncheckedCreateWithoutWebsocketConnectionTokenInput = {
    id?: string
    name: string
    organizationId: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
    displayContentPairs?: DisplayContentPairUncheckedCreateNestedManyWithoutDisplayInput
    playlists?: PlaylistUncheckedCreateNestedManyWithoutDisplayInput
    pairingCodes?: PairingCodeUncheckedCreateNestedManyWithoutDisplayInput
    displayRenewal?: DisplayRenewalUncheckedCreateNestedOneWithoutDisplayInput
  }

  export type DisplayCreateOrConnectWithoutWebsocketConnectionTokenInput = {
    where: DisplayWhereUniqueInput
    create: XOR<DisplayCreateWithoutWebsocketConnectionTokenInput, DisplayUncheckedCreateWithoutWebsocketConnectionTokenInput>
  }

  export type DisplayUpsertWithoutWebsocketConnectionTokenInput = {
    update: XOR<DisplayUpdateWithoutWebsocketConnectionTokenInput, DisplayUncheckedUpdateWithoutWebsocketConnectionTokenInput>
    create: XOR<DisplayCreateWithoutWebsocketConnectionTokenInput, DisplayUncheckedCreateWithoutWebsocketConnectionTokenInput>
    where?: DisplayWhereInput
  }

  export type DisplayUpdateToOneWithWhereWithoutWebsocketConnectionTokenInput = {
    where?: DisplayWhereInput
    data: XOR<DisplayUpdateWithoutWebsocketConnectionTokenInput, DisplayUncheckedUpdateWithoutWebsocketConnectionTokenInput>
  }

  export type DisplayUpdateWithoutWebsocketConnectionTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    organization?: OrganizationUpdateOneRequiredWithoutDisplaysNestedInput
    style?: StyleUpdateOneWithoutDisplayNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutWebsocketConnectionTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type ContentCreateManyUserInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
  }

  export type PlaylistCreateManyUserInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    displayId?: string | null
  }

  export type HostedFileCreateManyUserInput = {
    id?: string
    objectKey: string
    organizationId: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
  }

  export type UserInviteCreateManyInviterInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    organizationId: string
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
  }

  export type ContentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneRequiredWithoutContentNestedInput
    hostedFile?: HostedFileUpdateOneWithoutContentNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutContentNestedInput
    style?: StyleUpdateOneWithoutContentNestedInput
    exhibits?: ExhibitUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlaylistUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlistItem?: PlaylistItemUpdateManyWithoutPlaylistNestedInput
    display?: DisplayUpdateOneWithoutPlaylistsNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayId?: NullableStringFieldUpdateOperationsInput | string | null
    playlistItem?: PlaylistItemUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    displayId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HostedFileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutHostedFilesNestedInput
    content?: ContentUpdateManyWithoutHostedFileNestedInput
  }

  export type HostedFileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutHostedFileNestedInput
  }

  export type HostedFileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userInvites?: UserInviteUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userInvites?: UserInviteUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserInviteUpdateWithoutInviterInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutUserInvitesNestedInput
    roles?: RoleUpdateManyWithoutUserInvitesNestedInput
  }

  export type UserInviteUncheckedUpdateWithoutInviterInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: RoleUncheckedUpdateManyWithoutUserInvitesNestedInput
  }

  export type UserInviteUncheckedUpdateManyWithoutInviterInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyOrganizationInput = {
    id?: string
    name?: string | null
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContentCreateManyOrganizationInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    styleId?: string | null
    directoryId?: string | null
    hostedFileId?: string | null
  }

  export type DisplayCreateManyOrganizationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    styleId?: string | null
    settings: JsonNullValueInput | InputJsonValue
    deviceType?: $Enums.DeviceType
    currentDisplayContentPairId?: string | null
    lastSeenAt?: Date | string
    width?: number
    height?: number
  }

  export type HostedFileCreateManyOrganizationInput = {
    id?: string
    objectKey: string
    userId: string
    bucketName: string
    mimetype: string
    bytes?: string
    region?: string
    status?: $Enums.HostedFileUploadStatus
    createdAt?: Date | string
  }

  export type UserInviteCreateManyOrganizationInput = {
    id?: string
    token: string
    email: string
    name?: string | null
    createdAt?: Date | string
    expiresAt: Date | string
    acceptedAt?: Date | string | null
    inviterId: string
  }

  export type UserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutUserNestedInput
    roles?: RoleUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutUserNestedInput
    roles?: RoleUncheckedUpdateManyWithoutUsersNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContentNestedInput
    hostedFile?: HostedFileUpdateOneWithoutContentNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutContentNestedInput
    style?: StyleUpdateOneWithoutContentNestedInput
    exhibits?: ExhibitUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisplayUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    style?: StyleUpdateOneWithoutDisplayNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutDisplayNestedInput
    currentDisplayContentPair?: DisplayContentPairUpdateOneWithoutCurrentDisplayNestedInput
    playlists?: PlaylistUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutDisplayNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutDisplayNestedInput
    pairingCodes?: PairingCodeUncheckedUpdateManyWithoutDisplayNestedInput
    displayRenewal?: DisplayRenewalUncheckedUpdateOneWithoutDisplayNestedInput
    websocketConnectionToken?: WebsocketConnectionTokenUncheckedUpdateOneWithoutDisplayNestedInput
  }

  export type DisplayUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
    currentDisplayContentPairId?: NullableStringFieldUpdateOperationsInput | string | null
    lastSeenAt?: DateTimeFieldUpdateOperationsInput | Date | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type HostedFileUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostedFilesNestedInput
    content?: ContentUpdateManyWithoutHostedFileNestedInput
  }

  export type HostedFileUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutHostedFileNestedInput
  }

  export type HostedFileUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    objectKey?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    bucketName?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    status?: EnumHostedFileUploadStatusFieldUpdateOperationsInput | $Enums.HostedFileUploadStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInviteUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inviter?: UserUpdateOneRequiredWithoutUserInvitesNestedInput
    roles?: RoleUpdateManyWithoutUserInvitesNestedInput
  }

  export type UserInviteUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inviterId?: StringFieldUpdateOperationsInput | string
    roles?: RoleUncheckedUpdateManyWithoutUserInvitesNestedInput
  }

  export type UserInviteUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type DisplayContentPairCreateManyContentInput = {
    id?: string
    displayId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemCreateManyContentInput = {
    id?: string
    playlistId: string
    displayContentPairId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DisplayContentPairUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    display?: DisplayUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    currentDisplay?: DisplayUpdateOneWithoutCurrentDisplayContentPairNestedInput
    style?: StyleUpdateOneWithoutDisplayContentPairsNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDisplay?: DisplayUncheckedUpdateOneWithoutCurrentDisplayContentPairNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistItemUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlist?: PlaylistUpdateOneRequiredWithoutPlaylistItemNestedInput
    displayContentPair?: DisplayContentPairUpdateOneRequiredWithoutPlaylistItemsNestedInput
  }

  export type PlaylistItemUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    displayContentPairId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistItemUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    displayContentPairId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExhibitUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExhibitUncheckedUpdateWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExhibitUncheckedUpdateManyWithoutContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DisplayContentPairCreateManyDisplayInput = {
    id?: string
    contentId: string
    collectionId?: string | null
    styleId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistCreateManyDisplayInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PairingCodeCreateManyDisplayInput = {
    code: string
    secret?: string
    createdAt?: Date | string
    claimedAt?: Date | string | null
    deviceType: $Enums.DeviceType
  }

  export type DisplayContentPairUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDisplay?: DisplayUpdateOneWithoutCurrentDisplayContentPairNestedInput
    content?: ContentUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    style?: StyleUpdateOneWithoutDisplayContentPairsNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDisplay?: DisplayUncheckedUpdateOneWithoutCurrentDisplayContentPairNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateManyWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlaylistsNestedInput
    playlistItem?: PlaylistItemUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlistItem?: PlaylistItemUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateManyWithoutDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PairingCodeUpdateWithoutDisplayInput = {
    code?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  }

  export type PairingCodeUncheckedUpdateWithoutDisplayInput = {
    code?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  }

  export type PairingCodeUncheckedUpdateManyWithoutDisplayInput = {
    code?: StringFieldUpdateOperationsInput | string
    secret?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    claimedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deviceType?: EnumDeviceTypeFieldUpdateOperationsInput | $Enums.DeviceType
  }

  export type PlaylistItemCreateManyDisplayContentPairInput = {
    id?: string
    playlistId: string
    contentId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemUpdateWithoutDisplayContentPairInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlist?: PlaylistUpdateOneRequiredWithoutPlaylistItemNestedInput
    content?: ContentUpdateOneRequiredWithoutPlaylistItemsNestedInput
  }

  export type PlaylistItemUncheckedUpdateWithoutDisplayContentPairInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairInput = {
    id?: StringFieldUpdateOperationsInput | string
    playlistId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentCreateManyStyleInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    directoryId?: string | null
    hostedFileId?: string | null
  }

  export type DisplayContentPairCreateManyStyleInput = {
    id?: string
    displayId: string
    contentId: string
    collectionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContentUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContentNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutContentNestedInput
    hostedFile?: HostedFileUpdateOneWithoutContentNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateManyWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DisplayContentPairUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    display?: DisplayUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    currentDisplay?: DisplayUpdateOneWithoutCurrentDisplayContentPairNestedInput
    content?: ContentUpdateOneRequiredWithoutDisplayContentPairsNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDisplay?: DisplayUncheckedUpdateOneWithoutCurrentDisplayContentPairNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutDisplayContentPairNestedInput
  }

  export type DisplayContentPairUncheckedUpdateManyWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    collectionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistItemCreateManyPlaylistInput = {
    id?: string
    contentId: string
    displayContentPairId: string
    order?: number
    duration?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistItemUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUpdateOneRequiredWithoutPlaylistItemsNestedInput
    displayContentPair?: DisplayContentPairUpdateOneRequiredWithoutPlaylistItemsNestedInput
  }

  export type PlaylistItemUncheckedUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    displayContentPairId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistItemUncheckedUpdateManyWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    displayContentPairId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentCreateManyHostedFileInput = {
    id?: string
    uri: string
    name?: string | null
    description?: string | null
    thumbnailUri?: string | null
    mimetype: string
    bytes?: string
    createdAt?: Date | string
    userId: string
    organizationId: string
    styleId?: string | null
    directoryId?: string | null
  }

  export type ContentUpdateWithoutHostedFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContentNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutContentNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutContentNestedInput
    style?: StyleUpdateOneWithoutContentNestedInput
    exhibits?: ExhibitUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutHostedFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutContentNestedInput
    exhibits?: ExhibitUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateManyWithoutHostedFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContentUpdateWithoutExhibitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutContentNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutContentNestedInput
    hostedFile?: HostedFileUpdateOneWithoutContentNestedInput
    displayContentPairs?: DisplayContentPairUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUpdateManyWithoutContentNestedInput
    style?: StyleUpdateOneWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateWithoutExhibitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
    displayContentPairs?: DisplayContentPairUncheckedUpdateManyWithoutContentNestedInput
    playlistItems?: PlaylistItemUncheckedUpdateManyWithoutContentNestedInput
  }

  export type ContentUncheckedUpdateManyWithoutExhibitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uri?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUri?: NullableStringFieldUpdateOperationsInput | string | null
    mimetype?: StringFieldUpdateOperationsInput | string
    bytes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    styleId?: NullableStringFieldUpdateOperationsInput | string | null
    directoryId?: NullableStringFieldUpdateOperationsInput | string | null
    hostedFileId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    content?: ContentUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUpdateManyWithoutUserNestedInput
    userInvites?: UserInviteUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: ContentUncheckedUpdateManyWithoutUserNestedInput
    playlists?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    hostedFiles?: HostedFileUncheckedUpdateManyWithoutUserNestedInput
    userInvites?: UserInviteUncheckedUpdateManyWithoutInviterNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserInviteUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutUserInvitesNestedInput
    inviter?: UserUpdateOneRequiredWithoutUserInvitesNestedInput
  }

  export type UserInviteUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type UserInviteUncheckedUpdateManyWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inviterId?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUpdateWithoutUserInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutUserInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutUserInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrganizationCountOutputTypeDefaultArgs instead
     */
    export type OrganizationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentCountOutputTypeDefaultArgs instead
     */
    export type ContentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisplayCountOutputTypeDefaultArgs instead
     */
    export type DisplayCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisplayCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisplayContentPairCountOutputTypeDefaultArgs instead
     */
    export type DisplayContentPairCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisplayContentPairCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StyleCountOutputTypeDefaultArgs instead
     */
    export type StyleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StyleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistCountOutputTypeDefaultArgs instead
     */
    export type PlaylistCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaylistCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HostedFileCountOutputTypeDefaultArgs instead
     */
    export type HostedFileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HostedFileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExhibitCountOutputTypeDefaultArgs instead
     */
    export type ExhibitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExhibitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserInviteCountOutputTypeDefaultArgs instead
     */
    export type UserInviteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserInviteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrganizationDefaultArgs instead
     */
    export type OrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContentDefaultArgs instead
     */
    export type ContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisplayDefaultArgs instead
     */
    export type DisplayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisplayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PairingCodeDefaultArgs instead
     */
    export type PairingCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PairingCodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisplayContentPairDefaultArgs instead
     */
    export type DisplayContentPairArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisplayContentPairDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StyleDefaultArgs instead
     */
    export type StyleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StyleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistDefaultArgs instead
     */
    export type PlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaylistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistItemDefaultArgs instead
     */
    export type PlaylistItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaylistItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HostedFileDefaultArgs instead
     */
    export type HostedFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HostedFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExhibitDefaultArgs instead
     */
    export type ExhibitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExhibitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisplayRenewalDefaultArgs instead
     */
    export type DisplayRenewalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisplayRenewalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LicenseDefaultArgs instead
     */
    export type LicenseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LicenseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserInviteDefaultArgs instead
     */
    export type UserInviteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserInviteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebsocketConnectionTokenDefaultArgs instead
     */
    export type WebsocketConnectionTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebsocketConnectionTokenDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}